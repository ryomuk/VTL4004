 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 1 - 2023/03/12 16:43:50


       1/       0 :                     ;;;---------------------------------------------------------------------------
       2/       0 :                     ;;; Tiny Monitor with Very Very Tiny Language Interpreter (VTL-4004)
       3/       0 :                     ;;; for Intel 4004 evaluation board
       4/       0 :                     ;;;
       5/       0 :                     ;;; by Ryo Mukai
       6/       0 :                     ;;; 2023/03/12
       7/       0 :                     ;;;---------------------------------------------------------------------------
       8/       0 :                     
       9/       0 :                     ;;;---------------------------------------------------------------------------
      10/       0 :                     ;;; This source can be assembled with the Macroassembler AS
      11/       0 :                     ;;; (http://john.ccac.rwth-aachen.de:8000/as/)
      12/       0 :                     ;;;---------------------------------------------------------------------------
      13/       0 :                     
      14/       0 :                     	cpu 4004        ; AS's command to specify CPU
      15/       0 :                     
      16/       0 :                     	include "macros.inc" 	; aliases and macros
(1)    1/       0 :                     ;;;---------------------------------------------------------------------------
(1)    2/       0 :                     ;;; function for label to address for FIM&FIN
(1)    3/       0 :                     ;;;---------------------------------------------------------------------------
(1)    4/       0 :                     
(1)    5/       0 :                     lo     	function x, ((x)&255)
(1)    6/       0 :                     up     	function x, ((x>>8)&255)
(1)    7/       0 :                     
(1)    8/       0 :                     ;;;---------------------------------------------------------------------------
(1)    9/       0 :                     ;;; functuon for setting counter for ISZ loop
(1)   10/       0 :                     ;;;---------------------------------------------------------------------------
(1)   11/       0 :                     
(1)   12/       0 :                     loop 	function x, (16-(x))
(1)   13/       0 :                     loops   function x,y, ((16-(x))<<4 + (16-(y)))
(1)   14/       0 :                     
(1)   15/       0 :                     ;;;---------------------------------------------------------------------------
(1)   16/       0 :                     ;;; Alias for Registers and Register Pairs
(1)   17/       0 :                     ;;;---------------------------------------------------------------------------
(1)   18/       0 :                     
(1)   19/       0 :                     ;;; Registers
(1)   20/       0 : =R10                 R10	reg RA
(1)   21/       0 : =R11                 R11     reg RB
(1)   22/       0 : =R12                 R12     reg RC
(1)   23/       0 : =R13                 R13 	reg RD
(1)   24/       0 : =R14                 R14     reg RE
(1)   25/       0 : =R15                 R15     reg RF
(1)   26/       0 :                     
(1)   27/       0 :                     ;;; Register Pairs
(1)   28/       0 : =R0P                 P0      reg R0R1
(1)   29/       0 : =R1P                 P1      reg R2R3
(1)   30/       0 : =R2P                 P2      reg R4R5
(1)   31/       0 : =R3P                 P3      reg R6R7
(1)   32/       0 : =R4P                 P4      reg R8R9
(1)   33/       0 : =R5P                 P5      reg RARB
(1)   34/       0 : =R6P                 P6      reg RCRD
(1)   35/       0 : =R7P                 P7      reg RERF
(1)   36/       0 : =R5P                 R10R11  reg RARB
(1)   37/       0 : =R6P                 R12R13  reg RCRD
(1)   38/       0 : =R7P                 R14R15  reg RERF
(1)   39/       0 :                     
(1)   40/       0 :                     ;;;---------------------------------------------------------------------------
(1)   41/       0 :                     ;;; macro instructions
(1)   42/       0 :                     ;;;---------------------------------------------------------------------------
(1)   43/       0 :                     ;;;----------------------------------------------------------------------------
(1)   44/       0 :                     ;;; For debug
 AS V1.42 Beta [Bld 236] - Source File vtl.asm(macros.inc) - Page 2 - 2023/03/12 16:43:50


(1)   45/       0 :                     ;;;----------------------------------------------------------------------------
(1)   46/       0 :                     ;;;----------------------------------------------------------------------------
(1)   47/       0 :                     ;;; DEBUG_SAFEPUTCHAR
(1)   48/       0 :                     ;;; PUTCHAR that does not destroy P1
(1)   49/       0 :                     ;;;----------------------------------------------------------------------------
(1)   50/       0 :                     DEBUG_SAFEPUTCHAR	macro ch
(1)   51/       0 :                     	JMS PUSH_P1
(1)   52/       0 :                     	FIM P1, ch
(1)   53/       0 :                     	JMS PUTCHAR_P1
(1)   54/       0 :                     	JMS POP_P1
(1)   55/       0 :                     	endm
(1)   56/       0 :                     ;;;----------------------------------------------------------------------------
(1)   57/       0 :                     ;;; Register Pair Operations
(1)   58/       0 :                     ;;;----------------------------------------------------------------------------
(1)   59/       0 :                     LD_P0_P1	macro	; P0 = P1
(1)   60/       0 :                     		LD R2
(1)   61/       0 :                     		XCH R0
(1)   62/       0 :                     		LD R3
(1)   63/       0 :                     		XCH R1
(1)   64/       0 :                     		endm
(1)   65/       0 :                     ;;;----------------------------------------------------------------------------
(1)   66/       0 :                     LD_P0_P2	macro	; P0 = P2
(1)   67/       0 :                     		LD R4
(1)   68/       0 :                     		XCH R0
(1)   69/       0 :                     		LD R5
(1)   70/       0 :                     		XCH R1
(1)   71/       0 :                     		endm
(1)   72/       0 :                     ;;;----------------------------------------------------------------------------
(1)   73/       0 :                     LD_P0_P3	macro	; P0 = P3
(1)   74/       0 :                     		LD R6
(1)   75/       0 :                     		XCH R0
(1)   76/       0 :                     		LD R7
(1)   77/       0 :                     		XCH R1
(1)   78/       0 :                     		endm
(1)   79/       0 :                     ;;;----------------------------------------------------------------------------
(1)   80/       0 :                     LD_P0_P5	macro	; P0 = P5
(1)   81/       0 :                     		LD R10
(1)   82/       0 :                     		XCH R0
(1)   83/       0 :                     		LD R11
(1)   84/       0 :                     		XCH R1
(1)   85/       0 :                     		endm
(1)   86/       0 :                     ;;;----------------------------------------------------------------------------
(1)   87/       0 :                     LD_P0_P6	macro	; P0 = P6
(1)   88/       0 :                     		LD R12
(1)   89/       0 :                     		XCH R0
(1)   90/       0 :                     		LD R13
(1)   91/       0 :                     		XCH R1
(1)   92/       0 :                     		endm
(1)   93/       0 :                     ;;;----------------------------------------------------------------------------
(1)   94/       0 :                     LD_P1_P0	macro	; P1 = P0
(1)   95/       0 :                     		LD R0
(1)   96/       0 :                     		XCH R2
(1)   97/       0 :                     		LD R1
(1)   98/       0 :                     		XCH R3
(1)   99/       0 :                     		endm
(1)  100/       0 :                     ;;;----------------------------------------------------------------------------
(1)  101/       0 :                     LD_P1_P2	macro	; P1 = P2
(1)  102/       0 :                     		LD R4
(1)  103/       0 :                     		XCH R2
(1)  104/       0 :                     		LD R5
 AS V1.42 Beta [Bld 236] - Source File vtl.asm(macros.inc) - Page 3 - 2023/03/12 16:43:50


(1)  105/       0 :                     		XCH R3
(1)  106/       0 :                     		endm
(1)  107/       0 :                     ;;;----------------------------------------------------------------------------
(1)  108/       0 :                     LD_P1_P3	macro	; P1 = P3
(1)  109/       0 :                     		LD R6
(1)  110/       0 :                     		XCH R2
(1)  111/       0 :                     		LD R7
(1)  112/       0 :                     		XCH R3
(1)  113/       0 :                     		endm
(1)  114/       0 :                     ;;;----------------------------------------------------------------------------
(1)  115/       0 :                     LD_P1_P4	macro	; P1 = P4
(1)  116/       0 :                     		LD R8
(1)  117/       0 :                     		XCH R2
(1)  118/       0 :                     		LD R9
(1)  119/       0 :                     		XCH R3
(1)  120/       0 :                     		endm
(1)  121/       0 :                     ;;;----------------------------------------------------------------------------
(1)  122/       0 :                     LD_P2_P0	macro	; P2 = P0
(1)  123/       0 :                     		LD R0
(1)  124/       0 :                     		XCH R4
(1)  125/       0 :                     		LD R1
(1)  126/       0 :                     		XCH R5
(1)  127/       0 :                     		endm
(1)  128/       0 :                     ;;;----------------------------------------------------------------------------
(1)  129/       0 :                     LD_P2_P1	macro	; P2 = P1
(1)  130/       0 :                     		LD R2
(1)  131/       0 :                     		XCH R4
(1)  132/       0 :                     		LD R3
(1)  133/       0 :                     		XCH R5
(1)  134/       0 :                     		endm
(1)  135/       0 :                     ;;;----------------------------------------------------------------------------
(1)  136/       0 :                     LD_P2_P3	macro	; P2 = P3
(1)  137/       0 :                     		LD R6
(1)  138/       0 :                     		XCH R4
(1)  139/       0 :                     		LD R7
(1)  140/       0 :                     		XCH R5
(1)  141/       0 :                     		endm
(1)  142/       0 :                     ;;;----------------------------------------------------------------------------
(1)  143/       0 :                     LD_P2_P4	macro	; P2 = P4
(1)  144/       0 :                     		LD R8
(1)  145/       0 :                     		XCH R4
(1)  146/       0 :                     		LD R9
(1)  147/       0 :                     		XCH R5
(1)  148/       0 :                     		endm
(1)  149/       0 :                     ;;;----------------------------------------------------------------------------
(1)  150/       0 :                     LD_P3_P1	macro	; P3 = P1
(1)  151/       0 :                     		LD R2
(1)  152/       0 :                     		XCH R6
(1)  153/       0 :                     		LD R3
(1)  154/       0 :                     		XCH R7
(1)  155/       0 :                     		endm
(1)  156/       0 :                     ;;;----------------------------------------------------------------------------
(1)  157/       0 :                     LD_P3_P2	macro	; P3 = P2
(1)  158/       0 :                     		LD R4
(1)  159/       0 :                     		XCH R6
(1)  160/       0 :                     		LD R5
(1)  161/       0 :                     		XCH R7
(1)  162/       0 :                     		endm
(1)  163/       0 :                     ;;;----------------------------------------------------------------------------
(1)  164/       0 :                     LD_P3_P5	macro	; P3 = P5
 AS V1.42 Beta [Bld 236] - Source File vtl.asm(macros.inc) - Page 4 - 2023/03/12 16:43:50


(1)  165/       0 :                     		LD R10
(1)  166/       0 :                     		XCH R6
(1)  167/       0 :                     		LD R11
(1)  168/       0 :                     		XCH R7
(1)  169/       0 :                     		endm
(1)  170/       0 :                     ;;;----------------------------------------------------------------------------
(1)  171/       0 :                     LD_P4_P1	macro	; P4 = P1
(1)  172/       0 :                     		LD R2
(1)  173/       0 :                     		XCH R8
(1)  174/       0 :                     		LD R3
(1)  175/       0 :                     		XCH R9
(1)  176/       0 :                     		endm
(1)  177/       0 :                     ;;;----------------------------------------------------------------------------
(1)  178/       0 :                     LD_P5_P0	macro	; P5 = P0
(1)  179/       0 :                     		LD R0
(1)  180/       0 :                     		XCH R10
(1)  181/       0 :                     		LD R1
(1)  182/       0 :                     		XCH R11
(1)  183/       0 :                     		endm
(1)  184/       0 :                     ;;;----------------------------------------------------------------------------
(1)  185/       0 :                     LD_P6_P0	macro	; P6 = P0
(1)  186/       0 :                     		LD R0
(1)  187/       0 :                     		XCH R12
(1)  188/       0 :                     		LD R1
(1)  189/       0 :                     		XCH R13
(1)  190/       0 :                     		endm
(1)  191/       0 :                     ;;;----------------------------------------------------------------------------
(1)  192/       0 :                     LD_P7_P2	macro	; P7 = P2
(1)  193/       0 :                     		LD R4
(1)  194/       0 :                     		XCH R14
(1)  195/       0 :                     		LD R5
(1)  196/       0 :                     		XCH R15
(1)  197/       0 :                     		endm
(1)  198/       0 :                     ;;;----------------------------------------------------------------------------
(1)  199/       0 :                     
      17/       0 :                     
      18/       0 :                     ;;;---------------------------------------------------------------------------
      19/       0 :                     ;;; Hardware Configuration
      20/       0 :                     ;;;---------------------------------------------------------------------------
      21/       0 :                     
      22/       0 :                     ;;; RAM0 and RAM1 must be 4002-1 and located in the BANK#0 (CM-RAM0).
      23/       0 :                     ;;; For RAM2 and RAM3, 4002-2 is preferred, because it can be located
      24/       0 :                     ;;; in the BANK#0 same as RAM0 and RAM1.
      25/       0 :                     ;;; However -2 is more expensive and difficult to get than -1,
      26/       0 :                     ;;; so the chip type of RAM2 and RAM3 is configurable.
      27/       0 :                     ;;; If you use -1 for RAM2 and RAM3, they are located in
      28/       0 :                     ;;; the BANK#1 (CM-RAM1), and DCL must be executed before SRC.
      29/       0 :                     
      30/       0 :                     ;;; Chip type of RAM2 and RAM3
      31/       0 : ="4002-2"            RAM23TYPE	equ "4002-2"	; or "4002-1"
      32/       0 :                     
      33/       0 :                     ;;; BANK# for DCL, and CHIP#=(D7.D6.000000) for SRC
      34/       0 : =0H                  BANK_RAM0	equ 0
      35/       0 : =0H                  CHIP_RAM0      	equ 00H
      36/       0 : =0H                  BANK_RAM1      	equ 0
      37/       0 : =40H                 CHIP_RAM1      	equ 40H
      38/       0 : =>TRUE               	if (RAM23TYPE == "4002-2")
      39/       0 : =0H                  BANK_RAM2      	equ 0
      40/       0 : =80H                 CHIP_RAM2      	equ 80H
      41/       0 : =0H                  BANK_RAM3      	equ 0
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 5 - 2023/03/12 16:43:50


      42/       0 : =0C0H                CHIP_RAM3      	equ 0C0H
      43/       0 : =>FALSE              	elseif (RAM23TYPE == "4002-1")
      44/       0 :                     BANK_RAM2      	equ 1
      45/       0 :                     CHIP_RAM2      	equ 00H
      46/       0 :                     BANK_RAM3      	equ 1
      47/       0 :                     CHIP_RAM3      	equ 40H
      48/       0 : [38]                 	endif
      49/       0 :                     
      50/       0 :                     ;;; Default Bank
      51/       0 :                     ;;; The CM-RAM line should be always set to BANK_DEFAULT
      52/       0 :                     ;;; to omit DCL as much as possible.
      53/       0 :                     ;;; (This is for when RAM23TYPE=="4002-1".)
      54/       0 : =0H                  BANK_DEFAULT	equ BANK_RAM0
      55/       0 :                     		
      56/       0 :                     ;;; Output port for serial interface
      57/       0 : =0H                  BANK_SERIAL     equ BANK_RAM3
      58/       0 : =0C0H                CHIP_SERIAL     equ CHIP_RAM3
      59/       0 :                     
      60/       0 :                     ;;; Output port for program memory bank selection
      61/       0 : =0H                  BANK_PMSELECT	equ BANK_RAM0
      62/       0 : =0H                  CHIP_PMSELECT   equ CHIP_RAM0
      63/       0 :                     
      64/       0 :                     ;;; Program Memory RAM area
      65/       0 : =0F00H               PM_RAM_START	equ 0F00H	; Start address of program memory RAM
      66/       0 : =0FFEH               PM_READ_P0_P1   equ 0FFEH	; Entry of the subroutine to read RAM
      67/       0 :                     				; "FIN P1 and BBL 0"
      68/       0 :                     
      69/       0 :                     ;;; Address labels in the logical program memory PM12
      70/       0 :                     ;;; PM12_LINEBUF	equ 080H
      71/       0 : =0H                  PM12_LINEBUF	equ 000H
      72/       0 : =100H                PM12_PROGRAM	equ 100H
      73/       0 : =0B00H               PM12_DATA	equ 0B00H
      74/       0 : =0DFFH               PM12_MEMEND	equ 0DFFH
      75/       0 :                     
      76/       0 :                     ;;;---------------------------------------------------------------------------
      77/       0 :                     ;;; Data RAM Register Configuration
      78/       0 :                     ;;;---------------------------------------------------------------------------
      79/       0 :                     ;;; RAM0
      80/       0 : =0H                  REG16_INDEX 		equ 00H	; or @, `
      81/       0 : =4H                  REG16_A 		equ 04H	;
      82/       0 : =8H                  REG16_B 		equ 08H	;
      83/       0 : =0CH                 REG16_C 		equ 0CH	;
      84/       0 : =10H                 REG16_D 		equ 10H	;
      85/       0 : =14H                 REG16_E 		equ 14H	;
      86/       0 : =18H                 REG16_F 		equ 18H	;
      87/       0 : =1CH                 REG16_G 		equ 1CH	;
      88/       0 : =20H                 REG16_H 		equ 20H	;
      89/       0 : =24H                 REG16_I 		equ 24H	;
      90/       0 : =28H                 REG16_J 		equ 28H	;
      91/       0 : =2CH                 REG16_K 		equ 2CH	;
      92/       0 : =30H                 REG16_L 		equ 30H	;
      93/       0 : =34H                 REG16_M 		equ 34H	;
      94/       0 : =38H                 REG16_N 		equ 38H	;
      95/       0 : =3CH                 REG16_O 		equ 3CH	;
      96/       0 :                     ;;; RAM1
      97/       0 : =40H                 REG16_P 		equ 40H	;
      98/       0 : =44H                 REG16_Q 		equ 44H	;
      99/       0 : =48H                 REG16_R 		equ 48H	;
     100/       0 : =4CH                 REG16_S 		equ 4CH	;
     101/       0 : =50H                 REG16_T 		equ 50H	;
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 6 - 2023/03/12 16:43:50


     102/       0 : =54H                 REG16_U 		equ 54H	;
     103/       0 : =58H                 REG16_V 		equ 58H	;
     104/       0 : =5CH                 REG16_W 		equ 5CH	;
     105/       0 : =60H                 REG16_X 		equ 60H	;
     106/       0 : =64H                 REG16_Y 		equ 64H	;
     107/       0 : =68H                 REG16_Z  		equ 68H	;
     108/       0 : =6CH                 REG16_LINENUM  		equ 6CH	; current line number
     109/       0 : =70H                 REG16_NEXTLINEPTR	equ 70H	; pointer to the next program line
     110/       0 : =74H                 REG16_PEND		equ 74H	; pointer to the end of program
     111/       0 :                     
     112/       0 : =78H                 REG8_ERROR		equ 78H	; 8bit register
     113/       0 : =7AH                 REG8_ERROR2		equ 7AH	; 8bit register
     114/       0 :                     
     115/       0 : =7CH                 REG4_ZEROSUP		equ 7CH	; 4bit register
     116/       0 : =7DH                 REG4_SIGN		equ 7DH	; 4bit register
     117/       0 : =7EH                 REG4_PRINTFORMAT	equ 7EH	; 4bit register
     118/       0 : =7FH                 REG4_RESERVE_7FH	equ 7FH	; 4bit register (reserved)
     119/       0 :                     
     120/       0 :                     	;; This program assumes RAM2 and RAM3 are 4002-2.
     121/       0 :                     	;; If you use 4002-1, you may need to modify program
     122/       0 :                     	;; related to data RAM registers.
     123/       0 : =>TRUE               	if (RAM23TYPE == "4002-2")
     124/       0 :                     ;;; RAM2
     125/       0 : =80H                 REG16_LVALUE		equ 80H
     126/       0 : =84H                 REG16_RVALUE		equ 84H
     127/       0 : =88H                 REG16_FACTOR		equ 88H
     128/       0 : =8CH                 REG16_EVAL		equ 8CH
     129/       0 : =90H                 REG16_RMND		equ 90H	; Remainder (result of last DIV)
     130/       0 : =94H                 REG16_RETURN		equ 94H
     131/       0 : =98H                 REG16_RANDOM		equ 98H	; (not implemented)
     132/       0 : =9CH                 REG16_ARRAYINDEX	equ 9CH	; (not implemented)
     133/       0 : =0A0H                REG16_TMP		equ 0A0H
     134/       0 : =0A4H                REG16_TMP2		equ 0A4H
     135/       0 : =0A8H                REG16_TMP3		equ 0A8H
     136/       0 : =0ACH                REG16_TMP_PRN		equ 0ACH ; temporary for PRINT routine
     137/       0 : =0B0H                REG16_RESERVED_0B0	equ 0B0H
     138/       0 : =0B4H                REG16_RESERVED_0B4	equ 0B4H
     139/       0 : =0B8H                REG16_RESERVED_0B8	equ 0B8H
     140/       0 : =0BCH                REG16_RESERVED_0BC	equ 0BCH
     141/       0 :                     ;;; RAM3
     142/       0 : =0C0H                REG16_STACKAREA_0C0	equ 0C0H
     143/       0 : =0C4H                REG16_STACKAREA_0C4	equ 0C4H
     144/       0 : =0C8H                REG16_STACKAREA_0C8	equ 0C8H
     145/       0 : =0CCH                REG16_STACKAREA_0CC	equ 0CCH
     146/       0 : =0D0H                REG16_STACKAREA_0D0	equ 0D0H
     147/       0 : =0D4H                REG16_STACKAREA_0D4	equ 0D4H
     148/       0 : =0D8H                REG16_STACKAREA_0D8	equ 0D8H
     149/       0 : =0DCH                REG16_STACKAREA_0DC	equ 0DCH
     150/       0 : =0E0H                REG16_STACKAREA_0E0	equ 0E0H
     151/       0 : =0E4H                REG16_STACKAREA_0E4	equ 0E4H
     152/       0 : =0E8H                REG16_STACKAREA_0E8	equ 0E8H
     153/       0 : =0ECH                REG16_STACKAREA_0EC	equ 0ECH
     154/       0 : =0F0H                REG16_STACKAREA_0F0	equ 0F0H
     155/       0 : =0F4H                REG16_STACKAREA_0F4	equ 0F4H
     156/       0 : =0F8H                REG16_STACKAREA_0F8	equ 0F8H
     157/       0 : =0FCH                REG16_STACKAREA_0FC	equ 0FCH
     158/       0 : =0FCH                REG16_STACKPOINTER	equ 0FCH ; SP is Status char 0 and 1 of This register
     159/       0 : =0H                  INITVAL_STACKPOINTER	equ 00H	 ; Initial value of the SP
     160/       0 :                     				 ; (The SP should be even value
     161/       0 :                     				 ;  in the current implementation)
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 7 - 2023/03/12 16:43:50


     162/       0 : [123]                	endif
     163/       0 :                     	
     164/       0 :                     ;;;---------------------------------------------------------------------------
     165/       0 :                     ;;; Data RAM Register Operation
     166/       0 :                     ;;;---------------------------------------------------------------------------
     167/       0 :                     
     168/       0 :                     ;;;---------------------------------------------------------------------------
     169/       0 :                     ;;; Program Start
     170/       0 :                     ;;;---------------------------------------------------------------------------
     171/       0 :                     	org 0000H		; beginning of Program Memory
     172/       0 :                     
     173/       0 :                     ;;;---------------------------------------------------------------------------
     174/       0 :                     ;;; Mail Loop for Monitor Program
     175/       0 :                     ;;;---------------------------------------------------------------------------
     176/       0 :                     MAIN:
     177/       0 : F0                          CLB
     178/       1 :                     	;; DL is assumed to be set back to BANK_DEFAULT (normally 0)
     179/       1 :                     	;; except when in use for another banks.
     180/       1 : D0                  	LDM BANK_DEFAULT
     181/       2 : FD                  	DCL
     182/       3 :                     
     183/       3 : 59 39               	JMS INIT_STACKPOINTER	; initialize stack pointer
     184/       5 : 5D 82               	JMS INIT_SERIAL 	; Initialize Serial Port
     185/       7 :                     
     186/       7 : 22 00               	FIM P1, loop(16)	; R3 = 0..15
     187/       9 :                     PM_INIT_LOOP:
     188/       9 : A3                  	LD R3
     189/       A : 58 EE               	JMS PM_SELECTPMB
     190/       C : 58 E2               	JMS PM_INIT_BANK ; write PM_READ code on program memory
     191/       E : 73 09               	ISZ R3, PM_INIT_LOOP
     192/      10 :                     
     193/      10 : F0                  	CLB
     194/      11 : 58 EE               	JMS PM_SELECTPMB	 ; set PMB to 0
     195/      13 :                     	
     196/      13 :                     ;       JCN TN, $		;wait for TEST="0" (button pressed)
     197/      13 : 20 3B               	FIM P0, lo(STR_VFD_INIT) ; init VFD
     198/      15 : 5E 00                       JMS PRINTSTR_P0
     199/      17 : 20 17               	FIM P0, lo(STR_OMSG) ; opening message in the Page 7
     200/      19 : 5E 00                       JMS PRINTSTR_P0
     201/      1B :                     
     202/      1B :                     CMD_LOOP:
     203/      1B : 22 5D                       FIM P1, ']'		; prompt
     204/      1D : 5D 28                       JMS PUTCHAR_P1
     205/      1F :                     
     206/      1F :                     L_CR:
     207/      1F : 5D 00               	JMS GETCHAR_P1
     208/      21 : 5D 71                       JMS DISPLED_P1
     209/      23 : 5C EF               	JMS ISCRLF_P1
     210/      25 : 14 2B               	JCN Z, L0
     211/      27 : 5D 5C               	JMS PRINT_CRLF
     212/      29 : 40 1B               	JUN CMD_LOOP
     213/      2B :                     
     214/      2B :                     L0:
     215/      2B : 5D 28               	JMS PUTCHAR_P1
     216/      2D :                     	
     217/      2D : 20 72               	FIM P0, 'r'		; read data memory
     218/      2F : 5D C3               	JMS CMP_P0P1
     219/      31 : 1C 37               	JCN ZN, L1
     220/      33 : 50 87               	JMS SETBANKCHIP_P5
     221/      35 : 4C 06               	JUN COMMAND_R
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 8 - 2023/03/12 16:43:50


     222/      37 :                     L1:
     223/      37 : 20 77               	FIM P0, 'w'		; write to data memory
     224/      39 : 5D C3               	JMS CMP_P0P1
     225/      3B : 1C 41               	JCN ZN, L2
     226/      3D : 50 87               	JMS SETBANKCHIP_P5
     227/      3F : 4C 30               	JUN COMMAND_W
     228/      41 :                     L2:
     229/      41 : 20 52               	FIM P0, 'R'		; READ program memory
     230/      43 : 5D C3               	JMS CMP_P0P1
     231/      45 : 1C 49               	JCN ZN, L3
     232/      47 : 4C AE               	JUN COMMAND_PMR
     233/      49 :                     L3:
     234/      49 : 20 57               	FIM P0, 'W'		; Write Program memory
     235/      4B : 5D C3               	JMS CMP_P0P1
     236/      4D : 1C 51               	JCN ZN, L4
     237/      4F : 4C 73               	JUN COMMAND_PMW
     238/      51 :                     L4:
     239/      51 : 20 43               	FIM P0, 'C'		; Clear program memory
     240/      53 : 5D C3               	JMS CMP_P0P1
     241/      55 : 1C 59               	JCN ZN, L5
     242/      57 : 4C D5               	JUN COMMAND_PMC
     243/      59 :                     L5:
     244/      59 : 20 42                	FIM P0, 'B'		; Set PMB (Program Memory Bank)
     245/      5B : 5D C3                	JMS CMP_P0P1
     246/      5D : 1C 61               	JCN ZN, L6
     247/      5F : 48 F3                	JUN COMMAND_PMB
     248/      61 :                     L6:
     249/      61 : 20 67               	FIM P0, 'g'		; Go to PM_RAM_START (0F00H)
     250/      63 : 5D C3               	JMS CMP_P0P1
     251/      65 : 1C 69               	JCN ZN, L7
     252/      67 : 4C 00               	JUN COMMAND_G
     253/      69 :                     L7:
     254/      69 : 20 76               	FIM P0, 'v'		; VTL-4004 Interpreter
     255/      6B : 5D C3               	JMS CMP_P0P1
     256/      6D : 1C 71               	JCN ZN, L8
     257/      6F : 41 00               	JUN COMMAND_V
     258/      71 :                     L8:
     259/      71 : 20 6C               	FIM P0, 'l'		; Read Logical Memory
     260/      73 : 5D C3               	JMS CMP_P0P1
     261/      75 : 1C 79               	JCN ZN, L9
     262/      77 : 4A D3               	JUN COMMAND_LMR
     263/      79 :                     L9:
     264/      79 : 20 4C               	FIM P0, 'L'		; Write Logical Memory
     265/      7B : 5D C3               	JMS CMP_P0P1
     266/      7D : 1C 81               	JCN ZN, L10
     267/      7F : 4B 1C               	JUN COMMAND_LMW
     268/      81 :                     L10:
     269/      81 : 20 91               	FIM P0, lo(STR_CMDERR)
     270/      83 : 5E 00               	JMS PRINTSTR_P0
     271/      85 : 40 1B               	JUN CMD_LOOP
     272/      87 :                     	
     273/      87 :                     ;;;---------------------------------------------------------------------------
     274/      87 :                     ;;; SETBANKCHIP_P5
     275/      87 :                     ;;; Set #bank and #chip to R10 and R11
     276/      87 :                     ;;;---------------------------------------------------------------------------
     277/      87 :                     SETBANKCHIP_P5:
     278/      87 : 20 40               	FIM P0, lo(STR_BANK)	; print " BANK="
     279/      89 : 5E 00               	JMS PRINTSTR_P0
     280/      8B : 5D 00               	JMS GETCHAR_P1
     281/      8D : 5D 28               	JMS PUTCHAR_P1
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 9 - 2023/03/12 16:43:50


     282/      8F : 5D B7               	JMS CTOI_P1
     283/      91 : A3                  	LD R3
     284/      92 : BA                  	XCH R10			; save BANK to R10
     285/      93 :                     
     286/      93 : 20 47               	FIM P0, lo(STR_CHIP)	; print " CHIP="
     287/      95 : 5E 00               	JMS PRINTSTR_P0
     288/      97 : 5D 00               	JMS GETCHAR_P1
     289/      99 : 5D 28               	JMS PUTCHAR_P1
     290/      9B : 5D B7               	JMS CTOI_P1
     291/      9D : A3                  	LD R3		; R3 is #chip(x.x.D3.D2)
     292/      9E : F1                  	CLC
     293/      9F : F5                  	RAL
     294/      A0 : F1                  	CLC
     295/      A1 : F5                  	RAL
     296/      A2 : BB                  	XCH R11 	;set D3D2.00@X2 to R11 (0000 or 0100 or 1000 or 1100)
     297/      A3 : 5D 5C               	JMS PRINT_CRLF
     298/      A5 : C0                  	BBL 0
     299/      A6 :                     	
     300/      A6 :                     
     301/      A6 :                     ;;;----------------------------------------------------------------------------
     302/      A6 :                     ;;; ISHEX_P1
     303/      A6 :                     ;;; check P1 is a hex digit letter ('0' to '9') or ('a' to 'f') or ('A' to 'F')
     304/      A6 :                     ;;; return: ACC=0 if P1 is not a hex digit letter
     305/      A6 :                     ;;;         ACC=1 if P1 is a hex digit letter
     306/      A6 :                     ;;; destroy: P7
     307/      A6 :                     ;;;----------------------------------------------------------------------------
     308/      A6 :                     ISHEX_P1:
     309/      A6 : 2E 30               	FIM P7, '0'
     310/      A8 : 5D D0               	JMS CMP_P1P7
     311/      AA : 12 AD               	JCN C, ISHEX_L00
     312/      AC : C0                  	BBL 0			; P1<'0'
     313/      AD :                     ISHEX_L00:	
     314/      AD : 2E 3A               	FIM P7, '9'+1
     315/      AF : 5D D0               	JMS CMP_P1P7
     316/      B1 : 12 B4               	JCN C,  ISHEX_L1	; P1>='9'+1 then jump to next chance
     317/      B3 : C1                  	BBL 1			; '0'<=P1<='9'
     318/      B4 :                     ISHEX_L1:
     319/      B4 : 2E 41               	FIM P7, 'A'
     320/      B6 : 5D D0               	JMS CMP_P1P7
     321/      B8 : 12 BB               	JCN C, ISHEX_L10
     322/      BA : C0                  	BBL 0			; P1<'A'
     323/      BB :                     ISHEX_L10:
     324/      BB : 2E 47               	FIM P7, 'F'+1
     325/      BD : 5D D0               	JMS CMP_P1P7
     326/      BF : 12 C2               	JCN C,  ISHEX_L2	; P1>='F'+1 then jump to next chance
     327/      C1 : C1                  	BBL 1			; 'A'<=P1<='F'
     328/      C2 :                     ISHEX_L2:
     329/      C2 : 2E 61               	FIM P7, 'a'
     330/      C4 : 5D D0               	JMS CMP_P1P7
     331/      C6 : 12 C9               	JCN C, ISHEX_L20
     332/      C8 : C0                  	BBL 0			; P1<'a'
     333/      C9 :                     ISHEX_L20:	
     334/      C9 : 2E 67               	FIM P7, 'f'+1
     335/      CB : 5D D0               	JMS CMP_P1P7
     336/      CD : 12 D0               	JCN C, ISHEX_FALSE	; P1>='f'+1
     337/      CF : C1                  	BBL 1			; 'a'<=P1<= 'f'
     338/      D0 :                     ISHEX_FALSE:
     339/      D0 : C0                  	BBL 0
     340/      D1 :                     
     341/      D1 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 10 - 2023/03/12 16:43:50


     342/      D1 :                     ;;; Program for Very Very Tiny Language Interpreter
     343/      D1 :                     ;;;---------------------------------------------------------------------------
     344/     100 :                     	org 0100H
     345/     100 :                     
     346/     100 :                     ;;;---------------------------------------------------------------------------
     347/     100 :                     ;;; Error codes
     348/     100 :                     ;;;---------------------------------------------------------------------------
     349/     100 : =0H                  ERROR_NOERROR			equ 00H
     350/     100 : =0A0H                ERROR_PRINT_CANNOTPRINT		equ 0A0H
     351/     100 : =0B0H                ERROR_RETURN_P2_IS_00		equ 0B0H
     352/     100 : =0E0H                ERROR_EXEC_SYNTAX_ERROR		equ 0E0H
     353/     100 : =0E1H                ERROR_EVAL_UNEXPECTED_EOL	equ 0E1H
     354/     100 : =0E2H                ERROR_EVAL_UNKNOWNOPERATOR	equ 0E2H
     355/     100 : =0F0H                ERROR_FACTOR_NOTAFACTOR		equ 0F0H
     356/     100 :                     	
     357/     100 :                     ;;;---------------------------------------------------------------------------
     358/     100 :                     COMMAND_V:
     359/     100 :                     ;;; commented out for debug
     360/     100 : 20 54               	FIM P0, lo(STR_VTL_MESSAGE)
     361/     102 : 5E 00               	JMS PRINTSTR_P0
     362/     104 :                     
     363/     104 : 22 00               	FIM P1, ERROR_NOERROR
     364/     106 : 20 78               	FIM P0, REG8_ERROR
     365/     108 : 56 5F               	JMS LD_REG8P0_P1		; clear ERROR
     366/     10A : 20 7A               	FIM P0, REG8_ERROR2
     367/     10C : 56 5F               	JMS LD_REG8P0_P1		; clear ERROR
     368/     10E :                     
     369/     10E : 20 74               	FIM P0, REG16_PEND
     370/     110 : 24 01               	FIM P2, up(PM12_PROGRAM)
     371/     112 : 26 00               	FIM P3, lo(PM12_PROGRAM)
     372/     114 : 55 F9               	JMS LD_REG16P0_P2P3	; REG(PEND) = PM12_PROGRAM (&=256)
     373/     116 :                     	
     374/     116 :                     ;;;---------------------------------------------------------------------------
     375/     116 :                     ;;; Main Loop
     376/     116 :                     ;;;---------------------------------------------------------------------------
     377/     116 :                     VTL_START:
     378/     116 :                     	;; print REG(ERROR) if not zero
     379/     116 : 20 78               	FIM P0, REG8_ERROR
     380/     118 : 56 6A               	JMS LD_P1_REG8P0
     381/     11A : 5D F5               	JMS ISZEROORNOT_P1
     382/     11C : 14 58               	JCN Z, VTL_NOERROR
     383/     11E :                     
     384/     11E :                     	;; print error code
     385/     11E : 20 7C               	FIM P0, lo(STR_VTL_ERROR)
     386/     120 : 5E 00               	JMS PRINTSTR_P0		; print error message
     387/     122 : 58 B0               	JMS PRINTHEX_P1		; print error code
     388/     124 : 20 7A               	FIM P0, REG8_ERROR2
     389/     126 : 56 6A               	JMS LD_P1_REG8P0
     390/     128 : 58 B0               	JMS PRINTHEX_P1		; print error code 2
     391/     12A : 5D 53               	JMS PRINT_SPC
     392/     12C :                     	
     393/     12C :                     	;; print remainig buffer 
     394/     12C : 20 83               	FIM P0, lo(STR_VTL_BUF)
     395/     12E : 5E 00               	JMS PRINTSTR_P0
     396/     130 : 20 00               	FIM P0, REG16_INDEX
     397/     132 : 22 00               	FIM P1, REG16_INDEX
     398/     134 : 59 D9               	JMS PUSH_REG16P1
     399/     136 : 55 DA               	JMS DEC_REG16P0
     400/     138 : 57 EC               	JMS PRINTSTR_PM12REG16P0 ; print PM(REG(INDEX)-1) (for debug)
     401/     13A : 59 FC               	JMS POP_REG16P1		 ; print PM(REG(INDEX)) is enough?
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 11 - 2023/03/12 16:43:50


     402/     13C : 5D 5C               	JMS PRINT_CRLF
     403/     13E :                     
     404/     13E :                     	;; print error line number
     405/     13E : 22 6C               	FIM P1, REG16_LINENUM
     406/     140 : 55 B9               	JMS ISZEROORNOT_REG16P1
     407/     142 : 14 4E               	JCN Z, VTL_ERROR_NOLINENUM
     408/     144 : 20 8C               	FIM P0, lo(STR_VTL_ERRORLINENUM)
     409/     146 : 5E 00               	JMS PRINTSTR_P0
     410/     148 : 22 6C               	FIM P1, REG16_LINENUM
     411/     14A : 58 1D               	JMS PRINT_REG16P1
     412/     14C : 5D 5C               	JMS PRINT_CRLF
     413/     14E :                     	
     414/     14E :                     VTL_ERROR_NOLINENUM:
     415/     14E :                     	;; clear error registers
     416/     14E : 22 00               	FIM P1, ERROR_NOERROR
     417/     150 : 20 78               	FIM P0, REG8_ERROR
     418/     152 : 56 5F               	JMS LD_REG8P0_P1		; clear ERROR
     419/     154 : 20 7A               	FIM P0, REG8_ERROR2
     420/     156 : 56 5F               	JMS LD_REG8P0_P1		; clear ERROR
     421/     158 :                     	
     422/     158 :                     VTL_NOERROR:
     423/     158 :                     	;; if SP !=0 print it and reset (for debug)
     424/     158 : 2E FC               	FIM P7, REG16_STACKPOINTER
     425/     15A : 2F                  	SRC P7
     426/     15B : EC                  	RD0
     427/     15C : B2                  	XCH R2
     428/     15D : ED                  	RD1
     429/     15E : B3                  	XCH R3
     430/     15F : 5D F5               	JMS ISZEROORNOT_P1
     431/     161 : 14 6F               	JCN Z, VTL_OK
     432/     163 : 20 88               	FIM P0, lo(STR_VTL_SP)
     433/     165 : 5E 00               	JMS PRINTSTR_P0         ; print SP
     434/     167 : A2                  	LD R2
     435/     168 : 5D 48               	JMS PRINT_ACC
     436/     16A : A3                  	LD R3
     437/     16B : 5D 48               	JMS PRINT_ACC
     438/     16D :                     
     439/     16D :                     	;; RESET SP
     440/     16D : 59 39                	JMS INIT_STACKPOINTER	; reset stack pointer
     441/     16F :                     VTL_OK:	
     442/     16F : 20 75               	FIM P0, lo(STR_VTL_OK)
     443/     171 : 5E 00               	JMS PRINTSTR_P0
     444/     173 :                     
     445/     173 :                     ;;; LOOP entry for program input
     446/     173 :                     VTL_LOOP:
     447/     173 :                     	;; 	FIM P1, '%'
     448/     173 :                     	;; 	JMS PUTCHAR_P1		; put a prompt (for debug)
     449/     173 :                     
     450/     173 : 20 6C               	FIM P0, REG16_LINENUM	; clear linenumber counter
     451/     175 : 55 42               	JMS CLEAR_REG16P0
     452/     177 :                     
     453/     177 : 20 00               	FIM P0, REG16_INDEX
     454/     179 : 24 00               	FIM P2, up(PM12_LINEBUF)
     455/     17B : 26 00               	FIM P3, lo(PM12_LINEBUF)
     456/     17D : 55 F9               	JMS LD_REG16P0_P2P3	; REG(INDEX) = PM12_LNEBUF
     457/     17F :                     
     458/     17F : 5A 1D               	JMS GETLINE_PM12REG16P0
     459/     181 :                     	;; 	JMS SKIPSPACE_PM12REG16P0
     460/     181 :                     
     461/     181 : 59 06               	JMS LD_P1_PM12REG16P0	; P1=PM12(REG(INDEX)
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 12 - 2023/03/12 16:43:50


     462/     183 :                     
     463/     183 : 2E 2E               	FIM P7, '.'		; quit to the monitor program (for debug)
     464/     185 : 5D D0               	JMS CMP_P1P7
     465/     187 : 1C 8B               	JCN ZN, VTL_L0
     466/     189 : 40 1B               	JUN CMD_LOOP
     467/     18B :                     VTL_L0:
     468/     18B : 5D 8C               	JMS ISNUM_P1
     469/     18D : 14 91               	JCN Z, VTL_L1
     470/     18F : 41 A5               	JUN VTL_INSERT_PROGRAMLINE ; Top character is a number
     471/     191 :                     VTL_L1:	
     472/     191 : 20 6C               	FIM P0, REG16_LINENUM
     473/     193 : 24 00               	FIM P2, 00H
     474/     195 : 26 00               	FIM P3, 00H
     475/     197 : 55 F9               	JMS LD_REG16P0_P2P3	; REG(LINENUM)=0
     476/     199 :                     
     477/     199 : 20 70               	FIM P0, REG16_NEXTLINEPTR
     478/     19B : 24 0D               	FIM P2, up(PM12_MEMEND)
     479/     19D : 26 FF               	FIM P3, lo(PM12_MEMEND)
     480/     19F : 55 F9               	JMS LD_REG16P0_P2P3	; REG(NEXTLINEPTR)=MEMEND to exit after exec
     481/     1A1 :                     
     482/     1A1 : 20 00               	FIM P0, REG16_INDEX
     483/     1A3 : 42 72               	JUN VTL_RUN_SINGLE_LINE
     484/     1A5 :                     
     485/     1A5 :                     ;;;----------------------------------------------------------------------------
     486/     1A5 :                     ;;; VTL_INSERT_PROGRAMLINE
     487/     1A5 :                     ;;; Input program line to program area
     488/     1A5 :                     ;;;----------------------------------------------------------------------------
     489/     1A5 :                     VTL_INSERT_PROGRAMLINE:
     490/     1A5 :                     	;; 	include "stacktest.inc"
     491/     1A5 :                     	;; 	include "numbertest.inc"
     492/     1A5 :                     	;; FIM P0, REG16_INDEX  ; this can be omitted?
     493/     1A5 : 22 A0               	FIM P1, REG16_TMP
     494/     1A7 : 5A 64               	JMS GETNUMBER_PM12REG16P0_REG16P1
     495/     1A9 : 55 B9               	JMS ISZEROORNOT_REG16P1
     496/     1AB : 1C AF               	JCN ZN, INSERT_PROGRAM_L1
     497/     1AD : 42 14               	JUN PRINT_LIST
     498/     1AF :                     INSERT_PROGRAM_L1:
     499/     1AF : 55 CA               	JMS INC_REG16P0		; skip ' ' without check for symplification
     500/     1B1 :                     
     501/     1B1 : 56 23               	JMS LD_P2P3_REG16P1 
     502/     1B3 : 20 74               	FIM P0, REG16_PEND
     503/     1B5 : (MACRO)              	LD_P1_P3
     503/     1B5 : A6                                  LD R6
     503/     1B6 : B2                                  XCH R2
     503/     1B7 : A7                                  LD R7
     503/     1B8 : B3                                  XCH R3
     504/     1B9 : 59 21               	JMS LD_PM12REG16P0_P1	; PM12(REG(PEND)++) = P3 (lower byte)
     505/     1BB : 55 CA               	JMS INC_REG16P0
     506/     1BD : (MACRO)              	LD_P1_P2
     506/     1BD : A4                                  LD R4
     506/     1BE : B2                                  XCH R2
     506/     1BF : A5                                  LD R5
     506/     1C0 : B3                                  XCH R3
     507/     1C1 : 59 21               	JMS LD_PM12REG16P0_P1	; PM12(REG(PEND)++) = P2 (upper byte)
     508/     1C3 : 55 CA               	JMS INC_REG16P0
     509/     1C5 : (MACRO)              	LD_P1_P0
     509/     1C5 : A0                                  LD R0
     509/     1C6 : B2                                  XCH R2
     509/     1C7 : A1                                  LD R1
     509/     1C8 : B3                                  XCH R3
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 13 - 2023/03/12 16:43:50


     510/     1C9 : 59 D9               	JMS PUSH_REG16P1	; PUSH(REG(PEND)) to write a pointer
     511/     1CB :                     				; to the next line afterward
     512/     1CB : 55 CA               	JMS INC_REG16P0
     513/     1CD : 55 CA               	JMS INC_REG16P0		; PEND=PEND+2
     514/     1CF :                     	
     515/     1CF :                     INSERT_PROGRAM_LOOP:
     516/     1CF : 20 00               	FIM P0, REG16_INDEX
     517/     1D1 : 59 06               	JMS LD_P1_PM12REG16P0
     518/     1D3 : 5D F5               	JMS ISZEROORNOT_P1	; EOL
     519/     1D5 : 14 E1               	JCN Z, INSERT_PROGRAM_EXIT
     520/     1D7 : 55 CA               	JMS INC_REG16P0		; REG(INDEX)++
     521/     1D9 : 20 74               	FIM P0, REG16_PEND
     522/     1DB : 59 21               	JMS LD_PM12REG16P0_P1	; copy PM12(REG(INDEX)) to PM12(REG(PEND))
     523/     1DD : 55 CA               	JMS INC_REG16P0		; REG(PEND)++
     524/     1DF :                     	;; the end of memory check is omitted for simplicity
     525/     1DF : 41 CF               	JUN INSERT_PROGRAM_LOOP	;
     526/     1E1 :                     	
     527/     1E1 :                     INSERT_PROGRAM_EXIT:
     528/     1E1 : 20 74               	FIM P0, REG16_PEND
     529/     1E3 : 22 00               	FIM P1, 00H
     530/     1E5 : 59 21               	JMS LD_PM12REG16P0_P1	; write EOL and increment REG(PEND)
     531/     1E7 : 55 CA               	JMS INC_REG16P0
     532/     1E9 :                     
     533/     1E9 : 56 75               	JMS LD_P2P3_REG16P0	; P2P3=REG(PEND)
     534/     1EB : 22 A0               	FIM P1, REG16_TMP
     535/     1ED : 59 FC               	JMS POP_REG16P1		; pop the place to write the next line pointer
     536/     1EF : (MACRO)              	LD_P0_P1
     536/     1EF : A2                                  LD R2
     536/     1F0 : B0                                  XCH R0
     536/     1F1 : A3                                  LD R3
     536/     1F2 : B1                                  XCH R1
     537/     1F3 : (MACRO)              	LD_P1_P3
     537/     1F3 : A6                                  LD R6
     537/     1F4 : B2                                  XCH R2
     537/     1F5 : A7                                  LD R7
     537/     1F6 : B3                                  XCH R3
     538/     1F7 : 59 21               	JMS LD_PM12REG16P0_P1
     539/     1F9 : 55 CA               	JMS INC_REG16P0
     540/     1FB : (MACRO)              	LD_P1_P2
     540/     1FB : A4                                  LD R4
     540/     1FC : B2                                  XCH R2
     540/     1FD : A5                                  LD R5
     540/     1FE : B3                                  XCH R3
     541/     1FF : 59 21               	JMS LD_PM12REG16P0_P1
     542/     201 :                     	
     543/     201 : 41 73               	JUN VTL_LOOP
     544/     203 :                     ;;; 	JUN CMD_LOOP		;; return to command loop (for debug)
     545/     203 :                     
     546/     203 :                     ;;;----------------------------------------------------------------------------
     547/     203 :                     ;;; LD_P2P3_PM12REG16P0_AND_INCREMENT
     548/     203 :                     ;;; Get 16bit from PM
     549/     203 :                     ;;; P3=PM(REG(P0)++)
     550/     203 :                     ;;; P2=PM(REG(P0)++)
     551/     203 :                     ;;; destroy: P1
     552/     203 :                     ;;;----------------------------------------------------------------------------
     553/     203 :                     LD_P2P3_PM12REG16P0_AND_INCREMENT:
     554/     203 : 59 06               	JMS LD_P1_PM12REG16P0
     555/     205 : 55 CA               	JMS INC_REG16P0
     556/     207 : (MACRO)              	LD_P3_P1
     556/     207 : A2                                  LD R2
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 14 - 2023/03/12 16:43:50


     556/     208 : B6                                  XCH R6
     556/     209 : A3                                  LD R3
     556/     20A : B7                                  XCH R7
     557/     20B : 59 06               	JMS LD_P1_PM12REG16P0
     558/     20D : 55 CA               	JMS INC_REG16P0
     559/     20F : (MACRO)              	LD_P2_P1
     559/     20F : A2                                  LD R2
     559/     210 : B4                                  XCH R4
     559/     211 : A3                                  LD R3
     559/     212 : B5                                  XCH R5
     560/     213 : C0                  	BBL 0
     561/     214 :                     	
     562/     214 :                     ;;;----------------------------------------------------------------------------
     563/     214 :                     ;;; PRINT_LIST:
     564/     214 :                     ;;; Print program list
     565/     214 :                     ;;;----------------------------------------------------------------------------
     566/     214 :                     PRINT_LIST:
     567/     214 : 20 00               	FIM P0, REG16_INDEX
     568/     216 : 24 01               	FIM P2, up(PM12_PROGRAM)
     569/     218 : 26 00               	FIM P3, lo(PM12_PROGRAM)
     570/     21A : 55 F9               	JMS LD_REG16P0_P2P3	; REG(INDEX) = PM12_PROGRAM
     571/     21C :                     
     572/     21C :                     PRINT_LIST_LOOP:
     573/     21C : 22 74               	FIM P1, REG16_PEND
     574/     21E : 57 C8               	JMS CMP_REG16P0_REG16P1
     575/     220 : 1A 24               	JCN CN, PRINT_LIST_PRINTLINE
     576/     222 : 41 16               	JUN VTL_START		; exit to VTL_START
     577/     224 :                     PRINT_LIST_PRINTLINE
     578/     224 :                     	;; Get line number
     579/     224 : 52 03               	JMS LD_P2P3_PM12REG16P0_AND_INCREMENT
     580/     226 : 22 6C               	FIM P1, REG16_LINENUM
     581/     228 : 56 0E               	JMS LD_REG16P1_P2P3
     582/     22A :                     
     583/     22A : 58 1D               	JMS PRINT_REG16P1
     584/     22C : 5D 53               	JMS PRINT_SPC
     585/     22E :                     	
     586/     22E : 55 CA               	JMS INC_REG16P0 	; skip pointer to next line
     587/     230 : 55 CA               	JMS INC_REG16P0
     588/     232 :                     
     589/     232 : 57 EC               	JMS PRINTSTR_PM12REG16P0
     590/     234 : 5D 5C               	JMS PRINT_CRLF
     591/     236 : 55 CA               	JMS INC_REG16P0		; increment pointer to the next char of EOL
     592/     238 : 42 1C               	JUN PRINT_LIST_LOOP
     593/     23A :                     
     594/     23A :                     ;;;----------------------------------------------------------------------------
     595/     23A :                     ;;; FIND_LINE_AND_EXEC
     596/     23A :                     ;;; Search for the linenumber REG(LINENUM) and find the pointer of the line
     597/     23A :                     ;;; to be executed (minimum linenumber >= REG(LINENUM))
     598/     23A :                     ;;; in the PM(PROGRAM) and set REG(LINENUM) to the found linenumber
     599/     23A :                     ;;; and execute it
     600/     23A :                     ;;;----------------------------------------------------------------------------
     601/     23A :                     FIND_LINE_AND_EXEC:
     602/     23A : 20 00               	FIM P0, REG16_INDEX
     603/     23C : 24 01               	FIM P2, up(PM12_PROGRAM)
     604/     23E : 26 00               	FIM P3, lo(PM12_PROGRAM)
     605/     240 : 55 F9               	JMS LD_REG16P0_P2P3	; REG(INDEX) = PM12_PROGRAM
     606/     242 :                     
     607/     242 :                     FIND_LINE_LOOP:
     608/     242 : 52 03               	JMS LD_P2P3_PM12REG16P0_AND_INCREMENT ; P2P3= line number
     609/     244 : 20 A0               	FIM P0, REG16_TMP
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 15 - 2023/03/12 16:43:50


     610/     246 : 55 F9               	JMS LD_REG16P0_P2P3		; REG(TMP) = current line number
     611/     248 :                     
     612/     248 : 22 6C               	FIM P1, REG16_LINENUM
     613/     24A : 57 C8               	JMS CMP_REG16P0_REG16P1
     614/     24C : 12 5C                	JCN C, FIND_LINE_AND_EXEC_GO	; REG(TMP) >= REG(LINENUM) then exec
     615/     24E :                     	
     616/     24E : 20 00               	FIM P0, REG16_INDEX
     617/     250 : 52 03               	JMS LD_P2P3_PM12REG16P0_AND_INCREMENT ; P2P3= next line pointer
     618/     252 : 22 74               	FIM P1, REG16_PEND
     619/     254 : 55 F9               	JMS LD_REG16P0_P2P3	; REG(INDEX) = next line pointer
     620/     256 : 57 C8               	JMS CMP_REG16P0_REG16P1
     621/     258 : 12 60               	JCN C, FIND_LINE_AND_EXEC_EXIT	; REG(INDEX)>=REG(PEND)
     622/     25A : 42 42               	JUN FIND_LINE_LOOP
     623/     25C :                     	
     624/     25C :                     FIND_LINE_AND_EXEC_GO:
     625/     25C : 55 62               	JMS LD_REG16P1_REG16P0	; REG(LINENUM) = real linenum
     626/     25E : 42 6A               	JUN VTL_RUN_PROGRAM_PMINDEX_FROM_GOTO ; 
     627/     260 :                     	
     628/     260 :                     FIND_LINE_AND_EXEC_EXIT:
     629/     260 : 41 16               	JUN VTL_START		; reach the end of the program
     630/     262 :                     	
     631/     262 :                     ;;;----------------------------------------------------------------------------
     632/     262 :                     ;;; VTL_RUN_PROGRAM_PMINDEX:
     633/     262 :                     ;;; Run the program buffer
     634/     262 :                     ;;; one line is:
     635/     262 :                     ;;; 	2 byte: linenumber
     636/     262 :                     ;;; 	2 byte: PTR to next line
     637/     262 :                     ;;; 	   x  : program code
     638/     262 :                     ;;; 	1 byte: 00H (EOL)
     639/     262 :                     ;;; if REG(NEXTLINEPTR)==0 or REG(NEXTLINEPTR)>=REG(PEND) then back to prompt
     640/     262 :                     ;;;----------------------------------------------------------------------------
     641/     262 :                     VTL_RUN_PROGRAM_PMINDEX:
     642/     262 : 20 00               	FIM P0, REG16_INDEX
     643/     264 : 52 03               	JMS LD_P2P3_PM12REG16P0_AND_INCREMENT ; P2P3= line number
     644/     266 : 20 6C               	FIM P0, REG16_LINENUM
     645/     268 : 55 F9               	JMS LD_REG16P0_P2P3		; REG(LINENUM) = current line number
     646/     26A :                     VTL_RUN_PROGRAM_PMINDEX_FROM_GOTO:
     647/     26A : 20 00               	FIM P0, REG16_INDEX
     648/     26C : 52 03               	JMS LD_P2P3_PM12REG16P0_AND_INCREMENT 
     649/     26E : 20 70               	FIM P0, REG16_NEXTLINEPTR
     650/     270 : 55 F9               	JMS LD_REG16P0_P2P3             ; P2P3= next line pointer
     651/     272 :                     
     652/     272 :                     VTL_RUN_SINGLE_LINE:
     653/     272 : 42 86               	JUN VTL_EXECUTE_PMINDEX
     654/     274 :                     
     655/     274 :                     VTL_RUN_SINGLE_LINE_RETURN:
     656/     274 : 20 74               	FIM P0, REG16_PEND
     657/     276 : 22 70               	FIM P1, REG16_NEXTLINEPTR
     658/     278 : 57 C8               	JMS CMP_REG16P0_REG16P1
     659/     27A : 1A 84               	JCN CN, VTL_RUN_PROGRAM_EXIT	; REG(PEND) < REG(NEXTLINEPTR)
     660/     27C : 14 84               	JCN  Z, VTL_RUN_PROGRAM_EXIT	; REG(PEND) == REG(NEXTLINEPTR)
     661/     27E : 20 00               	FIM P0, REG16_INDEX
     662/     280 : 55 4F               	JMS LD_REG16P0_REG16P1		; REG(INDEX) = REG(NEXTLINEPTR)
     663/     282 : 42 62               	JUN VTL_RUN_PROGRAM_PMINDEX
     664/     284 :                     VTL_RUN_PROGRAM_EXIT:
     665/     284 : 41 16               	JUN VTL_START		; exit to VTL_START
     666/     286 :                     	
     667/     286 :                     ;;;----------------------------------------------------------------------------
     668/     286 :                     ;;; VTL_EXECUTE_PMINDEX
     669/     286 :                     ;;; Execute a string PM12(REG(INDEX))
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 16 - 2023/03/12 16:43:50


     670/     286 :                     ;;; destroy: P0, P1
     671/     286 :                     ;;;----------------------------------------------------------------------------
     672/     286 :                     VTL_EXECUTE_PMINDEX:
     673/     286 :                     	;; if some initialization is needed, write here
     674/     286 :                     VTL_EXECUTE_PMINDEX_CONTINUE:
     675/     286 : 20 00               	FIM P0, REG16_INDEX
     676/     288 :                     
     677/     288 : 55 1C               	JMS SKIPSPACE_PM12REG16P0 ; skip spaces ' '
     678/     28A : 59 06               	JMS LD_P1_PM12REG16P0	  ; get the left term
     679/     28C : 5D F5               	JMS ISZEROORNOT_P1
     680/     28E : 1C 92               	JCN ZN, VTL_EXEC_L0
     681/     290 : 42 74               	JUN VTL_RUN_SINGLE_LINE_RETURN ; return to the run loop
     682/     292 :                     
     683/     292 :                     VTL_EXEC_L0:	
     684/     292 : 55 CA               	JMS INC_REG16P0		; REG16P0++
     685/     294 :                     
     686/     294 :                     	;;  Print
     687/     294 : 2E 3F               	FIM P7, '?'
     688/     296 : 5D D0               	JMS CMP_P1P7
     689/     298 : 14 9C               	JCN Z, VTL_SET_PRINTFMT	; go to check print format
     690/     29A : 42 BD               	JUN VTL_EXEC_L1
     691/     29C :                     VTL_SET_PRINTFMT:
     692/     29C :                     	;; check the next char to '?' and set print format
     693/     29C : 59 06               	JMS LD_P1_PM12REG16P0  ; check printformat "?=" or "?$=" or "??="
     694/     29E :                     
     695/     29E : 2E 24               	FIM P7, '$'
     696/     2A0 : 5D D0               	JMS CMP_P1P7
     697/     2A2 : 1C AB               	JCN NZ, VTL_EXEC_L0_CHECKHEX4;
     698/     2A4 : 55 CA               	JMS INC_REG16P0		; REG16P0++ for '$'
     699/     2A6 :                     
     700/     2A6 : D1                  	LDM PRINTFMT_HEX2B
     701/     2A7 : 53 39               	JMS SET_PRINTFORMAT
     702/     2A9 :                     	
     703/     2A9 : 43 44               	JUN VTL_EXEC_PRINT
     704/     2AB :                     
     705/     2AB :                     VTL_EXEC_L0_CHECKHEX4:
     706/     2AB : 2E 3F               	FIM P7, '?'
     707/     2AD : 5D D0               	JMS CMP_P1P7
     708/     2AF : 1C B8               	JCN NZ, VTL_EXEC_L0_NORMAL
     709/     2B1 : 55 CA               	JMS INC_REG16P0		; REG16P0++ for '?'
     710/     2B3 :                     
     711/     2B3 : D2                  	LDM PRINTFMT_HEX4B
     712/     2B4 : 53 39               	JMS SET_PRINTFORMAT
     713/     2B6 :                     
     714/     2B6 : 43 44               	JUN VTL_EXEC_PRINT
     715/     2B8 :                     
     716/     2B8 :                     VTL_EXEC_L0_NORMAL
     717/     2B8 :                     	;; normally it's "?=" but not check "=" for simplification
     718/     2B8 : D0                  	LDM PRINTFMT_NORMAL
     719/     2B9 : 53 39               	JMS SET_PRINTFORMAT
     720/     2BB :                     
     721/     2BB : 43 44               	JUN VTL_EXEC_PRINT
     722/     2BD :                     
     723/     2BD :                     	;; "left term = right expression" type procedures
     724/     2BD :                     VTL_EXEC_L1:
     725/     2BD : 55 CA               	JMS INC_REG16P0		; SKIP '=' without check for symplification
     726/     2BF : 59 5B               	JMS PUSH_P1		; push the left term
     727/     2C1 :                     
     728/     2C1 :                     	;; Evaluate the right expression
     729/     2C1 : 22 8C               	FIM P1, REG16_EVAL
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 17 - 2023/03/12 16:43:50


     730/     2C3 : 24 DD               	FIM P2, lo(RETURN_EXEC_R1)
     731/     2C5 : 43 94               	JUN EVAL_EXPRESSION_PMINDEX_REG16P1
     732/     2C7 :                     
     733/     2C7 :                     EXEC_R1:
     734/     2C7 : 24 8C               	FIM P2, REG16_EVAL	; set P2 to the evaluated result value
     735/     2C9 : 59 A5               	JMS POP_P1		; pop the left term
     736/     2CB :                     
     737/     2CB :                     	;; Assignment to the normal variable
     738/     2CB : 5D 9A               	JMS ISALPHA_P1
     739/     2CD : 14 D5               	JCN Z, VTL_EXEC_L2
     740/     2CF : 55 2D               	JMS CTOREG16NUM_P1	; convert the name to the register address
     741/     2D1 : 55 75               	JMS LD_REG16P1_REG16P2
     742/     2D3 : 42 86               	JUN VTL_EXECUTE_PMINDEX_CONTINUE ; execute remaining string
     743/     2D5 :                     
     744/     2D5 :                     VTL_EXEC_L2:
     745/     2D5 :                     	;; IF
     746/     2D5 : 2E 3B               	FIM P7, ';'
     747/     2D7 : 5D D0               	JMS CMP_P1P7
     748/     2D9 : 1C E5               	JCN ZN, VTL_EXEC_L3
     749/     2DB : 22 8C               	FIM P1, REG16_EVAL
     750/     2DD : 55 B9               	JMS ISZEROORNOT_REG16P1
     751/     2DF : 1C E3               	JCN ZN, VTL_EXEC_L2_TRUE
     752/     2E1 : 42 74               	JUN VTL_RUN_SINGLE_LINE_RETURN ; return to the run loop
     753/     2E3 :                     VTL_EXEC_L2_TRUE:
     754/     2E3 : 42 86               	JUN VTL_EXECUTE_PMINDEX_CONTINUE ; execute remaining string
     755/     2E5 :                     
     756/     2E5 :                     VTL_EXEC_L3:
     757/     2E5 :                     	;; GOTO
     758/     2E5 : 2E 23               	FIM P7, '#'
     759/     2E7 : 5D D0               	JMS CMP_P1P7
     760/     2E9 : 1C F9               	JCN ZN, VTL_EXEC_L4
     761/     2EB :                     VTL_EXEC_GOTO_FROM_GOSUB:
     762/     2EB : 22 8C               	FIM P1, REG16_EVAL
     763/     2ED : 55 B9               	JMS ISZEROORNOT_REG16P1
     764/     2EF : 14 F7               	JCN Z, VTL_EXEC_SKIPGOTO
     765/     2F1 : 22 6C               	FIM P1, REG16_LINENUM	         ; execute GOTO
     766/     2F3 : 55 75               	JMS LD_REG16P1_REG16P2
     767/     2F5 : 42 3A               	JUN FIND_LINE_AND_EXEC
     768/     2F7 :                     VTL_EXEC_SKIPGOTO:			 ; #=0 then do nothing
     769/     2F7 : 42 86               	JUN VTL_EXECUTE_PMINDEX_CONTINUE ; execute remaining string
     770/     2F9 :                     
     771/     2F9 :                     VTL_EXEC_L4:
     772/     2F9 :                     	;; GOSUB
     773/     2F9 : 2E 21               	FIM P7, '!'
     774/     2FB : 5D D0               	JMS CMP_P1P7
     775/     2FD : 00                  	NOP
     776/     2FE : 00                  	NOP
     777/     2FF : 00                  	NOP
     778/     300 : 00                  	NOP
     779/     301 : 14 05               	JCN Z, VTL_EXEC_GOSUB
     780/     303 : 43 11               	JUN VTL_EXEC_L5
     781/     305 :                     VTL_EXEC_GOSUB:
     782/     305 : 20 94               	FIM P0, REG16_RETURN
     783/     307 : 22 6C               	FIM P1, REG16_LINENUM
     784/     309 : 55 4F               	JMS LD_REG16P0_REG16P1
     785/     30B : 55 CA               	JMS INC_REG16P0		        ; REG(!)=REG(#)+1
     786/     30D : 20 00               	FIM P0, REG16_INDEX
     787/     30F :                     	
     788/     30F : 42 EB               	JUN VTL_EXEC_GOTO_FROM_GOSUB     ; jump to GOTO
     789/     311 :                     	
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 18 - 2023/03/12 16:43:50


     790/     311 :                     VTL_EXEC_L5:
     791/     311 :                     	;; &
     792/     311 : 2E 26               	FIM P7, '&'
     793/     313 : 5D D0               	JMS CMP_P1P7
     794/     315 : 1C 1D               	JCN ZN, VTL_EXEC_L6
     795/     317 : 22 74               	FIM P1, REG16_PEND
     796/     319 : 55 75               	JMS LD_REG16P1_REG16P2
     797/     31B : 42 86               	JUN VTL_EXECUTE_PMINDEX_CONTINUE ; execute remaining string
     798/     31D :                     VTL_EXEC_L6:
     799/     31D :                     	;; Putchar
     800/     31D : 2E 24               	FIM P7, '$'
     801/     31F : 5D D0               	JMS CMP_P1P7
     802/     321 : 1C 2D               	JCN ZN, VTL_EXEC_L7
     803/     323 : (MACRO)              	LD_P0_P2
     803/     323 : A4                                  LD R4
     803/     324 : B0                                  XCH R0
     803/     325 : A5                                  LD R5
     803/     326 : B1                                  XCH R1
     804/     327 : 56 6A               	JMS LD_P1_REG16P0_8BIT
     805/     329 : 5D 28               	JMS PUTCHAR_P1
     806/     32B : 42 86               	JUN VTL_EXECUTE_PMINDEX_CONTINUE ; execute remaining string
     807/     32D :                     VTL_EXEC_L7:
     808/     32D :                     VTL_EXEC_L8:
     809/     32D :                     VTL_EXEC_L9:
     810/     32D :                     VTL_EXEC_L10:
     811/     32D :                     VTL_EXEC_SYNTAX_ERROR:
     812/     32D : 20 7A               	FIM P0, REG8_ERROR2
     813/     32F : 56 5F               	JMS LD_REG8P0_P1
     814/     331 : 20 78               	FIM P0, REG8_ERROR
     815/     333 : 22 E0               	FIM P1, ERROR_EXEC_SYNTAX_ERROR
     816/     335 : 56 5F               	JMS LD_REG8P0_P1
     817/     337 :                     
     818/     337 : 41 16               	JUN VTL_START
     819/     339 :                     
     820/     339 :                     ;;;----------------------------------------------------------------------------
     821/     339 :                     ;;; SET_PRINTFORMAT
     822/     339 :                     ;;; REG4(PRINTFORMAT) = ACC
     823/     339 :                     ;;;----------------------------------------------------------------------------
     824/     339 : =0H                  PRINTFMT_NORMAL		equ 00H
     825/     339 : =1H                  PRINTFMT_HEX2B		equ 01H
     826/     339 : =2H                  PRINTFMT_HEX4B		equ 02H
     827/     339 :                     
     828/     339 :                     SET_PRINTFORMAT:	
     829/     339 : 2E 7E               	FIM P7, REG4_PRINTFORMAT
     830/     33B : 2F                  	SRC P7
     831/     33C : E0                  	WRM
     832/     33D : C0                  	BBL 0
     833/     33E :                     
     834/     33E :                     GET_PRINTFORMAT_R5:
     835/     33E : 2E 7E               	FIM P7, REG4_PRINTFORMAT
     836/     340 : 2F                  	SRC P7
     837/     341 : E9                  	RDM
     838/     342 : B5                  	XCH R5
     839/     343 : C0                  	BBL 0
     840/     344 :                     ;;;----------------------------------------------------------------------------
     841/     344 :                     ;;; VTL_EXEC_PRINT
     842/     344 :                     ;;;----------------------------------------------------------------------------
     843/     344 :                     VTL_EXEC_PRINT:
     844/     344 : 55 CA               	JMS INC_REG16P0		; SKIP '=' without check for symplification
     845/     346 :                     
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 19 - 2023/03/12 16:43:50


     846/     346 : 59 06               	JMS LD_P1_PM12REG16P0
     847/     348 : 5D F5               	JMS ISZEROORNOT_P1
     848/     34A : 1C 4E               	JCN ZN, VTL_EXEC_PRINT_L1	; not EOL
     849/     34C : 43 8C               	JUN VTL_PRINT_ERREXIT   	; EOL
     850/     34E :                     VTL_EXEC_PRINT_L1:
     851/     34E : 2E 22               	FIM P7, '"'		; "
     852/     350 : 5D D0               	JMS CMP_P1P7
     853/     352 : 1C 56               	JCN ZN, VTL_PRINT_L2
     854/     354 : 43 78               	JUN VTL_PRINT_QUOTEDSTRING
     855/     356 :                     VTL_PRINT_L2:	
     856/     356 : 22 8C               	FIM P1, REG16_EVAL
     857/     358 : 24 E7               	FIM P2, lo(RETURN_PRINT_R1)
     858/     35A : 43 94               	JUN EVAL_EXPRESSION_PMINDEX_REG16P1
     859/     35C :                     PRINT_R1:
     860/     35C : 53 3E               	JMS GET_PRINTFORMAT_R5
     861/     35E : F0                  	CLB
     862/     35F : D1                  	LDM PRINTFMT_HEX2B
     863/     360 : 95                  	SUB R5
     864/     361 : 1C 6B               	JCN NZ, VTL_PRINT_FMT2
     865/     363 : 20 8C               	FIM P0, REG16_EVAL		; restore P0 afterwards if needed
     866/     365 : 56 6A               	JMS LD_P1_REG16P0_8BIT
     867/     367 : 58 B0               	JMS PRINTHEX_P1
     868/     369 : 43 92               	JUN VTL_PRINT_EXIT
     869/     36B :                     VTL_PRINT_FMT2:
     870/     36B : F0                  	CLB
     871/     36C : D2                  	LDM PRINTFMT_HEX4B
     872/     36D : 95                  	SUB R5
     873/     36E : 1C 74               	JCN NZ, VTL_PRINT_DEFAULT
     874/     370 : 58 8D               	JMS PRINTHEX_REG16P1
     875/     372 : 43 92               	JUN VTL_PRINT_EXIT
     876/     374 :                     
     877/     374 :                     VTL_PRINT_DEFAULT:
     878/     374 : 58 1D               	JMS PRINT_REG16P1
     879/     376 : 43 92               	JUN VTL_PRINT_EXIT
     880/     378 :                     
     881/     378 :                     VTL_PRINT_QUOTEDSTRING:
     882/     378 : 55 CA               	JMS INC_REG16P0		; INDEX++
     883/     37A : 57 F4               	JMS PRINTSTR_PM12REG16P0_DELIM_P1
     884/     37C : 59 06               	JMS LD_P1_PM12REG16P0
     885/     37E : 2E 3B               	FIM P7, ';'
     886/     380 : 5D D0               	JMS CMP_P1P7
     887/     382 : 14 88               	JCN Z, VTL_PRINT_SKIPCRLF	; skip CRLF and increment INDEX
     888/     384 : 5D 5C               	JMS PRINT_CRLF
     889/     386 : 43 92               	JUN VTL_PRINT_EXIT
     890/     388 :                     VTL_PRINT_SKIPCRLF:	
     891/     388 : 55 CA               	JMS INC_REG16P0
     892/     38A : 43 92               	JUN VTL_PRINT_EXIT
     893/     38C :                     
     894/     38C :                     VTL_PRINT_ERREXIT:
     895/     38C : 20 78               	FIM P0, REG8_ERROR
     896/     38E : 22 A0               	FIM P1, ERROR_PRINT_CANNOTPRINT
     897/     390 : 41 16               	JUN VTL_START			 ; error and jump to start
     898/     392 :                     	
     899/     392 :                     VTL_PRINT_EXIT:
     900/     392 : 42 86               	JUN VTL_EXECUTE_PMINDEX_CONTINUE ; execute remaining string
     901/     394 :                     
     902/     394 :                     ;;;----------------------------------------------------------------------------
     903/     394 :                     ;;; EVAL_EXPRESSION_PMINDEX_REG16P1
     904/     394 :                     ;;; Evaluate expression PM(REG(INDEX)) and set result to REG(P1)
     905/     394 :                     ;;; destory: P0, P6, P7
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 20 - 2023/03/12 16:43:50


     906/     394 :                     ;;; return: P0=REG16_INDEX, REG(P1)=result
     907/     394 :                     ;;; REG16(INDEX) is incremented to the end of expression +1, (EOL if EOL)
     908/     394 :                     ;;;----------------------------------------------------------------------------
     909/     394 :                     EVAL_EXPRESSION_PMINDEX_REG16P1:
     910/     394 : 59 73               	JMS PUSH_P2		; PUSH a return label
     911/     396 : 59 5B               	JMS PUSH_P1
     912/     398 :                     
     913/     398 : 20 00               	FIM P0, REG16_INDEX
     914/     39A : 59 06               	JMS LD_P1_PM12REG16P0
     915/     39C : 5D F5               	JMS ISZEROORNOT_P1	; check EOL
     916/     39E : 1C A8               	JCN ZN, EVAL_START
     917/     3A0 :                     	;; EOL and EXIT
     918/     3A0 :                     	;; Do nothing, and REG(EVAL) does not change.
     919/     3A0 : 20 78               	FIM P0, REG8_ERROR
     920/     3A2 : 22 E1               	FIM P1, ERROR_EVAL_UNEXPECTED_EOL
     921/     3A4 : 56 5F               	JMS LD_REG8P0_P1
     922/     3A6 : 41 16               	JUN VTL_START		; error and jump to VTL_START
     923/     3A8 :                     	;; 	FIM P0, REG16_INDEX	; restore P0 to INDEX
     924/     3A8 :                     	;; 	JMS POP_P1
     925/     3A8 :                     	;; 	JMS POP_P2
     926/     3A8 :                     	;; 	JUN RETURN_P2
     927/     3A8 :                     
     928/     3A8 :                     EVAL_START:	
     929/     3A8 :                     	;; get a factor and push it
     930/     3A8 : 22 80               	FIM P1, REG16_LVALUE
     931/     3AA : 24 DF               	FIM P2, lo(RETURN_EVAL_R1)
     932/     3AC : 44 50               	JUN GETFACTOR_PMINDEX_REG16P1
     933/     3AE :                     EVAL_R1:	
     934/     3AE :                     EVAL_CONTINUE:
     935/     3AE : 20 00               	FIM P0, REG16_INDEX
     936/     3B0 : 22 80               	FIM P1, REG16_LVALUE
     937/     3B2 : 59 D9               	JMS PUSH_REG16P1		; push the LVALUE
     938/     3B4 : 59 06               	JMS LD_P1_PM12REG16P0		; get an operator
     939/     3B6 :                     
     940/     3B6 : 5D F5               	JMS ISZEROORNOT_P1		; no operator and EOL, then exit
     941/     3B8 : 1C BC               	JCN ZN, EVAL_NEXT1
     942/     3BA : 44 40               	JUN EVAL_EXIT
     943/     3BC :                     EVAL_NEXT1:
     944/     3BC : 55 CA               	JMS INC_REG16P0			; increment INDEX if not EOL
     945/     3BE :                     
     946/     3BE : 2E 29               	FIM P7, ')'
     947/     3C0 : 5D D0               	JMS CMP_P1P7
     948/     3C2 : 1C C6               	JCN ZN, EVAL_NEXT2		; if ')', then exit
     949/     3C4 : 44 40               	JUN EVAL_EXIT
     950/     3C6 :                     EVAL_NEXT2:
     951/     3C6 : 2E 20               	FIM P7, ' '
     952/     3C8 : 5D D0               	JMS CMP_P1P7
     953/     3CA : 1C CE               	JCN ZN, EVAL_NEXT3		; if ' ', then exit
     954/     3CC : 44 40               	JUN EVAL_EXIT
     955/     3CE :                     EVAL_NEXT3:
     956/     3CE :                     
     957/     3CE : 59 5B               	JMS PUSH_P1			; push the operator
     958/     3D0 :                     
     959/     3D0 : 22 84               	FIM P1, REG16_RVALUE
     960/     3D2 : 24 E1               	FIM P2, lo(RETURN_EVAL_R2)
     961/     3D4 : 44 50               	JUN GETFACTOR_PMINDEX_REG16P1   ; get RVALUE
     962/     3D6 :                     EVAL_R2:	
     963/     3D6 : 59 BF               	JMS POP_P2			; pop the operator to P2
     964/     3D8 :                     
     965/     3D8 : 22 80               	FIM P1, REG16_LVALUE
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 21 - 2023/03/12 16:43:50


     966/     3DA : 59 FC               	JMS POP_REG16P1		        ; pop the LVALUE
     967/     3DC :                     
     968/     3DC :                     ;;; 
     969/     3DC : 20 80               	FIM P0, REG16_LVALUE		; set P0 = REG_LVALUE
     970/     3DE : 22 84               	FIM P1, REG16_RVALUE		; set P1 = REG_RVALUE
     971/     3E0 :                     ;;; 
     972/     3E0 :                     ;;;  execute operator calculation
     973/     3E0 :                     ;;; 
     974/     3E0 : 2E 2B               	FIM P7, '+'
     975/     3E2 : 5D E9               	JMS CMPEQ_P2P7
     976/     3E4 : 1C EA               	JCN ZN, EVAL_O1
     977/     3E6 : 56 C0               	JMS ADD_REG16P0_REG16P1
     978/     3E8 : 43 AE               	JUN EVAL_CONTINUE
     979/     3EA :                     EVAL_O1:
     980/     3EA : 2E 2D               	FIM P7, '-'
     981/     3EC : 5D E9               	JMS CMPEQ_P2P7
     982/     3EE : 1C F4               	JCN ZN, EVAL_O2
     983/     3F0 : 56 D5               	JMS SUB_REG16P0_REG16P1
     984/     3F2 : 43 AE               	JUN EVAL_CONTINUE
     985/     3F4 :                     EVAL_O2:
     986/     3F4 : 2E 2A               	FIM P7, '*'
     987/     3F6 : 5D E9               	JMS CMPEQ_P2P7
     988/     3F8 : 1C FE               	JCN ZN, EVAL_O3
     989/     3FA : 56 FE               	JMS MUL_REG16P0_REG16P1
     990/     3FC : 43 AE               	JUN EVAL_CONTINUE
     991/     3FE :                     EVAL_O3:
     992/     3FE : 2E 2F               	FIM P7, '/'
     993/     400 : 5D E9               	JMS CMPEQ_P2P7
     994/     402 : 00                  	NOP
     995/     403 : 00                  	NOP
     996/     404 : 1C 0A               	JCN ZN, EVAL_O4
     997/     406 : 57 21               	JMS DIV_REG16P0_REG16P1
     998/     408 : 43 AE               	JUN EVAL_CONTINUE
     999/     40A :                     EVAL_O4:
    1000/     40A : 2E 3D               	FIM P7, '='
    1001/     40C : 5D E9               	JMS CMPEQ_P2P7
    1002/     40E : 1C 1E               	JCN ZN, EVAL_O5
    1003/     410 : 57 C8               	JMS CMP_REG16P0_REG16P1
    1004/     412 : 14 18               	JCN Z, EVAL_LVALUE_TRUE ; jump if REG(P0)==REG(P1)
    1005/     414 :                     EVAL_LVALUE_FALSE:	
    1006/     414 : 55 42               	JMS CLEAR_REG16P0	; set LVALUE=0
    1007/     416 : 43 AE               	JUN EVAL_CONTINUE
    1008/     418 :                     EVAL_LVALUE_TRUE:	
    1009/     418 : 22 01               	FIM P1, 1
    1010/     41A : 56 38               	JMS LD_REG16P0_8BIT_P1	; set LVALUE=1
    1011/     41C : 43 AE               	JUN EVAL_CONTINUE
    1012/     41E :                     EVAL_O5:
    1013/     41E : 2E 3C               	FIM P7, '<'
    1014/     420 : 5D E9               	JMS CMPEQ_P2P7
    1015/     422 : 1C 2A               	JCN ZN, EVAL_06
    1016/     424 : 57 C8               	JMS CMP_REG16P0_REG16P1
    1017/     426 : 1A 18               	JCN CN, EVAL_LVALUE_TRUE  ; jump if REG(P0) < REG(P1)
    1018/     428 : 44 14               	JUN EVAL_LVALUE_FALSE
    1019/     42A :                     EVAL_06:
    1020/     42A : 2E 3E               	FIM P7, '>'
    1021/     42C : 5D E9               	JMS CMPEQ_P2P7
    1022/     42E : 1C 36               	JCN ZN, EVAL_O7
    1023/     430 : 57 C8               	JMS CMP_REG16P0_REG16P1
    1024/     432 : 1A 14               	JCN CN, EVAL_LVALUE_FALSE ; jump if REG(P0) < REG(P1)
    1025/     434 :                     ;;; 
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 22 - 2023/03/12 16:43:50


    1026/     434 :                     ;;; '>' is TEST FOR GREATER THAN OR EQUAL TO
    1027/     434 :                     ;;; 
    1028/     434 :                     ;;; 	JCN Z, EVAL_LVALUE_FALSE  ;         REG(P0) == REG(P1)
    1029/     434 : 44 18               	JUN EVAL_LVALUE_TRUE	  ;         REG(P0) > REG(P1)
    1030/     436 :                     EVAL_O7:
    1031/     436 :                     EVAL_O8:
    1032/     436 :                     EVAL_O9:
    1033/     436 :                     	;; ERROR (unknown operator)
    1034/     436 : 20 78               	FIM P0, REG8_ERROR
    1035/     438 : 22 E2               	FIM P1, ERROR_EVAL_UNKNOWNOPERATOR
    1036/     43A :                     
    1037/     43A : 22 80               	FIM P1, REG16_LVALUE	; set current LVALUE as a result
    1038/     43C : 59 D9               	JMS PUSH_REG16P1
    1039/     43E : 41 16               	JUN VTL_START		; error and jump to VTL_START
    1040/     440 :                     EVAL_EXIT:
    1041/     440 : 22 A0               	FIM P1, REG16_TMP
    1042/     442 : 59 FC               	JMS POP_REG16P1		; return with stacked value
    1043/     444 :                     
    1044/     444 : 59 A5               	JMS POP_P1
    1045/     446 : 20 A0               	FIM P0, REG16_TMP
    1046/     448 : 55 62               	JMS LD_REG16P1_REG16P0	; load result to REG(P1)
    1047/     44A :                     	
    1048/     44A : 20 00               	FIM P0, REG16_INDEX	; restore P0 to INDEX
    1049/     44C : 59 BF               	JMS POP_P2
    1050/     44E : 4B D0               	JUN RETURN_P2	
    1051/     450 :                     	
    1052/     450 :                     ;;;----------------------------------------------------------------------------
    1053/     450 :                     ;;; GETFACTOR_PMINDEX_REG16P1
    1054/     450 :                     ;;; Get a value of the first factor from PMINDEX and set it to REG(P1)
    1055/     450 :                     ;;;----------------------------------------------------------------------------
    1056/     450 :                     GETFACTOR_PMINDEX_REG16P1:
    1057/     450 : 59 73               	JMS PUSH_P2		; PUSH a return label
    1058/     452 : 59 5B               	JMS PUSH_P1
    1059/     454 :                     
    1060/     454 : 20 00               	FIM P0, REG16_INDEX
    1061/     456 : 59 06               	JMS LD_P1_PM12REG16P0
    1062/     458 :                     
    1063/     458 : 2E 28               	FIM P7, '('
    1064/     45A : 5D D0               	JMS CMP_P1P7
    1065/     45C : 1C 68               	JCN NZ,GETFACTOR_L0
    1066/     45E : 55 CA               	JMS INC_REG16P0
    1067/     460 : 24 E3               	FIM P2, lo(RETURN_GETFACTOR_R1)
    1068/     462 : 22 88               	FIM P1, REG16_FACTOR
    1069/     464 : 43 94               	JUN EVAL_EXPRESSION_PMINDEX_REG16P1
    1070/     466 :                     GETFACTOR_R1:
    1071/     466 : 45 10               	JUN GETFACTOR_EXIT_NOINCREMENT
    1072/     468 :                     
    1073/     468 :                     GETFACTOR_L0:
    1074/     468 : 24 88               	FIM P2, REG16_FACTOR	; P2 = REG16_FACTOR
    1075/     46A :                     
    1076/     46A :                     	;; unary operator minus '-' 
    1077/     46A : 2E 2D               	FIM P7, '-'
    1078/     46C : 5D D0               	JMS CMP_P1P7
    1079/     46E : 1C 80               	JCN NZ,GETFACTOR_L1
    1080/     470 : 55 CA               	JMS INC_REG16P0
    1081/     472 : 24 E5               	FIM P2, lo(RETURN_GETFACTOR_R2)
    1082/     474 : 22 88               	FIM P1, REG16_FACTOR
    1083/     476 : 44 50               	JUN GETFACTOR_PMINDEX_REG16P1
    1084/     478 :                     GETFACTOR_R2:
    1085/     478 :                     	;; REG(FACTOR)=-REG(FACTOR) (2's complement)
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 23 - 2023/03/12 16:43:50


    1086/     478 : 20 88               	FIM P0, REG16_FACTOR
    1087/     47A : 55 EB               	JMS COMPLEMENT_REG16P0
    1088/     47C : 55 CA               	JMS INC_REG16P0
    1089/     47E :                     	;; FIM P0, REG16_INDEX ; can be omitted because NOINCREMENT P0
    1090/     47E :                     	
    1091/     47E : 45 10               	JUN GETFACTOR_EXIT_NOINCREMENT
    1092/     480 :                     GETFACTOR_L1:
    1093/     480 :                     	;; decimal number
    1094/     480 : 5D 8C               	JMS ISNUM_P1
    1095/     482 : 14 8A               	JCN Z, GETFACTOR_L2
    1096/     484 : 22 88               	FIM P1, REG16_FACTOR
    1097/     486 : 5A 64               	JMS GETNUMBER_PM12REG16P0_REG16P1
    1098/     488 : 45 10               	JUN GETFACTOR_EXIT_NOINCREMENT
    1099/     48A :                     GETFACTOR_L2:
    1100/     48A :                     	;; variable
    1101/     48A : 5D 9A               	JMS ISALPHA_P1
    1102/     48C : 14 94               	JCN Z, GETFACTOR_L3
    1103/     48E : 55 2D               	JMS CTOREG16NUM_P1
    1104/     490 : 55 9B               	JMS LD_REG16P2_REG16P1
    1105/     492 : 45 0E               	JUN GETFACTOR_EXIT
    1106/     494 :                     GETFACTOR_L3:
    1107/     494 :                     	;; remainder of the last DIV
    1108/     494 : 2E 25               	FIM P7, '%'
    1109/     496 : 5D D0               	JMS CMP_P1P7
    1110/     498 : 1C A0               	JCN ZN, GETFACTOR_L4
    1111/     49A :                     
    1112/     49A : 22 90               	FIM P1, REG16_RMND
    1113/     49C : 55 9B               	JMS LD_REG16P2_REG16P1
    1114/     49E :                     
    1115/     49E : 45 0E               	JUN GETFACTOR_EXIT
    1116/     4A0 :                     GETFACTOR_L4:
    1117/     4A0 :                     	;; line number
    1118/     4A0 : 2E 23               	FIM P7, '#'
    1119/     4A2 : 5D D0               	JMS CMP_P1P7
    1120/     4A4 : 1C AC               	JCN ZN, GETFACTOR_L5
    1121/     4A6 :                     
    1122/     4A6 : 22 6C               	FIM P1, REG16_LINENUM
    1123/     4A8 : 55 9B               	JMS LD_REG16P2_REG16P1
    1124/     4AA :                     	
    1125/     4AA : 45 0E               	JUN GETFACTOR_EXIT
    1126/     4AC :                     GETFACTOR_L5:
    1127/     4AC :                     	;; return address
    1128/     4AC : 2E 21               	FIM P7, '!'
    1129/     4AE : 5D D0               	JMS CMP_P1P7
    1130/     4B0 : 1C B8               	JCN ZN, GETFACTOR_L6
    1131/     4B2 :                     
    1132/     4B2 : 22 94               	FIM P1, REG16_RETURN
    1133/     4B4 : 55 9B               	JMS LD_REG16P2_REG16P1
    1134/     4B6 :                     
    1135/     4B6 : 45 0E               	JUN GETFACTOR_EXIT
    1136/     4B8 :                     GETFACTOR_L6:
    1137/     4B8 :                     	;; random number
    1138/     4B8 : 2E 27               	FIM P7, '\''
    1139/     4BA : 5D D0               	JMS CMP_P1P7
    1140/     4BC : 1C C4               	JCN ZN, GETFACTOR_L7
    1141/     4BE :                     
    1142/     4BE : 22 98               	FIM P1, REG16_RANDOM
    1143/     4C0 : 55 9B               	JMS LD_REG16P2_REG16P1
    1144/     4C2 :                     
    1145/     4C2 : 45 0E               	JUN GETFACTOR_EXIT
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 24 - 2023/03/12 16:43:50


    1146/     4C4 :                     GETFACTOR_L7:
    1147/     4C4 :                     	;; the last byte of program
    1148/     4C4 : 2E 26               	FIM P7, '&'
    1149/     4C6 : 5D D0               	JMS CMP_P1P7
    1150/     4C8 : 1C D0               	JCN ZN, GETFACTOR_L8
    1151/     4CA :                     
    1152/     4CA : 22 74               	FIM P1, REG16_PEND
    1153/     4CC : 55 9B               	JMS LD_REG16P2_REG16P1
    1154/     4CE :                     
    1155/     4CE : 45 0E               	JUN GETFACTOR_EXIT
    1156/     4D0 :                     GETFACTOR_L8:
    1157/     4D0 :                     	;; input one charactoer from serial
    1158/     4D0 : 2E 24               	FIM P7, '$'
    1159/     4D2 : 5D D0               	JMS CMP_P1P7
    1160/     4D4 : 1C E0               	JCN ZN, GETFACTOR_L9
    1161/     4D6 :                     
    1162/     4D6 : 5D 00               	JMS GETCHAR_P1
    1163/     4D8 : 20 88               	FIM P0, REG16_FACTOR
    1164/     4DA : 56 38               	JMS LD_REG16P0_8BIT_P1
    1165/     4DC :                     
    1166/     4DC : 20 00               	FIM P0, REG16_INDEX
    1167/     4DE :                     
    1168/     4DE : 45 0E               	JUN GETFACTOR_EXIT
    1169/     4E0 :                     GETFACTOR_L9:
    1170/     4E0 :                     	;; input one line from serial and evaluate it
    1171/     4E0 : 2E 3F               	FIM P7, '?'
    1172/     4E2 : 5D D0               	JMS CMP_P1P7
    1173/     4E4 : 14 E8               	JCN Z, GETFACTOR_L91
    1174/     4E6 : 45 02               	JUN GETFACTOR_L10
    1175/     4E8 :                     GETFACTOR_L91:
    1176/     4E8 : 20 00               	FIM P0, REG16_INDEX
    1177/     4EA : 22 00               	FIM P1, REG16_INDEX
    1178/     4EC : 59 D9               	JMS PUSH_REG16P1	; push REG(INDEX)
    1179/     4EE : 24 00               	FIM P2, up(PM12_LINEBUF)
    1180/     4F0 : 26 00               	FIM P3, lo(PM12_LINEBUF)
    1181/     4F2 : 55 F9               	JMS LD_REG16P0_P2P3	; REG(INDEX) = PM12_LNEBUF
    1182/     4F4 : 5A 1D               	JMS GETLINE_PM12REG16P0	; get line input
    1183/     4F6 :                     
    1184/     4F6 : 22 88               	FIM P1, REG16_FACTOR
    1185/     4F8 : 24 E9               	FIM P2, lo(RETURN_GETFACTOR_L9_R1)
    1186/     4FA : 43 94               	JUN EVAL_EXPRESSION_PMINDEX_REG16P1 ; eval it
    1187/     4FC :                     GETFACTOR_L9_R1:
    1188/     4FC : 22 00               	FIM P1, REG16_INDEX
    1189/     4FE : 59 FC               	JMS POP_REG16P1		; pop REG(INDEX)
    1190/     500 :                     
    1191/     500 : 45 0E               	JUN GETFACTOR_EXIT
    1192/     502 :                     GETFACTOR_L10:
    1193/     502 :                     
    1194/     502 :                     
    1195/     502 :                     GETFACTOR_ERROR:
    1196/     502 : 20 7A               	FIM P0, REG8_ERROR2
    1197/     504 : 56 5F               	JMS LD_REG8P0_P1
    1198/     506 :                     
    1199/     506 : 22 F0               	FIM P1, ERROR_FACTOR_NOTAFACTOR
    1200/     508 : 20 78               	FIM P0, REG8_ERROR
    1201/     50A : 56 5F               	JMS LD_REG8P0_P1
    1202/     50C : 41 16               	JUN VTL_START		; error and jump to VTL_START
    1203/     50E :                     GETFACTOR_EXIT:
    1204/     50E : 55 CA               	JMS INC_REG16P0		; increment REG(INDEX)
    1205/     510 :                     GETFACTOR_EXIT_NOINCREMENT:
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 25 - 2023/03/12 16:43:50


    1206/     510 : 59 A5               	JMS POP_P1
    1207/     512 : 20 88               	FIM P0, REG16_FACTOR
    1208/     514 : 55 62               	JMS LD_REG16P1_REG16P0	; load result to REG(P1)
    1209/     516 : 20 00               	FIM P0, REG16_INDEX	; set P0 to INDEX
    1210/     518 :                     
    1211/     518 : 59 BF               	JMS POP_P2
    1212/     51A : 4B D0               	JUN RETURN_P2
    1213/     51C :                     	
    1214/     51C :                     ;;;----------------------------------------------------------------------------
    1215/     51C :                     ;;; SKIPSPACE_PM12REG16P0
    1216/     51C :                     ;;; Skip ' ' in the string buffer PM(REG16(P0))
    1217/     51C :                     ;;; increment REG16(P0) to not a ' ' char.
    1218/     51C :                     ;;; destroy: P7
    1219/     51C :                     ;;;----------------------------------------------------------------------------
    1220/     51C :                     SKIPSPACE_PM12REG16P0:
    1221/     51C : 59 5B               	JMS PUSH_P1
    1222/     51E :                     SKIPSPACE_LOOP:	
    1223/     51E : 59 06               	JMS LD_P1_PM12REG16P0
    1224/     520 :                     	;; 	JMS ISZEROORNOT_P1
    1225/     520 :                     	;;	JCN Z, SKIPSPACE_EXIT	; EOL
    1226/     520 : 2E 20               	FIM P7, ' '
    1227/     522 : 5D D0               	JMS CMP_P1P7
    1228/     524 : 1C 2A               	JCN ZN, SKIPSPACE_EXIT
    1229/     526 : 55 CA               	JMS INC_REG16P0
    1230/     528 : 45 1E               	JUN SKIPSPACE_LOOP
    1231/     52A :                     SKIPSPACE_EXIT:
    1232/     52A : 59 A5               	JMS POP_P1
    1233/     52C : C0                  	BBL 0
    1234/     52D :                     
    1235/     52D :                     ;;;----------------------------------------------------------------------------
    1236/     52D :                     ;;; CTOREG16NUM_P1
    1237/     52D :                     ;;; return address of REG16_x, (x=A to Z)
    1238/     52D :                     ;;; assuming that REG16_A=04H, ..., REG16_Z=68H
    1239/     52D :                     ;;; P1 must be an alphabet caracter and no error check
    1240/     52D :                     ;;; 
    1241/     52D :                     ;;; (Aa) 41H, 61H: 01x0 0001 -> 0000 0100 (04H)
    1242/     52D :                     ;;; (Bb) 42H, 62H: 01x0 0010 -> 0000 1000 (08H)
    1243/     52D :                     ;;; ...
    1244/     52D :                     ;;; (Zz) 5AH, 7AH: 01x1 1010 -> 0110 1000 (68H)
    1245/     52D :                     ;;;           bit: 7654 3210 -> .432 10.. (.=0)
    1246/     52D :                     ;;;----------------------------------------------------------------------------
    1247/     52D :                     CTOREG16NUM_P1:
    1248/     52D : F0                  	CLB
    1249/     52E : A2                  	LD R2
    1250/     52F : F6                  	RAR
    1251/     530 : F7                  	TCC			; ACC=R2.bit0 (=P1.bit4)
    1252/     531 : F5                  	RAL
    1253/     532 : F5                  	RAL
    1254/     533 : B2                  	XCH R2			; R2 = .4..
    1255/     534 : A3                  	LD R3
    1256/     535 : F6                  	RAR
    1257/     536 : F1                  	CLC
    1258/     537 : F6                  	RAR
    1259/     538 : F1                  	CLC
    1260/     539 : 82                  	ADD R2
    1261/     53A : B2                  	XCH R2			; R2 = .432
    1262/     53B : F0                  	CLB
    1263/     53C : A3                  	LD R3
    1264/     53D : F5                  	RAL
    1265/     53E : F1                  	CLC
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 26 - 2023/03/12 16:43:50


    1266/     53F : F5                  	RAL
    1267/     540 : B3                  	XCH R3			; R3 = 10..
    1268/     541 : C0                  	BBL 0
    1269/     542 :                     	
    1270/     542 :                     
    1271/     542 :                     ;;;----------------------------------------------------------------------------
    1272/     542 :                     ;;; Subroutines for REG16 (16bit registars)
    1273/     542 :                     ;;;----------------------------------------------------------------------------
    1274/     542 :                     ;;;----------------------------------------------------------------------------
    1275/     542 :                     ;;; CLEAR_REG16P0
    1276/     542 :                     ;;; REG16(P0) = 0
    1277/     542 :                     ;;; destroy: P7
    1278/     542 :                     ;;;----------------------------------------------------------------------------
    1279/     542 :                     CLEAR_REG16P0:
    1280/     542 : A1                  	LD R1
    1281/     543 : BF                  	XCH R15			; save R1
    1282/     544 : DC                  	LDM loop(4)
    1283/     545 : BE                  	XCH R14
    1284/     546 : F0                  	CLB
    1285/     547 :                     CLEARREG16_LOOP:
    1286/     547 : 21                  	SRC P0
    1287/     548 : E0                  	WRM
    1288/     549 : 61                  	INC R1
    1289/     54A : 7E 47               	ISZ R14, CLEARREG16_LOOP	
    1290/     54C : AF                  	LD R15
    1291/     54D : B1                  	XCH R1			; restore R1
    1292/     54E : C0                  	BBL 0
    1293/     54F :                     
    1294/     54F :                     ;;;----------------------------------------------------------------------------
    1295/     54F :                     ;;; LD_REG16P0_REG16P1
    1296/     54F :                     ;;; REG16(P0) = REG16(P1)
    1297/     54F :                     ;;; destroy: P7
    1298/     54F :                     ;;;----------------------------------------------------------------------------
    1299/     54F :                     LD_REG16P0_REG16P1:
    1300/     54F : A1                  	LD R1
    1301/     550 : BF                  	XCH R15			; save R1 to R15
    1302/     551 : A3                  	LD R3
    1303/     552 : BD                  	XCH R13			; save R3 to R13
    1304/     553 :                     
    1305/     553 : DC                  	LDM loop(4)
    1306/     554 : BE                  	XCH R14
    1307/     555 :                     LDREG16P0P1_LOOP:
    1308/     555 : 23                  	SRC P1
    1309/     556 : E9                  	RDM
    1310/     557 : 21                  	SRC P0
    1311/     558 : E0                  	WRM
    1312/     559 : 61                  	INC R1
    1313/     55A : 63                  	INC R3
    1314/     55B : 7E 55               	ISZ R14, LDREG16P0P1_LOOP
    1315/     55D :                     
    1316/     55D : AF                  	LD R15
    1317/     55E : B1                  	XCH R1			; restore R1
    1318/     55F : AD                  	LD R13
    1319/     560 : B3                  	XCH R3			; restore R3
    1320/     561 : C0                  	BBL 0
    1321/     562 :                     
    1322/     562 :                     ;;;----------------------------------------------------------------------------
    1323/     562 :                     ;;; LD_REG16P1_REG16P0
    1324/     562 :                     ;;; REG16(P1) = REG16(P0)
    1325/     562 :                     ;;; destroy: P7
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 27 - 2023/03/12 16:43:50


    1326/     562 :                     ;;;----------------------------------------------------------------------------
    1327/     562 :                     LD_REG16P1_REG16P0:
    1328/     562 : A1                  	LD R1
    1329/     563 : BF                  	XCH R15			; save R1 to R15
    1330/     564 : A3                  	LD R3
    1331/     565 : BD                  	XCH R13			; save R3 to R13
    1332/     566 :                     
    1333/     566 : DC                  	LDM loop(4)
    1334/     567 : BE                  	XCH R14
    1335/     568 :                     LDREG16P1P0_LOOP:
    1336/     568 : 21                  	SRC P0
    1337/     569 : E9                  	RDM
    1338/     56A : 23                  	SRC P1
    1339/     56B : E0                  	WRM
    1340/     56C : 61                  	INC R1
    1341/     56D : 63                  	INC R3
    1342/     56E : 7E 68               	ISZ R14, LDREG16P1P0_LOOP
    1343/     570 :                     
    1344/     570 : AF                  	LD R15
    1345/     571 : B1                  	XCH R1			; restore R1
    1346/     572 : AD                  	LD R13
    1347/     573 : B3                  	XCH R3			; restore R3
    1348/     574 : C0                  	BBL 0
    1349/     575 :                     
    1350/     575 :                     ;;;----------------------------------------------------------------------------
    1351/     575 :                     ;;; LD_REG16P1_REG16P2
    1352/     575 :                     ;;; REG16(P1) = REG16(P2)
    1353/     575 :                     ;;; destroy: P7
    1354/     575 :                     ;;;----------------------------------------------------------------------------
    1355/     575 :                     LD_REG16P1_REG16P2:
    1356/     575 : A5                  	LD R5
    1357/     576 : BF                  	XCH R15			; save R5 to R15
    1358/     577 : A3                  	LD R3
    1359/     578 : BD                  	XCH R13			; save R3 to R13
    1360/     579 :                     
    1361/     579 : DC                  	LDM loop(4)
    1362/     57A : BE                  	XCH R14
    1363/     57B :                     LDREG16P1P2_LOOP:
    1364/     57B : 25                  	SRC P2
    1365/     57C : E9                  	RDM
    1366/     57D : 23                  	SRC P1
    1367/     57E : E0                  	WRM
    1368/     57F : 65                  	INC R5
    1369/     580 : 63                  	INC R3
    1370/     581 : 7E 7B               	ISZ R14, LDREG16P1P2_LOOP
    1371/     583 :                     
    1372/     583 : AF                  	LD R15
    1373/     584 : B5                  	XCH R5			; restore R5
    1374/     585 : AD                  	LD R13
    1375/     586 : B3                  	XCH R3			; restore R3
    1376/     587 : C0                  	BBL 0
    1377/     588 :                     
    1378/     588 :                     ;;;----------------------------------------------------------------------------
    1379/     588 :                     ;;; LD_REG16P2_REG16P0
    1380/     588 :                     ;;; REG16(P2) = REG16(P0)
    1381/     588 :                     ;;; destroy: P7
    1382/     588 :                     ;;;----------------------------------------------------------------------------
    1383/     588 :                     LD_REG16P2_REG16P0:
    1384/     588 : A1                  	LD R1
    1385/     589 : BF                  	XCH R15			; save R1 to R15
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 28 - 2023/03/12 16:43:50


    1386/     58A : A5                  	LD R5
    1387/     58B : BD                  	XCH R13			; save R5 to R13
    1388/     58C :                     
    1389/     58C : DC                  	LDM loop(4)
    1390/     58D : BE                  	XCH R14
    1391/     58E :                     LDREG16P2P0_LOOP:
    1392/     58E : 21                  	SRC P0
    1393/     58F : E9                  	RDM
    1394/     590 : 25                  	SRC P2
    1395/     591 : E0                  	WRM
    1396/     592 : 61                  	INC R1
    1397/     593 : 65                  	INC R5
    1398/     594 : 7E 8E               	ISZ R14, LDREG16P2P0_LOOP
    1399/     596 :                     
    1400/     596 : AF                  	LD R15
    1401/     597 : B1                  	XCH R1			; restore R1
    1402/     598 : AD                  	LD R13
    1403/     599 : B5                  	XCH R5			; restore R3
    1404/     59A : C0                  	BBL 0
    1405/     59B :                     	
    1406/     59B :                     ;;;----------------------------------------------------------------------------
    1407/     59B :                     ;;; LD_REG16P2_REG16P1
    1408/     59B :                     ;;; REG16(P2) = REG16(P1)
    1409/     59B :                     ;;; destroy: P7
    1410/     59B :                     ;;;----------------------------------------------------------------------------
    1411/     59B :                     LD_REG16P2_REG16P1:
    1412/     59B : A3                  	LD R3
    1413/     59C : BF                  	XCH R15			; save R3 to R15
    1414/     59D : A5                  	LD R5
    1415/     59E : BD                  	XCH R13			; save R5 to R13
    1416/     59F :                     
    1417/     59F : DC                  	LDM loop(4)
    1418/     5A0 : BE                  	XCH R14
    1419/     5A1 :                     LDREG16P2P1_LOOP:
    1420/     5A1 : 23                  	SRC P1
    1421/     5A2 : E9                  	RDM
    1422/     5A3 : 25                  	SRC P2
    1423/     5A4 : E0                  	WRM
    1424/     5A5 : 63                  	INC R3
    1425/     5A6 : 65                  	INC R5
    1426/     5A7 : 7E A1               	ISZ R14, LDREG16P2P1_LOOP
    1427/     5A9 :                     
    1428/     5A9 : AF                  	LD R15
    1429/     5AA : B3                  	XCH R3			; restore R1
    1430/     5AB : AD                  	LD R13
    1431/     5AC : B5                  	XCH R5			; restore R3
    1432/     5AD : C0                  	BBL 0
    1433/     5AE :                     	
    1434/     5AE :                     
    1435/     5AE :                     ;;;----------------------------------------------------------------------------
    1436/     5AE :                     ;;; GETSIGN_REG16P0_TOCARRY
    1437/     5AE :                     ;;; Get a sign of REG(P0) and set it to Carry
    1438/     5AE :                     ;;; CY = SIGN(REG16(P0)), ACC=0
    1439/     5AE :                     ;;;----------------------------------------------------------------------------
    1440/     5AE :                     GETSIGN_REG16P0_TOCARRY:
    1441/     5AE : A1                  	LD R1
    1442/     5AF : BF                  	XCH R15			; save R1 to R15
    1443/     5B0 : 61                  	INC R1
    1444/     5B1 : 61                  	INC R1
    1445/     5B2 : 61                  	INC R1
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 29 - 2023/03/12 16:43:50


    1446/     5B3 : 21                  	SRC P0
    1447/     5B4 : E9                  	RDM			; bitFEDC
    1448/     5B5 : F5                  	RAL			; rotate left (CY<-MSB)
    1449/     5B6 : AF                  	LD R15
    1450/     5B7 : B1                  	XCH R1			; restore R1
    1451/     5B8 : C0                  	BBL 0
    1452/     5B9 :                     
    1453/     5B9 :                     ;;;----------------------------------------------------------------------------
    1454/     5B9 :                     ;;; ISZEROORNOT_REG16P1
    1455/     5B9 :                     ;;; return:
    1456/     5B9 :                     ;;; 	ACC = 0, CY = 0 if REG16(P1) == 0
    1457/     5B9 :                     ;;; 	ACC = 1, CY = 0 if 1<=REG16(P1)<=0x7fff
    1458/     5B9 :                     ;;; 	ACC = 1, CY = 1 if 0x80<=REG16(P1)<=0xffff
    1459/     5B9 :                     ;;; destroy: R15, R14
    1460/     5B9 :                     ;;;----------------------------------------------------------------------------
    1461/     5B9 :                     ISZEROORNOT_REG16P1:
    1462/     5B9 : A3                  	LD R3
    1463/     5BA : BF                  	XCH R15			; save R3 to R15
    1464/     5BB :                     
    1465/     5BB : DC                  	LDM loop(4)
    1466/     5BC : BE                  	XCH R14
    1467/     5BD :                     ISZEROORNOT_LOOP:
    1468/     5BD : 23                  	SRC P1
    1469/     5BE : E9                  	RDM			; bit4321
    1470/     5BF : 1C C7               	JCN ZN, ISZEROREGP0_EXIT1
    1471/     5C1 : 63                  	INC R3
    1472/     5C2 : 7E BD               	ISZ R14, ISZEROORNOT_LOOP
    1473/     5C4 :                     
    1474/     5C4 : AF                  	LD R15
    1475/     5C5 : B3                  	XCH R3			; restore R3
    1476/     5C6 : C0                  	BBL 0
    1477/     5C7 :                     
    1478/     5C7 :                     ISZEROREGP0_EXIT1:
    1479/     5C7 : AF                  	LD R15
    1480/     5C8 : B3                  	XCH R3			; restore R3
    1481/     5C9 : C1                  	BBL 1
    1482/     5CA :                     
    1483/     5CA :                     
    1484/     5CA :                     ;;;----------------------------------------------------------------------------
    1485/     5CA :                     ;;; INC_REG16P0
    1486/     5CA :                     ;;; REG16(P0) = REG16(P0)+1
    1487/     5CA :                     ;;; destroy: P7(R14, R15)
    1488/     5CA :                     ;;;----------------------------------------------------------------------------
    1489/     5CA :                     INC_REG16P0:
    1490/     5CA : A1                  	LD R1
    1491/     5CB : BF                  	XCH R15			; save R1 to R15
    1492/     5CC :                     
    1493/     5CC : DC                  	LDM loop(4)
    1494/     5CD : BE                  	XCH R14			; R14 = 12, 13, 14, 15
    1495/     5CE :                     REG16_INC_LOOP:
    1496/     5CE : 21                  	SRC P0
    1497/     5CF : E9                  	RDM
    1498/     5D0 : F2                  	IAC 
    1499/     5D1 : E0                  	WRM
    1500/     5D2 : 1C D7               	JCN NZ, REG16_INC_EXIT
    1501/     5D4 : 61                  	INC R1
    1502/     5D5 : 7E CE               	ISZ R14, REG16_INC_LOOP
    1503/     5D7 :                     
    1504/     5D7 :                     REG16_INC_EXIT:
    1505/     5D7 : AF                  	LD R15
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 30 - 2023/03/12 16:43:50


    1506/     5D8 : B1                  	XCH R1			; restore R1
    1507/     5D9 : C0                  	BBL 0
    1508/     5DA :                     
    1509/     5DA :                     ;;;----------------------------------------------------------------------------
    1510/     5DA :                     ;;; DEC_REG16P0
    1511/     5DA :                     ;;; REG16(P0) = REG16(P0) - 1
    1512/     5DA :                     ;;; destroy: P7(R14, R15)
    1513/     5DA :                     ;;;----------------------------------------------------------------------------
    1514/     5DA :                     DEC_REG16P0:
    1515/     5DA : A1                  	LD R1
    1516/     5DB : BF                  	XCH R15			; save R1 to R15
    1517/     5DC :                     
    1518/     5DC : DC                  	LDM loop(4)
    1519/     5DD : BE                  	XCH R14			; R14 = 12, 13, 14, 15
    1520/     5DE : F1                  	CLC
    1521/     5DF :                     REG16_DEC_LOOP:
    1522/     5DF : 21                  	SRC P0
    1523/     5E0 : E9                  	RDM
    1524/     5E1 : F8                  	DAC
    1525/     5E2 : E0                  	WRM
    1526/     5E3 : 12 E8               	JCN C, REG16_DEC_EXIT	; CY=1 if no borrow
    1527/     5E5 : 61                  	INC R1
    1528/     5E6 : 7E DF               	ISZ R14, REG16_DEC_LOOP
    1529/     5E8 :                     REG16_DEC_EXIT:
    1530/     5E8 : AF                  	LD R15
    1531/     5E9 : B1                  	XCH R1			; restore R1
    1532/     5EA : C0                  	BBL 0
    1533/     5EB :                     
    1534/     5EB :                     ;;;----------------------------------------------------------------------------
    1535/     5EB :                     ;;; COMPLEMENT_REG16P0
    1536/     5EB :                     ;;; REG16(P0) = not REG16(P0)
    1537/     5EB :                     ;;; destroy: P7(R14, R15)
    1538/     5EB :                     ;;;----------------------------------------------------------------------------
    1539/     5EB :                     COMPLEMENT_REG16P0:
    1540/     5EB : A1                  	LD R1
    1541/     5EC : BF                  	XCH R15			; save R1 to R15
    1542/     5ED :                     
    1543/     5ED : DC                  	LDM loop(4)
    1544/     5EE : BE                  	XCH R14			; R14 = 12, 13, 14, 15
    1545/     5EF :                     REG16_COMPLEMENT_LOOP:
    1546/     5EF : 21                  	SRC P0
    1547/     5F0 : E9                  	RDM
    1548/     5F1 : F4                  	CMA
    1549/     5F2 : E0                  	WRM
    1550/     5F3 : 61                  	INC R1
    1551/     5F4 : 7E EF               	ISZ R14, REG16_COMPLEMENT_LOOP
    1552/     5F6 :                     
    1553/     5F6 :                     REG16_COMPLEMENT_EXIT:
    1554/     5F6 : AF                  	LD R15
    1555/     5F7 : B1                  	XCH R1			; restore R1
    1556/     5F8 : C0                  	BBL 0
    1557/     5F9 :                     
    1558/     5F9 :                     ;;;----------------------------------------------------------------------------
    1559/     5F9 :                     ;;; LD_REG16P0_P2P3
    1560/     5F9 :                     ;;; REG16(P0) = P2P3(R4R5R6R7)
    1561/     5F9 :                     ;;; destroy: P7
    1562/     5F9 :                     ;;;----------------------------------------------------------------------------
    1563/     5F9 :                     LD_REG16P0_P2P3:
    1564/     5F9 : 21                  	SRC P0
    1565/     5FA : A7                  	LD R7
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 31 - 2023/03/12 16:43:50


    1566/     5FB : E0                  	WRM
    1567/     5FC :                     
    1568/     5FC : 61                  	INC R1
    1569/     5FD : 21                  	SRC P0
    1570/     5FE : A6                  	LD R6
    1571/     5FF : E0                  	WRM
    1572/     600 :                     
    1573/     600 : 61                  	INC R1
    1574/     601 : 21                  	SRC P0
    1575/     602 : A5                  	LD R5
    1576/     603 : E0                  	WRM
    1577/     604 :                     
    1578/     604 : 61                  	INC R1
    1579/     605 : 21                  	SRC P0
    1580/     606 : A4                  	LD R4
    1581/     607 : E0                  	WRM
    1582/     608 :                     
    1583/     608 : A1                  	LD R1
    1584/     609 : F8                  	DAC
    1585/     60A : F8                  	DAC
    1586/     60B : F8                  	DAC
    1587/     60C : B1                  	XCH R1			; restore R1
    1588/     60D : C0                  	BBL 0
    1589/     60E :                     
    1590/     60E :                     ;;;----------------------------------------------------------------------------
    1591/     60E :                     ;;; LD_REG16P1_P2P3
    1592/     60E :                     ;;; REG16(P1) = P2P3(R4R5R6R7)
    1593/     60E :                     ;;; destroy: P7
    1594/     60E :                     ;;;----------------------------------------------------------------------------
    1595/     60E :                     LD_REG16P1_P2P3:
    1596/     60E : 23                  	SRC P1
    1597/     60F : A7                  	LD R7
    1598/     610 : E0                  	WRM
    1599/     611 :                     
    1600/     611 : 63                  	INC R3
    1601/     612 : 23                  	SRC P1
    1602/     613 : A6                  	LD R6
    1603/     614 : E0                  	WRM
    1604/     615 :                     
    1605/     615 : 63                  	INC R3
    1606/     616 : 23                  	SRC P1
    1607/     617 : A5                  	LD R5
    1608/     618 : E0                  	WRM
    1609/     619 :                     
    1610/     619 : 63                  	INC R3
    1611/     61A : 23                  	SRC P1
    1612/     61B : A4                  	LD R4
    1613/     61C : E0                  	WRM
    1614/     61D :                     
    1615/     61D : A3                  	LD R3
    1616/     61E : F8                  	DAC
    1617/     61F : F8                  	DAC
    1618/     620 : F8                  	DAC
    1619/     621 : B3                  	XCH R3			; restore R3
    1620/     622 : C0                  	BBL 0
    1621/     623 :                     
    1622/     623 :                     ;;;----------------------------------------------------------------------------
    1623/     623 :                     ;;; LD_P2P3_REG16P1
    1624/     623 :                     ;;; P2(R4R5) = REG16(P1).bitFEDCBA98
    1625/     623 :                     ;;; P3(R6R7) = REG16(P1).bit76543210
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 32 - 2023/03/12 16:43:50


    1626/     623 :                     ;;;----------------------------------------------------------------------------
    1627/     623 :                     LD_P2P3_REG16P1:
    1628/     623 : 23                  	SRC P1
    1629/     624 : E9                  	RDM
    1630/     625 : B7                  	XCH R7			; R7 = REG16(P1).bit3210
    1631/     626 :                     
    1632/     626 : 63                  	INC R3
    1633/     627 : 23                  	SRC P1
    1634/     628 : E9                  	RDM
    1635/     629 : B6                  	XCH R6			; R6 = REG16(P1).bit7654
    1636/     62A :                     	
    1637/     62A : 63                  	INC R3
    1638/     62B : 23                  	SRC P1
    1639/     62C : E9                  	RDM
    1640/     62D : B5                  	XCH R5			; R5 = REG16(P1).bitBA98
    1641/     62E :                     
    1642/     62E : 63                  	INC R3
    1643/     62F : 23                  	SRC P1
    1644/     630 : E9                  	RDM
    1645/     631 : B4                  	XCH R4			; R4 = REG16(P1).bitFEDC
    1646/     632 :                     
    1647/     632 : A3                  	LD R3
    1648/     633 : F8                  	DAC
    1649/     634 : F8                  	DAC
    1650/     635 : F8                  	DAC
    1651/     636 : B3                  	XCH R3			; restore R3
    1652/     637 :                     
    1653/     637 : C0                  	BBL 0
    1654/     638 :                     
    1655/     638 :                     ;;;----------------------------------------------------------------------------
    1656/     638 :                     ;;; LD_REG16P0_8BIT_P1
    1657/     638 :                     ;;; REG16(P0) = P1
    1658/     638 :                     ;;; load lower 8bit, upper 8bit becomes 0
    1659/     638 :                     ;;;----------------------------------------------------------------------------
    1660/     638 :                     LD_REG16P0_8BIT_P1:
    1661/     638 : 21                  	SRC P0
    1662/     639 : A3                  	LD R3
    1663/     63A : E0                  	WRM
    1664/     63B :                     
    1665/     63B : 61                  	INC R1
    1666/     63C : 21                  	SRC P0
    1667/     63D : A2                  	LD R2
    1668/     63E : E0                  	WRM
    1669/     63F :                     
    1670/     63F : F0                  	CLB
    1671/     640 : 61                  	INC R1
    1672/     641 : 21                  	SRC P0
    1673/     642 : E0                  	WRM
    1674/     643 :                     
    1675/     643 : 61                  	INC R1
    1676/     644 : 21                  	SRC P0
    1677/     645 : E0                  	WRM
    1678/     646 :                     
    1679/     646 : A1                  	LD R1
    1680/     647 : F8                  	DAC
    1681/     648 : F8                  	DAC
    1682/     649 : F8                  	DAC
    1683/     64A : B1                  	XCH R1			; restore R1
    1684/     64B : C0                  	BBL 0
    1685/     64C :                     
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 33 - 2023/03/12 16:43:50


    1686/     64C :                     ;;;----------------------------------------------------------------------------
    1687/     64C :                     ;;; CLEAR_SIGNFLAG
    1688/     64C :                     ;;; TOGGLE_SIGNFLAG
    1689/     64C :                     ;;; GET_SIGNFLAG_TOCARRY
    1690/     64C :                     ;;;----------------------------------------------------------------------------
    1691/     64C :                     CLEAR_SIGNFLAG:
    1692/     64C : 2E 7D               	FIM P7, REG4_SIGN
    1693/     64E : 2F                  	SRC P7
    1694/     64F : F0                  	CLB
    1695/     650 : E0                  	WRM
    1696/     651 : C0                  	BBL 0
    1697/     652 :                     
    1698/     652 :                     TOGGLE_SIGNFLAG:
    1699/     652 : 2E 7D               	FIM P7, REG4_SIGN
    1700/     654 : 2F                  	SRC P7
    1701/     655 : E9                  	RDM
    1702/     656 : F4                  	CMA
    1703/     657 : E0                  	WRM
    1704/     658 : C0                  	BBL 0
    1705/     659 :                     
    1706/     659 :                     GET_SIGNFLAG_TOCARRY:	
    1707/     659 : 2E 7D               	FIM P7, REG4_SIGN
    1708/     65B : 2F                  	SRC P7
    1709/     65C : E9                  	RDM
    1710/     65D : F6                  	RAR
    1711/     65E : C0                  	BBL 0
    1712/     65F :                     
    1713/     65F :                     ;;;----------------------------------------------------------------------------
    1714/     65F :                     ;;; LD_REG8P0_P1
    1715/     65F :                     ;;; REG8(P0) = P1
    1716/     65F :                     ;;;----------------------------------------------------------------------------
    1717/     65F :                     LD_REG8P0_P1:
    1718/     65F : 21                  	SRC P0
    1719/     660 : A3                  	LD R3
    1720/     661 : E0                  	WRM
    1721/     662 :                     
    1722/     662 : 61                  	INC R1
    1723/     663 : 21                  	SRC P0
    1724/     664 : A2                  	LD R2
    1725/     665 : E0                  	WRM
    1726/     666 :                     
    1727/     666 : A1                  	LD R1
    1728/     667 : F8                  	DAC
    1729/     668 : B1                  	XCH R1			; restore R1
    1730/     669 : C0                  	BBL 0
    1731/     66A :                     
    1732/     66A :                     ;;;----------------------------------------------------------------------------
    1733/     66A :                     ;;; LD_P1_REG16P0_8BIT (= LD_P1_REG8P0)
    1734/     66A :                     ;;; P1 = REG16(P0).bit76543210
    1735/     66A :                     ;;; or 	P1 = REG8(P0)
    1736/     66A :                     ;;;----------------------------------------------------------------------------
    1737/     66A :                     LD_P1_REG8P0
    1738/     66A :                     LD_P1_REG16P0_8BIT:
    1739/     66A : 21                  	SRC P0
    1740/     66B : E9                  	RDM
    1741/     66C : B3                  	XCH R3			; R5 = REG16(R14R15).bit3210
    1742/     66D :                     
    1743/     66D : 61                  	INC R1			; R1++
    1744/     66E : 21                  	SRC P0
    1745/     66F : E9                  	RDM			; R4 = REG16(R14R15).bit7654
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 34 - 2023/03/12 16:43:50


    1746/     670 : B2                  	XCH R2
    1747/     671 :                     
    1748/     671 : A1                  	LD R1
    1749/     672 : F8                  	DAC
    1750/     673 : B1                  	XCH R1			; restore R1
    1751/     674 : C0                  	BBL 0
    1752/     675 :                     
    1753/     675 :                     ;;;----------------------------------------------------------------------------
    1754/     675 :                     ;;; LD_P2P3_REG16P0
    1755/     675 :                     ;;; P2(R4R5) = REG16(P0).bitFEDCBA98
    1756/     675 :                     ;;; P3(R6R7) = REG16(P0).bit76543210
    1757/     675 :                     ;;;----------------------------------------------------------------------------
    1758/     675 :                     LD_P2P3_REG16P0:
    1759/     675 : 21                  	SRC P0
    1760/     676 : E9                  	RDM
    1761/     677 : B7                  	XCH R7			; R7 = REG16(P0).bit3210
    1762/     678 :                     
    1763/     678 : 61                  	INC R1
    1764/     679 : 21                  	SRC P0
    1765/     67A : E9                  	RDM
    1766/     67B : B6                  	XCH R6			; R6 = REG16(P0).bit7654
    1767/     67C :                     	
    1768/     67C : 61                  	INC R1
    1769/     67D : 21                  	SRC P0
    1770/     67E : E9                  	RDM
    1771/     67F : B5                  	XCH R5			; R5 = REG16(P0).bitBA98
    1772/     680 :                     
    1773/     680 : 61                  	INC R1
    1774/     681 : 21                  	SRC P0
    1775/     682 : E9                  	RDM
    1776/     683 : B4                  	XCH R4			; R4 = REG16(P0).bitFEDC
    1777/     684 :                     
    1778/     684 : A1                  	LD R1
    1779/     685 : F8                  	DAC
    1780/     686 : F8                  	DAC
    1781/     687 : F8                  	DAC
    1782/     688 : B1                  	XCH R1			; restore R1
    1783/     689 :                     
    1784/     689 : C0                  	BBL 0
    1785/     68A :                     
    1786/     68A :                     ;;;----------------------------------------------------------------------------
    1787/     68A :                     ;;; MUL2_REG16P0
    1788/     68A :                     ;;; REG16(P0) = REG16(P0)*2
    1789/     68A :                     ;;; CY=1 if overflow
    1790/     68A :                     ;;; destroy: P7(R14, R15)
    1791/     68A :                     ;;;----------------------------------------------------------------------------
    1792/     68A :                     MUL2_REG16P0:
    1793/     68A : A1                  	LD R1
    1794/     68B : BF                  	XCH R15			; save R1 to R15
    1795/     68C :                     
    1796/     68C : DC                  	LDM loop(4)
    1797/     68D : BE                  	XCH R14
    1798/     68E : F1                  	CLC
    1799/     68F :                     MUL2REG16P0_LOOP:
    1800/     68F : 21                  	SRC P0
    1801/     690 : E9                  	RDM
    1802/     691 : F5                  	RAL
    1803/     692 : E0                  	WRM
    1804/     693 : 61                  	INC R1
    1805/     694 : 7E 8F               	ISZ R14, MUL2REG16P0_LOOP
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 35 - 2023/03/12 16:43:50


    1806/     696 :                     
    1807/     696 : AF                  	LD R15
    1808/     697 : B1                  	XCH R1			; restore R1
    1809/     698 : C0                  	BBL 0
    1810/     699 :                     
    1811/     699 :                     ;;;----------------------------------------------------------------------------
    1812/     699 :                     ;;; MUL2_REG16P1
    1813/     699 :                     ;;; REG16(P1) = REG16(P1)*2
    1814/     699 :                     ;;; CY=1 if overflow
    1815/     699 :                     ;;; destroy: P7(R14, R15)
    1816/     699 :                     ;;;----------------------------------------------------------------------------
    1817/     699 :                     MUL2_REG16P1:
    1818/     699 : A3                  	LD R3
    1819/     69A : BF                  	XCH R15			; save R3 to R15
    1820/     69B :                     
    1821/     69B : DC                  	LDM loop(4)
    1822/     69C : BE                  	XCH R14
    1823/     69D : F1                  	CLC
    1824/     69E :                     MUL2REG16P1_LOOP:
    1825/     69E : 23                  	SRC P1
    1826/     69F : E9                  	RDM
    1827/     6A0 : F5                  	RAL
    1828/     6A1 : E0                  	WRM
    1829/     6A2 : 63                  	INC R3
    1830/     6A3 : 7E 9E               	ISZ R14, MUL2REG16P1_LOOP
    1831/     6A5 :                     
    1832/     6A5 : AF                  	LD R15
    1833/     6A6 : B3                  	XCH R3			; restore R3
    1834/     6A7 : C0                  	BBL 0
    1835/     6A8 :                     
    1836/     6A8 :                     ;;;----------------------------------------------------------------------------
    1837/     6A8 :                     ;;; DIV2_REG16P2
    1838/     6A8 :                     ;;; REG16(P2) = REG16(P2)/2
    1839/     6A8 :                     ;;; CY=1 if LSB was 1
    1840/     6A8 :                     ;;; destroy: P7(R14, R15)
    1841/     6A8 :                     ;;;----------------------------------------------------------------------------
    1842/     6A8 :                     DIV2_REG16P2:
    1843/     6A8 : 65                  	INC R5
    1844/     6A9 : 65                  	INC R5
    1845/     6AA : 65                  	INC R5			; R5=R5+3
    1846/     6AB : DC                  	LDM loop(4)
    1847/     6AC : BE                  	XCH R14
    1848/     6AD : F0                  	CLB
    1849/     6AE : BF                  	XCH R15
    1850/     6AF :                     DIV2REG16_LOOP:
    1851/     6AF : AF                  	LD R15
    1852/     6B0 : F6                  	RAR			; restore last CY
    1853/     6B1 : 25                  	SRC P2
    1854/     6B2 : E9                  	RDM
    1855/     6B3 : F6                  	RAR
    1856/     6B4 : E0                  	WRM
    1857/     6B5 : F7                  	TCC			;
    1858/     6B6 : BF                  	XCH R15			; R15=CY
    1859/     6B7 : A5                  	LD R5
    1860/     6B8 : F8                  	DAC
    1861/     6B9 : B5                  	XCH R5			; R5--
    1862/     6BA : 7E AF               	ISZ R14, DIV2REG16_LOOP
    1863/     6BC : 65                  	INC R5			; restore R5
    1864/     6BD : AF                  	LD R15
    1865/     6BE : F6                  	RAR			; set last CY
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 36 - 2023/03/12 16:43:50


    1866/     6BF : C0                  	BBL 0
    1867/     6C0 :                     	
    1868/     6C0 :                     ;;;----------------------------------------------------------------------------
    1869/     6C0 :                     ;;; ADD_REG16P0_REG16P1
    1870/     6C0 :                     ;;; REG16(P0) = REG16(P0) + REG16(P1)
    1871/     6C0 :                     ;;; destroy: P6, P7
    1872/     6C0 :                     ;;;----------------------------------------------------------------------------
    1873/     6C0 :                     ADD_REG16P0_REG16P1:
    1874/     6C0 : A1                  	LD R1
    1875/     6C1 : BF                  	XCH R15			; save R1 to R15
    1876/     6C2 : A3                  	LD R3
    1877/     6C3 : BD                  	XCH R13			; save R3 to R13
    1878/     6C4 :                     
    1879/     6C4 : DC                  	LDM loop(4)
    1880/     6C5 : BE                  	XCH R14
    1881/     6C6 : F1                  	CLC
    1882/     6C7 :                     REG16_ADD_LOOP:
    1883/     6C7 : 23                  	SRC P1
    1884/     6C8 : E9                  	RDM
    1885/     6C9 : 21                  	SRC P0
    1886/     6CA : EB                  	ADM
    1887/     6CB : E0                  	WRM
    1888/     6CC : 61                  	INC R1
    1889/     6CD : 63                  	INC R3
    1890/     6CE : 7E C7               	ISZ R14, REG16_ADD_LOOP
    1891/     6D0 :                     
    1892/     6D0 : AF                  	LD R15
    1893/     6D1 : B1                  	XCH R1			; restore R1
    1894/     6D2 : AD                  	LD R13
    1895/     6D3 : B3                  	XCH R3			; restore R3
    1896/     6D4 : C0                  	BBL 0
    1897/     6D5 :                     
    1898/     6D5 :                     ;;;----------------------------------------------------------------------------
    1899/     6D5 :                     ;;; SUB_REG16P0_REG16P1
    1900/     6D5 :                     ;;; REG16(P0) = REG16(P0) - REG16(P1)
    1901/     6D5 :                     ;;; destroy: P6, P7
    1902/     6D5 :                     ;;;----------------------------------------------------------------------------
    1903/     6D5 :                     SUB_REG16P0_REG16P1:
    1904/     6D5 : A1                  	LD R1
    1905/     6D6 : BF                  	XCH R15			; save R1 to R15
    1906/     6D7 : A3                  	LD R3
    1907/     6D8 : BD                  	XCH R13			; save R3 to R13
    1908/     6D9 :                     
    1909/     6D9 : DC                  	LDM loop(4)
    1910/     6DA : BE                  	XCH R14
    1911/     6DB : FA                  	STC
    1912/     6DC :                     REG16_SUB_LOOP:
    1913/     6DC : F3                  	CMC
    1914/     6DD : 21                  	SRC P0
    1915/     6DE : E9                  	RDM
    1916/     6DF : 23                  	SRC P1
    1917/     6E0 : E8                  	SBM
    1918/     6E1 : 21                  	SRC P0
    1919/     6E2 : E0                  	WRM
    1920/     6E3 : 61                  	INC R1
    1921/     6E4 : 63                  	INC R3
    1922/     6E5 : 7E DC               	ISZ R14, REG16_SUB_LOOP
    1923/     6E7 :                     
    1924/     6E7 : AF                  	LD R15
    1925/     6E8 : B1                  	XCH R1			; restore R1
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 37 - 2023/03/12 16:43:50


    1926/     6E9 : AD                  	LD R13
    1927/     6EA : B3                  	XCH R3			; restore R3
    1928/     6EB : C0                  	BBL 0
    1929/     6EC :                     
    1930/     6EC :                     ;;;----------------------------------------------------------------------------
    1931/     6EC :                     ;;; P2P3 = P2P3/16
    1932/     6EC :                     ;;;----------------------------------------------------------------------------
    1933/     6EC :                     DIV16_P2P3:	
    1934/     6EC : A6                  	LD R6
    1935/     6ED : B7                  	XCH R7			; 10'->1'
    1936/     6EE : A5                  	LD R5
    1937/     6EF : B6                  	XCH R6			; 100'->10'
    1938/     6F0 : A4                  	LD R4
    1939/     6F1 : B5                  	XCH R5			; 1000'->100'
    1940/     6F2 : F0                  	CLB
    1941/     6F3 : B4                  	XCH R4			;  0 ->1000'
    1942/     6F4 : C0                  	BBL 0
    1943/     6F5 :                     
    1944/     6F5 :                     ;;;----------------------------------------------------------------------------
    1945/     6F5 :                     ;;; P2P3 = P2P3*16
    1946/     6F5 :                     ;;;----------------------------------------------------------------------------
    1947/     6F5 :                     MUL16_P2P3:	
    1948/     6F5 : A5                  	LD R5
    1949/     6F6 : B4                  	XCH R4			; 100'->1000'
    1950/     6F7 : A6                  	LD R6
    1951/     6F8 : B5                  	XCH R5			; 10'->100'
    1952/     6F9 : A7                  	LD R7
    1953/     6FA : B6                  	XCH R6			; 1'->10'
    1954/     6FB : F0                  	CLB
    1955/     6FC : B7                  	XCH R7			; 0->1'
    1956/     6FD : C0                  	BBL 0
    1957/     6FE :                     	
    1958/     6FE :                     ;;;----------------------------------------------------------------------------
    1959/     6FE :                     ;;; MUL_REG16P0_REG16P1
    1960/     6FE :                     ;;; REG16(P0) =  REG16(P0) * REG16(P1)
    1961/     6FE :                     ;;; destroy P7, P6, R5
    1962/     6FE :                     ;;;----------------------------------------------------------------------------
    1963/     6FE :                     MUL_REG16P0_REG16P1:
    1964/     6FE : 59 5B               	JMS PUSH_P1
    1965/     700 : 59 73               	JMS PUSH_P2
    1966/     702 :                     
    1967/     702 : 24 A0               	FIM P2, REG16_TMP
    1968/     704 : 55 88               	JMS LD_REG16P2_REG16P0	; REG(TMP)= REG(P0)
    1969/     706 :                     	
    1970/     706 : 24 A4               	FIM P2, REG16_TMP2
    1971/     708 : 55 9B               	JMS LD_REG16P2_REG16P1	; REG(TMP2)= REG(P1)
    1972/     70A :                     
    1973/     70A : 55 42               	JMS CLEAR_REG16P0	; REG(P0) = 0
    1974/     70C : 22 A0               	FIM P1, REG16_TMP
    1975/     70E : 24 A4               	FIM P2, REG16_TMP2
    1976/     710 :                     
    1977/     710 : D0                  	LDM loop(16)
    1978/     711 : BA                  	XCH R10
    1979/     712 :                     MUL_REG16_LOOP:
    1980/     712 : 56 A8               	JMS DIV2_REG16P2
    1981/     714 : 1A 18               	JCN CN, MUL_REG16_NEXT
    1982/     716 : 56 C0               	JMS ADD_REG16P0_REG16P1
    1983/     718 :                     MUL_REG16_NEXT:	
    1984/     718 : 56 99               	JMS MUL2_REG16P1
    1985/     71A : 7A 12               	ISZ R10, MUL_REG16_LOOP
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 38 - 2023/03/12 16:43:50


    1986/     71C :                     
    1987/     71C : 59 BF               	JMS POP_P2
    1988/     71E : 59 A5               	JMS POP_P1
    1989/     720 : C0                  	BBL 0
    1990/     721 :                     
    1991/     721 :                     ;;;----------------------------------------------------------------------------
    1992/     721 :                     ;;; DIV_REG16P0_REG16P1
    1993/     721 :                     ;;; REG16(P0) =  REG16(P0) / REG16(P1)
    1994/     721 :                     ;;; REG(RMND) = remainder
    1995/     721 :                     ;;; return: ACC=0 OK, ACC=1 divide by zero
    1996/     721 :                     ;;; destroy: P2, P3, P4, P5, P6, P7
    1997/     721 :                     ;;;----------------------------------------------------------------------------
    1998/     721 :                     DIV_REG16P0_REG16P1:
    1999/     721 : 59 D9               	JMS PUSH_REG16P1
    2000/     723 : 59 5B               	JMS PUSH_P1
    2001/     725 : 59 43               	JMS PUSH_P0
    2002/     727 :                     
    2003/     727 : 56 4C               	JMS CLEAR_SIGNFLAG
    2004/     729 :                     	
    2005/     729 : 24 00               	FIM P2, 00H
    2006/     72B : 55 AE               	JMS GETSIGN_REG16P0_TOCARRY
    2007/     72D : 1A 37               	JCN NC, DIV_POSITIVE_DIVIDEND
    2008/     72F : 55 EB               	JMS COMPLEMENT_REG16P0
    2009/     731 : 55 CA               	JMS INC_REG16P0		; REG(P0)=-REG(P0)
    2010/     733 : 56 52               	JMS TOGGLE_SIGNFLAG	; set SIGNFLAG
    2011/     735 : 24 01               	FIM P2, 01H
    2012/     737 :                     DIV_POSITIVE_DIVIDEND:
    2013/     737 : 59 73               	JMS PUSH_P2		; save sign of REG(P0) for sign of the remainder
    2014/     739 : 56 75               	JMS LD_P2P3_REG16P0
    2015/     73B : 20 90               	FIM P0, REG16_RMND
    2016/     73D : 55 F9               	JMS LD_REG16P0_P2P3	; REG(RMND) = abd(REG(P0))
    2017/     73F :                     	
    2018/     73F : (MACRO)              	LD_P0_P1
    2018/     73F : A2                                  LD R2
    2018/     740 : B0                                  XCH R0
    2018/     741 : A3                                  LD R3
    2018/     742 : B1                                  XCH R1
    2019/     743 : 55 AE               	JMS GETSIGN_REG16P0_TOCARRY
    2020/     745 : 1A 4D               	JCN NC, DIV_POSITIVE_DIVISOR
    2021/     747 : 55 EB               	JMS COMPLEMENT_REG16P0
    2022/     749 : 55 CA               	JMS INC_REG16P0		; REG(P1)=-REG(P1)
    2023/     74B : 56 52               	JMS TOGGLE_SIGNFLAG	; toggle SIGN
    2024/     74D :                     DIV_POSITIVE_DIVISOR:
    2025/     74D : 56 23               	JMS LD_P2P3_REG16P1 	; P2P3=abs(REG(P1)) P2P3 = divisor
    2026/     74F :                     
    2027/     74F : 20 90               	FIM P0, REG16_RMND
    2028/     751 :                     	
    2029/     751 :                     	;; registers for the result
    2030/     751 : 28 00               	FIM P4, 00H		; R8R9 = 00H
    2031/     753 : 2A 00               	FIM P5, 00H		; R10R11 = 00H
    2032/     755 :                     	
    2033/     755 : A4                  	LD R4
    2034/     756 : 1C 9B               	JCN NZ, REG16_DIV_L1
    2035/     758 : 56 F5               	JMS MUL16_P2P3		; P2P3 *= 16
    2036/     75A :                     
    2037/     75A : A4                  	LD R4
    2038/     75B : 1C 8E               	JCN NZ, REG16_DIV_L2
    2039/     75D : 56 F5               	JMS MUL16_P2P3		; P2P3 *= 16
    2040/     75F :                     
    2041/     75F : A4                  	LD R4
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 39 - 2023/03/12 16:43:50


    2042/     760 : 1C 81               	JCN NZ, REG16_DIV_L3
    2043/     762 : 56 F5               	JMS MUL16_P2P3		; P2P3 *= 16
    2044/     764 :                     
    2045/     764 : A4                  	LD R4
    2046/     765 : 1C 74               	JCN NZ, REG16_DIV_L4
    2047/     767 :                     
    2048/     767 :                     ;;; 	 Error: divide by zero 
    2049/     767 : 20 90               	FIM P0, REG16_RMND
    2050/     769 : 55 42               	JMS CLEAR_REG16P0	; RMND=0
    2051/     76B :                     
    2052/     76B : 59 8B               	JMS POP_P0
    2053/     76D : 24 7F               	FIM P2, 07FH
    2054/     76F : 26 FF               	FIM P3, 0FFH
    2055/     771 : 55 F9               	JMS LD_REG16P0_P2P3	; result = MAXINT
    2056/     773 : C1                  	BBL 1
    2057/     774 :                     	
    2058/     774 :                     REG16_DIV_L4:
    2059/     774 : 56 0E               	JMS LD_REG16P1_P2P3	; REG(P1)=P2P3
    2060/     776 :                     REG16_DIV_LOOP4:
    2061/     776 : 56 D5               	JMS SUB_REG16P0_REG16P1	; REG(RMND) = REG(RMND) - REG(P1)
    2062/     778 : 1A 7D               	JCN CN, REG16_DIV_NEXT4
    2063/     77A : 68                  	INC R8			; result +=1000H
    2064/     77B : 47 76               	JUN REG16_DIV_LOOP4
    2065/     77D :                     REG16_DIV_NEXT4:
    2066/     77D : 56 C0               	JMS ADD_REG16P0_REG16P1	; REG(RMND) = REG(RMND) + REG(P1)
    2067/     77F : 56 EC               	JMS DIV16_P2P3		; P2P3 /=16
    2068/     781 :                     REG16_DIV_L3:
    2069/     781 : 56 0E               	JMS LD_REG16P1_P2P3	; REG(P1)=P2P3
    2070/     783 :                     REG16_DIV_LOOP3:
    2071/     783 : 56 D5               	JMS SUB_REG16P0_REG16P1	; REG(RMND) = REG(RMND) - REG(P1)
    2072/     785 : 1A 8A               	JCN CN, REG16_DIV_NEXT3
    2073/     787 : 69                  	INC R9			; result +=100H
    2074/     788 : 47 83               	JUN REG16_DIV_LOOP3
    2075/     78A :                     REG16_DIV_NEXT3:
    2076/     78A : 56 C0               	JMS ADD_REG16P0_REG16P1	; REG(RMND) = REG(RMND) + REG(P1)
    2077/     78C : 56 EC               	JMS DIV16_P2P3		; P2P3 /=16
    2078/     78E :                     REG16_DIV_L2:
    2079/     78E : 56 0E               	JMS LD_REG16P1_P2P3	; REG(P1)=P2P3
    2080/     790 :                     REG16_DIV_LOOP2:
    2081/     790 : 56 D5               	JMS SUB_REG16P0_REG16P1	; REG(RMND) = REG(RMND) - REG(P1)
    2082/     792 : 1A 97               	JCN CN, REG16_DIV_NEXT2
    2083/     794 : 6A                  	INC R10			; result +=10H
    2084/     795 : 47 90               	JUN REG16_DIV_LOOP2
    2085/     797 :                     REG16_DIV_NEXT2:
    2086/     797 : 56 C0               	JMS ADD_REG16P0_REG16P1	; REG(RMND) = REG(RMND) + REG(P1)
    2087/     799 : 56 EC               	JMS DIV16_P2P3		; P2P3 /=16
    2088/     79B :                     REG16_DIV_L1:	
    2089/     79B : 56 0E               	JMS LD_REG16P1_P2P3	; REG(P1)=P2P3
    2090/     79D :                     REG16_DIV_LOOP1:
    2091/     79D : 56 D5               	JMS SUB_REG16P0_REG16P1	; REG(RMND) = REG(RMND) - REG(P1)
    2092/     79F : 1A A4               	JCN CN, REG16_DIV_NEXT1
    2093/     7A1 : 6B                  	INC R11	 		; result +=1H
    2094/     7A2 : 47 9D               	JUN REG16_DIV_LOOP1
    2095/     7A4 :                     REG16_DIV_NEXT1:
    2096/     7A4 : 56 C0               	JMS ADD_REG16P0_REG16P1	; REG(RMND) = REG(RMND) + REG(P1)
    2097/     7A6 :                     
    2098/     7A6 : 59 BF               	JMS POP_P2		; set sign of remainder
    2099/     7A8 : A5                  	LD R5
    2100/     7A9 : 14 AF               	JCN Z, REG16_DIV_POSITIVE_RMND
    2101/     7AB : 55 EB               	JMS COMPLEMENT_REG16P0
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 40 - 2023/03/12 16:43:50


    2102/     7AD : 55 CA               	JMS INC_REG16P0
    2103/     7AF :                     REG16_DIV_POSITIVE_RMND:
    2104/     7AF : (MACRO)              	LD_P2_P4
    2104/     7AF : A8                                  LD R8
    2104/     7B0 : B4                                  XCH R4
    2104/     7B1 : A9                                  LD R9
    2104/     7B2 : B5                                  XCH R5
    2105/     7B3 : (MACRO)              	LD_P3_P5
    2105/     7B3 : AA                                  LD R10
    2105/     7B4 : B6                                  XCH R6
    2105/     7B5 : AB                                  LD R11
    2105/     7B6 : B7                                  XCH R7
    2106/     7B7 :                     
    2107/     7B7 : 59 8B               	JMS POP_P0
    2108/     7B9 : 55 F9               	JMS LD_REG16P0_P2P3		; REG(P0)=P2P3 (ABS(REG(P0))/ABS(REG(P1)))
    2109/     7BB : 56 59               	JMS GET_SIGNFLAG_TOCARRY	; check the sign of the result
    2110/     7BD : 1A C3               	JCN NC, REG16_DIV_EXIT
    2111/     7BF :                     	;; REG(P0)=-REG(P0)
    2112/     7BF : 55 EB               	JMS COMPLEMENT_REG16P0
    2113/     7C1 : 55 CA               	JMS INC_REG16P0
    2114/     7C3 :                     REG16_DIV_EXIT:
    2115/     7C3 : 59 A5               	JMS POP_P1
    2116/     7C5 : 59 FC               	JMS POP_REG16P1
    2117/     7C7 :                     	
    2118/     7C7 : C0                  	BBL 0
    2119/     7C8 :                     
    2120/     7C8 :                     ;;;----------------------------------------------------------------------------
    2121/     7C8 :                     ;;; CMP_REG16P0_REG16P1
    2122/     7C8 :                     ;;; execute REG16(P0) - REG16(P1) and generate flag
    2123/     7C8 :                     ;;; output: ACC=1, CY=0 if REG16(P0) <  REG16(P1)
    2124/     7C8 :                     ;;; 	    ACC=0, CY=1 if REG16(P0) == REG16(P1)
    2125/     7C8 :                     ;;; 	    ACC=1, CY=1 if REG16(P0) >  REG16(P1)
    2126/     7C8 :                     ;;; destroy: P6, P7, R5
    2127/     7C8 :                     ;;;----------------------------------------------------------------------------
    2128/     7C8 :                     CMP_REG16P0_REG16P1:
    2129/     7C8 : A1                  	LD R1
    2130/     7C9 : BF                  	XCH R15			; save R1 to R15
    2131/     7CA : A3                  	LD R3
    2132/     7CB : BD                  	XCH R13			; save R3 to R13
    2133/     7CC : F0                  	CLB
    2134/     7CD : BC                  	XCH R12			; R12 = 0
    2135/     7CE : DC                  	LDM loop(4)
    2136/     7CF : BE                  	XCH R14			; R14=12, 13, 14, 15
    2137/     7D0 : FA                  	STC
    2138/     7D1 :                     REG16_CMP_LOOP:
    2139/     7D1 : F3                  	CMC
    2140/     7D2 : 21                  	SRC P0
    2141/     7D3 : E9                  	RDM
    2142/     7D4 : 23                  	SRC P1
    2143/     7D5 : E8                  	SBM
    2144/     7D6 : 61                  	INC R1
    2145/     7D7 : 63                  	INC R3
    2146/     7D8 : BB                  	XCH R11			; save ACC to R11 (exit with MSB)
    2147/     7D9 : AB                  	LD R11
    2148/     7DA : 14 DE               	JCN Z, REG16_CMP_NEXT
    2149/     7DC : D1                  	LDM 1
    2150/     7DD : BC                  	XCH R12			; set flag for REG(P0) != REG(P1)
    2151/     7DE :                     REG16_CMP_NEXT:
    2152/     7DE : 7E D1               	ISZ R14, REG16_CMP_LOOP
    2153/     7E0 : AB                  	LD R11
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 41 - 2023/03/12 16:43:50


    2154/     7E1 : F5                  	RAL
    2155/     7E2 : F3                  	CMC			; CY=~MSB
    2156/     7E3 :                     
    2157/     7E3 : AF                  	LD R15
    2158/     7E4 : B1                  	XCH R1			; restore R1
    2159/     7E5 : AD                  	LD R13
    2160/     7E6 : B3                  	XCH R3			; restore R3
    2161/     7E7 :                     
    2162/     7E7 : AC                  	LD R12
    2163/     7E8 : 14 EB               	JCN Z, REG16_CMP_EXIT0
    2164/     7EA : C1                  	BBL 1
    2165/     7EB :                     REG16_CMP_EXIT0:
    2166/     7EB : C0                  	BBL 0
    2167/     7EC :                     
    2168/     7EC :                     ;;;----------------------------------------------------------------------------
    2169/     7EC :                     ;;; PRINTSTR_PM12REG16P0_DELIM_P1(Delimiter is P1 and 00H)
    2170/     7EC :                     ;;; PRINTSTR_PM12REG16P0 (Delimiter is 0x00)
    2171/     7EC :                     ;;; Print a string 
    2172/     7EC :                     ;;; put a string on PM12(REG16(P0)) to serial output until the P1 or 00H
    2173/     7EC :                     ;;; REG(INDEX) is incremented to
    2174/     7EC :                     ;;; 	the end of the string    (if the last char == 00H)
    2175/     7EC :                     ;;; 	the end of the string +1 (if the last char != 00H)
    2176/     7EC :                     ;;; 
    2177/     7EC :                     ;;; destroy: P6, P7
    2178/     7EC :                     ;;;----------------------------------------------------------------------------
    2179/     7EC :                     PRINTSTR_PM12REG16P0:
    2180/     7EC : 59 73               	JMS PUSH_P2
    2181/     7EE : 59 5B               	JMS PUSH_P1
    2182/     7F0 : 22 00               	FIM P1, 00H
    2183/     7F2 : 47 F8               	JUN PRINTSTR_PM12REG16P0_XX
    2184/     7F4 :                     PRINTSTR_PM12REG16P0_DELIM_P1:
    2185/     7F4 : 59 73               	JMS PUSH_P2
    2186/     7F6 : 59 5B               	JMS PUSH_P1
    2187/     7F8 :                     PRINTSTR_PM12REG16P0_XX:
    2188/     7F8 : 59 43               	JMS PUSH_P0
    2189/     7FA : (MACRO)              	LD_P2_P1		; save the delimiter P1 to P2
    2189/     7FA : A2                                  LD R2
    2189/     7FB : B4                                  XCH R4
    2189/     7FC : A3                                  LD R3
    2189/     7FD : B5                                  XCH R5
    2190/     7FE :                     PRINTSTR_LOOP:
    2191/     7FE : 59 06               	JMS LD_P1_PM12REG16P0
    2192/     800 : 5D F5               	JMS ISZEROORNOT_P1
    2193/     802 : 14 0E               	JCN Z, PRINTSTR_EXIT
    2194/     804 : 5D DD               	JMS CMPEQ_P1P2
    2195/     806 : 14 0E               	JCN Z, PRINTSTR_EXIT
    2196/     808 : 5D 28               	JMS PUTCHAR_P1
    2197/     80A :                     	
    2198/     80A : 55 CA               	JMS INC_REG16P0
    2199/     80C : 47 FE               	JUN PRINTSTR_LOOP
    2200/     80E :                     PRINTSTR_EXIT:
    2201/     80E : 24 00               	FIM P2, 00H
    2202/     810 : 5D DD               	JMS CMPEQ_P1P2
    2203/     812 : 14 16               	JCN Z, PRINTSTR_EXIT_NOINCREMENT
    2204/     814 : 55 CA               	JMS INC_REG16P0		; pointer++ if the last char is not 00H
    2205/     816 :                     PRINTSTR_EXIT_NOINCREMENT:
    2206/     816 : 59 8B               	JMS POP_P0
    2207/     818 : 59 A5               	JMS POP_P1
    2208/     81A : 59 BF               	JMS POP_P2
    2209/     81C : C0                  	BBL 0
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 42 - 2023/03/12 16:43:50


    2210/     81D :                     
    2211/     81D :                     
    2212/     81D :                     ;;;----------------------------------------------------------------------------
    2213/     81D :                     ;;; PRINT_REG16P1
    2214/     81D :                     ;;; PRINT REG16(P1) in decimal format
    2215/     81D :                     ;;; destroy: P3, P4, P5, P6, P7
    2216/     81D :                     ;;;----------------------------------------------------------------------------
    2217/     81D :                     PRINT_REG16P1:
    2218/     81D :                     	; PUSH P0, REG(P1), P1, P2, and REG(RMND)
    2219/     81D : 59 43               	JMS PUSH_P0
    2220/     81F : 59 D9               	JMS PUSH_REG16P1
    2221/     821 : 59 5B               	JMS PUSH_P1
    2222/     823 : 59 73               	JMS PUSH_P2
    2223/     825 : (MACRO)              	LD_P0_P1		; P0 = P1, below here
    2223/     825 : A2                                  LD R2
    2223/     826 : B0                                  XCH R0
    2223/     827 : A3                                  LD R3
    2223/     828 : B1                                  XCH R1
    2224/     829 : 22 90               	FIM P1, REG16_RMND	; save last RMND before this PRINT
    2225/     82B : 59 D9               	JMS PUSH_REG16P1
    2226/     82D :                     
    2227/     82D : 2E 7C               	FIM P7, REG4_ZEROSUP	; set zero supress flag
    2228/     82F : D1                  	LDM 1
    2229/     830 : 2F                  	SRC P7
    2230/     831 : E0                  	WRM
    2231/     832 :                     	
    2232/     832 : 55 AE               	JMS GETSIGN_REG16P0_TOCARRY ; Print '-' if REG(P0) < 0
    2233/     834 : 1A 3E               	JCN NC, PRINT_REG16P1_POSITIVE
    2234/     836 : 55 EB               	JMS COMPLEMENT_REG16P0
    2235/     838 : 55 CA               	JMS INC_REG16P0
    2236/     83A : 22 2D               	FIM P1, '-'
    2237/     83C : 5D 28               	JMS PUTCHAR_P1
    2238/     83E :                     
    2239/     83E :                     PRINT_REG16P1_POSITIVE:	
    2240/     83E :                     	;; 10000'
    2241/     83E : 22 AC               	FIM P1, REG16_TMP_PRN	; REG16(TMP_PRN) = 10000
    2242/     840 : 24 27               	FIM P2, up(10000)
    2243/     842 : 26 10               	FIM P3, lo(10000)
    2244/     844 : 56 0E               	JMS LD_REG16P1_P2P3
    2245/     846 : 57 21               	JMS DIV_REG16P0_REG16P1	; REG(P0)=REG(P0)/REG(TMP_PRN)
    2246/     848 : 58 C3               	JMS PRINT_REG4P0_ZEROSUP
    2247/     84A :                     
    2248/     84A : 22 90               	FIM P1, REG16_RMND
    2249/     84C : 55 4F               	JMS LD_REG16P0_REG16P1	; REG(P0) = REG(RMND)
    2250/     84E :                     
    2251/     84E :                     	;; 1000'
    2252/     84E : 22 AC               	FIM P1, REG16_TMP_PRN	; REG16(TMP_PRN) = 1000
    2253/     850 : 24 03               	FIM P2, up(1000)
    2254/     852 : 26 E8               	FIM P3, lo(1000)
    2255/     854 : 56 0E               	JMS LD_REG16P1_P2P3
    2256/     856 :                     
    2257/     856 : 57 21               	JMS DIV_REG16P0_REG16P1	; REG(P0)=REG(P0)/REG(TMP_PRN)
    2258/     858 : 58 C3               	JMS PRINT_REG4P0_ZEROSUP
    2259/     85A :                     
    2260/     85A : 22 90               	FIM P1, REG16_RMND
    2261/     85C : 55 4F               	JMS LD_REG16P0_REG16P1	; REG(P0) = REG(RMND)
    2262/     85E :                     
    2263/     85E :                     	;; 100'
    2264/     85E : 22 AC               	FIM P1, REG16_TMP_PRN	; REG16(TMP_PRN) = 100
    2265/     860 : 24 00               	FIM P2, up(100)
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 43 - 2023/03/12 16:43:50


    2266/     862 : 26 64               	FIM P3, lo(100)
    2267/     864 : 56 0E               	JMS LD_REG16P1_P2P3
    2268/     866 :                     
    2269/     866 : 57 21               	JMS DIV_REG16P0_REG16P1	; REG(P0)=REG(P0)/REG(TMP_PRN)
    2270/     868 : 58 C3               	JMS PRINT_REG4P0_ZEROSUP
    2271/     86A :                     
    2272/     86A : 22 90               	FIM P1, REG16_RMND
    2273/     86C : 55 4F               	JMS LD_REG16P0_REG16P1	; REG(P0) = REG(RMND)
    2274/     86E :                     
    2275/     86E :                     	;; 10'
    2276/     86E : 22 AC               	FIM P1, REG16_TMP_PRN	; REG16(TMP_PRN) = 10
    2277/     870 : 24 00               	FIM P2, up(10)
    2278/     872 : 26 0A               	FIM P3, lo(10)
    2279/     874 : 56 0E               	JMS LD_REG16P1_P2P3
    2280/     876 :                     
    2281/     876 : 57 21               	JMS DIV_REG16P0_REG16P1	; REG(P0)=REG(P0)/REG(TMP_PRN)
    2282/     878 : 58 C3               	JMS PRINT_REG4P0_ZEROSUP
    2283/     87A :                     
    2284/     87A :                     	;; 1'
    2285/     87A : 20 90               	FIM P0, REG16_RMND
    2286/     87C : 21                  	SRC P0
    2287/     87D : E9                  	RDM
    2288/     87E : 5D 48               	JMS PRINT_ACC
    2289/     880 :                     	
    2290/     880 :                     	; POP P0, REG(P1), P1, P2, and REG(RMND)
    2291/     880 : 22 90               	FIM P1, REG16_RMND	; restore last RMND
    2292/     882 : 59 FC               	JMS POP_REG16P1
    2293/     884 : 59 BF               	JMS POP_P2
    2294/     886 : 59 A5               	JMS POP_P1
    2295/     888 : 59 FC               	JMS POP_REG16P1		; restore REG(P1)
    2296/     88A : 59 8B               	JMS POP_P0
    2297/     88C : C0                  	BBL 0
    2298/     88D :                     	
    2299/     88D :                     ;;;----------------------------------------------------------------------------
    2300/     88D :                     ;;; PRINTHEX_REG16P1
    2301/     88D :                     ;;; PRINT REG16(P0)
    2302/     88D :                     ;;; destroy: P6, P7
    2303/     88D :                     ;;;----------------------------------------------------------------------------
    2304/     88D :                     PRINTHEX_REG16P1:
    2305/     88D : 59 5B               	JMS PUSH_P1
    2306/     88F : 59 73               	JMS PUSH_P2
    2307/     891 : (MACRO)              	LD_P2_P3
    2307/     891 : A6                                  LD R6
    2307/     892 : B4                                  XCH R4
    2307/     893 : A7                                  LD R7
    2307/     894 : B5                                  XCH R5
    2308/     895 : 59 73               	JMS PUSH_P2
    2309/     897 :                     	
    2310/     897 : 56 23               	JMS LD_P2P3_REG16P1
    2311/     899 : A4                  	LD R4
    2312/     89A : 5D 48               	JMS PRINT_ACC		; print bit.FEDC
    2313/     89C : A5                  	LD R5
    2314/     89D : 5D 48               	JMS PRINT_ACC		; print bit.BA98
    2315/     89F : A6                  	LD R6
    2316/     8A0 : 5D 48               	JMS PRINT_ACC		; print bit.7654
    2317/     8A2 : A7                  	LD R7
    2318/     8A3 : 5D 48               	JMS PRINT_ACC		; print bit.3210
    2319/     8A5 :                     
    2320/     8A5 : 59 BF               	JMS POP_P2
    2321/     8A7 : (MACRO)              	LD_P3_P2
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 44 - 2023/03/12 16:43:50


    2321/     8A7 : A4                                  LD R4
    2321/     8A8 : B6                                  XCH R6
    2321/     8A9 : A5                                  LD R5
    2321/     8AA : B7                                  XCH R7
    2322/     8AB : 59 BF               	JMS POP_P2
    2323/     8AD : 59 A5               	JMS POP_P1
    2324/     8AF : C0                  	BBL 0
    2325/     8B0 :                     ;;;----------------------------------------------------------------------------
    2326/     8B0 :                     ;;; PRINTHEX_P1
    2327/     8B0 :                     ;;; Print 8bit register pair in HEX format
    2328/     8B0 :                     ;;; PRINT HEX
    2329/     8B0 :                     ;;; destroy: P6, P7
    2330/     8B0 :                     ;;;----------------------------------------------------------------------------
    2331/     8B0 :                     PRINTHEX_P1:
    2332/     8B0 : 59 43               	JMS PUSH_P0
    2333/     8B2 : 59 5B               	JMS PUSH_P1
    2334/     8B4 : (MACRO)              	LD_P0_P1
    2334/     8B4 : A2                                  LD R2
    2334/     8B5 : B0                                  XCH R0
    2334/     8B6 : A3                                  LD R3
    2334/     8B7 : B1                                  XCH R1
    2335/     8B8 : A0                  	LD R0
    2336/     8B9 : 5D 48               	JMS PRINT_ACC		; print upper 4bit
    2337/     8BB : A1                  	LD R1
    2338/     8BC : 5D 48               	JMS PRINT_ACC		; print lower 4bit
    2339/     8BE : 59 A5               	JMS POP_P1
    2340/     8C0 : 59 8B               	JMS POP_P0
    2341/     8C2 : C0                  	BBL 0
    2342/     8C3 :                     
    2343/     8C3 :                     ;;;----------------------------------------------------------------------------
    2344/     8C3 :                     ;;; PRINT_REG4P0_ZEROSUP:
    2345/     8C3 :                     ;;; PRINT REG4(P0)
    2346/     8C3 :                     ;;; if REG4(P0) !=0 then print it and clear REG(ZEROSUP) flag
    2347/     8C3 :                     ;;; else if REG4(ZEROSUP) == false then print (P0)
    2348/     8C3 :                     ;;; skip otherwise
    2349/     8C3 :                     ;;; destroy: P6, P7
    2350/     8C3 :                     ;;;----------------------------------------------------------------------------
    2351/     8C3 :                     PRINT_REG4P0_ZEROSUP:
    2352/     8C3 : 21                  	SRC P0
    2353/     8C4 : E9                  	RDM
    2354/     8C5 : 1C CE               	JCN ZN, PRINT_AND_CLEARFLAG 	; print if REG4(P0) != 0
    2355/     8C7 : 2E 7C               	FIM P7, REG4_ZEROSUP
    2356/     8C9 : 2F                  	SRC P7
    2357/     8CA : E9                  	RDM
    2358/     8CB : 14 CE               	JCN Z, PRINT_AND_CLEARFLAG 	; if flag == 0 then print
    2359/     8CD : C1                  	BBL 1				; skip print and return (flag=still 1)
    2360/     8CE :                     PRINT_AND_CLEARFLAG:
    2361/     8CE : 5D 48               	JMS PRINT_ACC
    2362/     8D0 : 2E 7C               	FIM P7, REG4_ZEROSUP
    2363/     8D2 : F0                  	CLB
    2364/     8D3 : 2F                  	SRC P7
    2365/     8D4 : E0                  	WRM				; clear the flag
    2366/     8D5 : C0                  	BBL 0
    2367/     8D6 :                     
    2368/     8D6 :                     ;;;----------------------------------------------------------------------------
    2369/     8D6 :                     ;;; Subroutines for program memory operation
    2370/     8D6 :                     ;;;----------------------------------------------------------------------------
    2371/     8D6 :                     ;;;---------------------------------------------------------------------------
    2372/     8D6 :                     ;;; PM_WRITE_P0_P1
    2373/     8D6 :                     ;;; Write to program memory located at Page 15 (0F00H-0FFFH)
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 45 - 2023/03/12 16:43:50


    2374/     8D6 :                     ;;; (0F00H+P0) = P1
    2375/     8D6 :                     ;;; input: P0, P1
    2376/     8D6 :                     ;;; output: none
    2377/     8D6 :                     ;;;---------------------------------------------------------------------------
    2378/     8D6 :                     PM_WRITE_P0_P1:
    2379/     8D6 : 21                  	SRC P0
    2380/     8D7 : A3                  	LD R3
    2381/     8D8 : E3                  	WPM			; write lower 4bit
    2382/     8D9 : A2                  	LD R2
    2383/     8DA : E3                  	WPM			; write higher 4bit
    2384/     8DB : C0                  	BBL 0
    2385/     8DC :                     
    2386/     8DC :                     ;;;---------------------------------------------------------------------------
    2387/     8DC :                     ;;; PM_WRITE_P6_P7
    2388/     8DC :                     ;;; Write to program memory located at Page 15 (0F00H-0FFFH)
    2389/     8DC :                     ;;; (0F00H+P6) = P7
    2390/     8DC :                     ;;; input: P6, P7
    2391/     8DC :                     ;;; output: none
    2392/     8DC :                     ;;;---------------------------------------------------------------------------
    2393/     8DC :                     PM_WRITE_P6_P7:
    2394/     8DC : 2D                  	SRC P6
    2395/     8DD : AF                  	LD R15
    2396/     8DE : E3                  	WPM			; write lower 4bit
    2397/     8DF : AE                  	LD R14
    2398/     8E0 : E3                  	WPM			; write higher 4bit
    2399/     8E1 : C0                  	BBL 0
    2400/     8E2 :                     
    2401/     8E2 :                     ;;;---------------------------------------------------------------------------
    2402/     8E2 :                     ;;; PM_INIT_BANK
    2403/     8E2 :                     ;;; initialization for program memory (RAM)
    2404/     8E2 :                     ;;; Write a subroutne code for reading memory
    2405/     8E2 :                     ;;; destroy: P6, P7
    2406/     8E2 :                     ;;;---------------------------------------------------------------------------
    2407/     8E2 :                     PM_INIT_BANK:	
    2408/     8E2 : 2C FE               	FIM P6, lo(PM_READ_P0_P1)
    2409/     8E4 : 2E 32               	FIM P7, 32H		; FIN P1
    2410/     8E6 : 58 DC               	JMS PM_WRITE_P6_P7
    2411/     8E8 : 6D                  	INC R13
    2412/     8E9 : 2E C0               	FIM P7, 0C0H		; BBL 0
    2413/     8EB : 58 DC               	JMS PM_WRITE_P6_P7
    2414/     8ED : C0                  	BBL 0
    2415/     8EE :                     
    2416/     8EE :                     ;;;---------------------------------------------------------------------------
    2417/     8EE :                     ;;; PM_SELECTPMB
    2418/     8EE :                     ;;; Write ACC to RAM port (BANK_PMSELECT, CHIP_PMSELECT)
    2419/     8EE :                     ;;; The bank selection port should be BANK_DEFAULT to omit the DCL instruction
    2420/     8EE :                     ;;; destroy: P7
    2421/     8EE :                     ;;;---------------------------------------------------------------------------
    2422/     8EE :                     PM_SELECTPMB:
    2423/     8EE : 2E 00                       FIM P7, CHIP_PMSELECT
    2424/     8F0 : 2F                          SRC P7
    2425/     8F1 : E1                          WMP
    2426/     8F2 : C0                  	BBL 0
    2427/     8F3 :                     
    2428/     8F3 :                     ;;;---------------------------------------------------------------------------
    2429/     8F3 :                     ;;; COMMAND_PMB
    2430/     8F3 :                     ;;; Set program memory bank
    2431/     8F3 :                     ;;;---------------------------------------------------------------------------
    2432/     8F3 :                     COMMAND_PMB:
    2433/     8F3 : 20 40               	FIM P0, lo(STR_BANK)	; print " BANK="
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 46 - 2023/03/12 16:43:50


    2434/     8F5 : 5E 00               	JMS PRINTSTR_P0
    2435/     8F7 : 5D 00               	JMS GETCHAR_P1
    2436/     8F9 : 5D 28               	JMS PUTCHAR_P1
    2437/     8FB : 5D B7               	JMS CTOI_P1
    2438/     8FD : A3                  	LD R3
    2439/     8FE : 58 EE               	JMS PM_SELECTPMB
    2440/     900 : 58 E2               	JMS PM_INIT_BANK
    2441/     902 : 5D 5C               	JMS PRINT_CRLF
    2442/     904 :                     
    2443/     904 : 40 1B               	JUN CMD_LOOP		; return to command loop
    2444/     906 :                     
    2445/     906 :                     ;;;---------------------------------------------------------------------------
    2446/     906 :                     ;;; PM12
    2447/     906 :                     ;;; Logical program memory with 12 bit address space
    2448/     906 :                     ;;; Phisical PM is 254byte(00H to 0FD)x16 bank memory
    2449/     906 :                     ;;; PM12 is a logical memory space (000H to FFFH) mapped to Phisical PM
    2450/     906 :                     ;;; FFEH-FFFH  in each bank is used for PM_READ_P0_P1(2 byte subroutine
    2451/     906 :                     ;;; to read the PM of the bank)
    2452/     906 :                     ;;; PM12 is a 000H-FDF flat space.
    2453/     906 :                     ;;; 
    2454/     906 :                     ;;;    PM12(BA98.7654.3210)
    2455/     906 :                     ;;;   -> PM(3210.7654.BA98) BANK=3210, ADD=7654BA98
    2456/     906 :                     ;;; 
    2457/     906 :                     ;;;    PM16(FEDC.BA98.7654.3210) (not yet implemented)
    2458/     906 :                     ;;;   -> PM(7654.3210.FEDC.BA98) BANK=BA98.7654 ADD=3210FEDC
    2459/     906 :                     ;;;---------------------------------------------------------------------------
    2460/     906 :                     ;;;---------------------------------------------------------------------------
    2461/     906 :                     ;;; LD_P1_PM12REG16P0
    2462/     906 :                     ;;; P1 = PM12(REG(P0))
    2463/     906 :                     ;;; destroy: P6, P7
    2464/     906 :                     ;;;---------------------------------------------------------------------------
    2465/     906 :                     LD_P1_PM12REG16P0:
    2466/     906 : (MACRO)              	LD_P6_P0		; P6 = P0
    2466/     906 : A0                                  LD R0
    2466/     907 : BC                                  XCH R12
    2466/     908 : A1                                  LD R1
    2466/     909 : BD                                  XCH R13
    2467/     90A : 2D                  	SRC P6
    2468/     90B : E9                  	RDM			; ACC=REG(P0).bit3210
    2469/     90C :                     
    2470/     90C : 2E 00                       FIM P7, CHIP_PMSELECT
    2471/     90E : 2F                          SRC P7
    2472/     90F : E1                          WMP			; set bank to REG(P0).bit3210
    2473/     910 :                     
    2474/     910 : 6D                  	INC R13
    2475/     911 : 2D                  	SRC P6
    2476/     912 : E9                  	RDM
    2477/     913 : B1                  	XCH R1			; R1=REG(P0).bit7654
    2478/     914 :                     	
    2479/     914 : 6D                  	INC R13	
    2480/     915 : 2D                  	SRC P6
    2481/     916 : E9                  	RDM
    2482/     917 : B0                  	XCH R0			; R0 = REG(P0).bitBA98
    2483/     918 :                     
    2484/     918 : 5F FE               	JMS PM_READ_P0_P1	; P1 = PM(REG(P0))
    2485/     91A :                     
    2486/     91A : AC                  	LD R12                  ; restore P0
    2487/     91B : B0                          XCH R0
    2488/     91C : AD                          LD R13
    2489/     91D :                     	;; 	CLC             ; can be omitted?
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 47 - 2023/03/12 16:43:50


    2490/     91D : F8                          DAC
    2491/     91E : F8                          DAC
    2492/     91F : B1                          XCH R1
    2493/     920 : C0                          BBL 0
    2494/     921 :                     
    2495/     921 :                     ;;;---------------------------------------------------------------------------
    2496/     921 :                     ;;; LD_PM12REG16P0_P1
    2497/     921 :                     ;;; PM12(REG(P0)) = P1
    2498/     921 :                     ;;; destroy: P7
    2499/     921 :                     ;;;---------------------------------------------------------------------------
    2500/     921 :                     LD_PM12REG16P0_P1:
    2501/     921 : 21                  	SRC P0
    2502/     922 : E9                  	RDM			; bit3210 of REG(P0)
    2503/     923 : 2E 00                       FIM P7, CHIP_PMSELECT
    2504/     925 : 2F                          SRC P7
    2505/     926 : E1                          WMP			; set bank to REG(P0).bit3210
    2506/     927 :                     
    2507/     927 :                     
    2508/     927 : 61                  	INC R1
    2509/     928 : 21                  	SRC P0
    2510/     929 : E9                  	RDM			; bit7654 of REG(P0)
    2511/     92A : BD                  	XCH R13			; R13 = REG(P0).bit7654
    2512/     92B :                     
    2513/     92B : 61                  	INC R1
    2514/     92C : 21                  	SRC P0
    2515/     92D : E9                  	RDM
    2516/     92E : BC                  	XCH R12			; R12 = REG(P0).bitBA98
    2517/     92F :                     	
    2518/     92F : 2D                  	SRC P6
    2519/     930 : A3                  	LD R3
    2520/     931 : E3                  	WPM
    2521/     932 : A2                  	LD R2
    2522/     933 : E3                  	WPM
    2523/     934 :                     	
    2524/     934 : A1                  	LD R1			; restore P0
    2525/     935 :                     	;; 	CLC             ; can be omitted?
    2526/     935 : F8                  	DAC
    2527/     936 : F8                  	DAC
    2528/     937 : B1                  	XCH R1
    2529/     938 : C0                  	BBL 0
    2530/     939 :                     
    2531/     939 :                     ;;;----------------------------------------------------------------------------
    2532/     939 :                     ;;; PUSH_P0, P1, P2, P3
    2533/     939 :                     ;;; POP_P0, P1, P2, P3
    2534/     939 :                     ;;; Push and Pop an 8bit register pair
    2535/     939 :                     ;;; Stack area is a 16x4bit ring buffer using one register in data RAM.
    2536/     939 :                     ;;; Stack pointer is status character 0 of the register.
    2537/     939 :                     ;;; destroy P7, P6
    2538/     939 :                     ;;;----------------------------------------------------------------------------
    2539/     939 :                     
    2540/     939 :                     ;;;----------------------------------------------------------------------------
    2541/     939 :                     PUSHP	macro ThisR0, ThisR1
    2542/     939 :                     	LDM 2
    2543/     939 :                     	XCH R12
    2544/     939 :                     	FIM P7, REG16_STACKPOINTER
    2545/     939 :                     	SRC P7
    2546/     939 :                     	RD1
    2547/     939 :                     	CLC
    2548/     939 :                     	SUB R12
    2549/     939 :                     	WR1			; sp.3210=sp.3210-2
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 48 - 2023/03/12 16:43:50


    2550/     939 :                     	XCH R15			; R15=new sp.3210(CHAR#)
    2551/     939 :                     	RD0
    2552/     939 :                     	JCN C, PUSH_NOBORROW_ThisR0_ThisR1	; check borrow of the last SUB R12
    2553/     939 :                     	DAC			; decriment upper 4bit
    2554/     939 :                     PUSH_NOBORROW_ThisR0_ThisR1:
    2555/     939 :                     	WR0			; sp.7654--
    2556/     939 :                     	XCH R14			; R14=new sp.7654(REG#)
    2557/     939 :                     
    2558/     939 :                     	SRC P7			;
    2559/     939 :                     	LD ThisR1		; lower 4bit
    2560/     939 :                     	WRM			; (sp)=ThisR1
    2561/     939 :                     	INC R15			; carry check is omitted
    2562/     939 :                     				; because the SP shoudld be even address
    2563/     939 :                     	SRC P7			;
    2564/     939 :                     	LD ThisR0		; upper 4bit
    2565/     939 :                     	WRM			; (sp+1)=ThisR0
    2566/     939 :                     	BBL 0
    2567/     939 :                     	endm
    2568/     939 :                     ;;;----------------------------------------------------------------------------
    2569/     939 :                     POPP	macro ThisR0, ThisR1
    2570/     939 :                     	FIM P7, REG16_STACKPOINTER
    2571/     939 :                     	SRC P7
    2572/     939 :                     	RD0			;
    2573/     939 :                     	XCH R14			; R14=sp.7654 (REG#)
    2574/     939 :                     	RD1			;
    2575/     939 :                     	XCH R15			; R15=sp.3210 (CHAR#)
    2576/     939 :                     	SRC P7			;
    2577/     939 :                     	RDM
    2578/     939 :                     	XCH ThisR1		; ThisR1=(sp)
    2579/     939 :                     	INC R15			; R15++
    2580/     939 :                     				; Carry check is omitted here because SP was even
    2581/     939 :                     	SRC P7			;
    2582/     939 :                     	RDM
    2583/     939 :                     	XCH ThisR0		; ThisR0=(sp+1)
    2584/     939 :                     
    2585/     939 :                     	FIM P6, REG16_STACKPOINTER
    2586/     939 :                     	SRC P6			;
    2587/     939 :                     	INC R15			; R15++
    2588/     939 :                     	LD R15
    2589/     939 :                     	WR1			; sp.lower=sp.lower+2
    2590/     939 :                     	JCN ZN, POP_NOCARRY_ThisR0_ThisR1
    2591/     939 :                     	INC R14
    2592/     939 :                     	LD R14
    2593/     939 :                     	WR0			; sp.upper=sp.upper+1
    2594/     939 :                     POP_NOCARRY_ThisR0_ThisR1:
    2595/     939 :                     	BBL 0
    2596/     939 :                     	endm
    2597/     939 :                     ;;;----------------------------------------------------------------------------
    2598/     939 :                     ;;; INIT_STACKPOINTER
    2599/     939 :                     ;;; Initialize Stack Pointer
    2600/     939 :                     ;;;----------------------------------------------------------------------------
    2601/     939 :                     INIT_STACKPOINTER:
    2602/     939 : 20 FC               	FIM P0, REG16_STACKPOINTER
    2603/     93B : 22 00               	FIM P1, INITVAL_STACKPOINTER
    2604/     93D : 21                  	SRC P0
    2605/     93E : A2                  	LD R2
    2606/     93F : E4                  	WR0
    2607/     940 : A3                  	LD R3
    2608/     941 : E5                  	WR1
    2609/     942 : C0                  	BBL 0
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 49 - 2023/03/12 16:43:50


    2610/     943 :                     
    2611/     943 :                     ;;;----------------------------------------------------------------------------
    2612/     943 :                     ;;; Generate real codes from macros
    2613/     943 :                     ;;;----------------------------------------------------------------------------
    2614/     943 : (MACRO)              PUSH_P0: PUSHP  R0, R1
    2614/     943 : D2                          LDM 2
    2614/     944 : BC                          XCH R12
    2614/     945 : 2E FC                       FIM P7, REG16_STACKPOINTER
    2614/     947 : 2F                          SRC P7
    2614/     948 : ED                          RD1
    2614/     949 : F1                          CLC
    2614/     94A : 9C                          SUB R12
    2614/     94B : E5                          WR1                     ; sp.3210=sp.3210-2
    2614/     94C : BF                          XCH R15                 ; R15=new sp.3210(CHAR#)
    2614/     94D : EC                          RD0
    2614/     94E : 12 51                       JCN C, PUSH_NOBORROW_R0_R1      ; check borrow of the last SUB R12
    2614/     950 : F8                          DAC                     ; decriment upper 4bit
    2614/     951 :                     PUSH_NOBORROW_R0_R1:
    2614/     951 : E4                          WR0                     ; sp.7654--
    2614/     952 : BE                          XCH R14                 ; R14=new sp.7654(REG#)
    2614/     953 :                     
    2614/     953 : 2F                          SRC P7                  ;
    2614/     954 : A1                          LD R1               ; lower 4bit
    2614/     955 : E0                          WRM                     ; (sp)=R1
    2614/     956 : 6F                          INC R15                 ; carry check is omitted
    2614/     957 :                                                     ; because the SP shoudld be even address
    2614/     957 : 2F                          SRC P7                  ;
    2614/     958 : A0                          LD R0               ; upper 4bit
    2614/     959 : E0                          WRM                     ; (sp+1)=R0
    2614/     95A : C0                          BBL 0
    2615/     95B : (MACRO)              PUSH_P1: PUSHP  R2, R3
    2615/     95B : D2                          LDM 2
    2615/     95C : BC                          XCH R12
    2615/     95D : 2E FC                       FIM P7, REG16_STACKPOINTER
    2615/     95F : 2F                          SRC P7
    2615/     960 : ED                          RD1
    2615/     961 : F1                          CLC
    2615/     962 : 9C                          SUB R12
    2615/     963 : E5                          WR1                     ; sp.3210=sp.3210-2
    2615/     964 : BF                          XCH R15                 ; R15=new sp.3210(CHAR#)
    2615/     965 : EC                          RD0
    2615/     966 : 12 69                       JCN C, PUSH_NOBORROW_R2_R3      ; check borrow of the last SUB R12
    2615/     968 : F8                          DAC                     ; decriment upper 4bit
    2615/     969 :                     PUSH_NOBORROW_R2_R3:
    2615/     969 : E4                          WR0                     ; sp.7654--
    2615/     96A : BE                          XCH R14                 ; R14=new sp.7654(REG#)
    2615/     96B :                     
    2615/     96B : 2F                          SRC P7                  ;
    2615/     96C : A3                          LD R3               ; lower 4bit
    2615/     96D : E0                          WRM                     ; (sp)=R3
    2615/     96E : 6F                          INC R15                 ; carry check is omitted
    2615/     96F :                                                     ; because the SP shoudld be even address
    2615/     96F : 2F                          SRC P7                  ;
    2615/     970 : A2                          LD R2               ; upper 4bit
    2615/     971 : E0                          WRM                     ; (sp+1)=R2
    2615/     972 : C0                          BBL 0
    2616/     973 : (MACRO)              PUSH_P2: PUSHP  R4, R5
    2616/     973 : D2                          LDM 2
    2616/     974 : BC                          XCH R12
    2616/     975 : 2E FC                       FIM P7, REG16_STACKPOINTER
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 50 - 2023/03/12 16:43:50


    2616/     977 : 2F                          SRC P7
    2616/     978 : ED                          RD1
    2616/     979 : F1                          CLC
    2616/     97A : 9C                          SUB R12
    2616/     97B : E5                          WR1                     ; sp.3210=sp.3210-2
    2616/     97C : BF                          XCH R15                 ; R15=new sp.3210(CHAR#)
    2616/     97D : EC                          RD0
    2616/     97E : 12 81                       JCN C, PUSH_NOBORROW_R4_R5      ; check borrow of the last SUB R12
    2616/     980 : F8                          DAC                     ; decriment upper 4bit
    2616/     981 :                     PUSH_NOBORROW_R4_R5:
    2616/     981 : E4                          WR0                     ; sp.7654--
    2616/     982 : BE                          XCH R14                 ; R14=new sp.7654(REG#)
    2616/     983 :                     
    2616/     983 : 2F                          SRC P7                  ;
    2616/     984 : A5                          LD R5               ; lower 4bit
    2616/     985 : E0                          WRM                     ; (sp)=R5
    2616/     986 : 6F                          INC R15                 ; carry check is omitted
    2616/     987 :                                                     ; because the SP shoudld be even address
    2616/     987 : 2F                          SRC P7                  ;
    2616/     988 : A4                          LD R4               ; upper 4bit
    2616/     989 : E0                          WRM                     ; (sp+1)=R4
    2616/     98A : C0                          BBL 0
    2617/     98B : (MACRO)              POP_P0: POPP R0, R1
    2617/     98B : 2E FC                       FIM P7, REG16_STACKPOINTER
    2617/     98D : 2F                          SRC P7
    2617/     98E : EC                          RD0                     ;
    2617/     98F : BE                          XCH R14                 ; R14=sp.7654 (REG#)
    2617/     990 : ED                          RD1                     ;
    2617/     991 : BF                          XCH R15                 ; R15=sp.3210 (CHAR#)
    2617/     992 : 2F                          SRC P7                  ;
    2617/     993 : E9                          RDM
    2617/     994 : B1                          XCH R1              ; R1=(sp)
    2617/     995 : 6F                          INC R15                 ; R15++
    2617/     996 :                                                     ; Carry check is omitted here because SP was even
    2617/     996 : 2F                          SRC P7                  ;
    2617/     997 : E9                          RDM
    2617/     998 : B0                          XCH R0              ; R0=(sp+1)
    2617/     999 :                     
    2617/     999 : 2C FC                       FIM P6, REG16_STACKPOINTER
    2617/     99B : 2D                          SRC P6                  ;
    2617/     99C : 6F                          INC R15                 ; R15++
    2617/     99D : AF                          LD R15
    2617/     99E : E5                          WR1                     ; sp.lower=sp.lower+2
    2617/     99F : 1C A4                       JCN ZN, POP_NOCARRY_R0_R1
    2617/     9A1 : 6E                          INC R14
    2617/     9A2 : AE                          LD R14
    2617/     9A3 : E4                          WR0                     ; sp.upper=sp.upper+1
    2617/     9A4 :                     POP_NOCARRY_R0_R1:
    2617/     9A4 : C0                          BBL 0
    2618/     9A5 : (MACRO)              POP_P1: POPP R2, R3
    2618/     9A5 : 2E FC                       FIM P7, REG16_STACKPOINTER
    2618/     9A7 : 2F                          SRC P7
    2618/     9A8 : EC                          RD0                     ;
    2618/     9A9 : BE                          XCH R14                 ; R14=sp.7654 (REG#)
    2618/     9AA : ED                          RD1                     ;
    2618/     9AB : BF                          XCH R15                 ; R15=sp.3210 (CHAR#)
    2618/     9AC : 2F                          SRC P7                  ;
    2618/     9AD : E9                          RDM
    2618/     9AE : B3                          XCH R3              ; R3=(sp)
    2618/     9AF : 6F                          INC R15                 ; R15++
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 51 - 2023/03/12 16:43:50


    2618/     9B0 :                                                     ; Carry check is omitted here because SP was even
    2618/     9B0 : 2F                          SRC P7                  ;
    2618/     9B1 : E9                          RDM
    2618/     9B2 : B2                          XCH R2              ; R2=(sp+1)
    2618/     9B3 :                     
    2618/     9B3 : 2C FC                       FIM P6, REG16_STACKPOINTER
    2618/     9B5 : 2D                          SRC P6                  ;
    2618/     9B6 : 6F                          INC R15                 ; R15++
    2618/     9B7 : AF                          LD R15
    2618/     9B8 : E5                          WR1                     ; sp.lower=sp.lower+2
    2618/     9B9 : 1C BE                       JCN ZN, POP_NOCARRY_R2_R3
    2618/     9BB : 6E                          INC R14
    2618/     9BC : AE                          LD R14
    2618/     9BD : E4                          WR0                     ; sp.upper=sp.upper+1
    2618/     9BE :                     POP_NOCARRY_R2_R3:
    2618/     9BE : C0                          BBL 0
    2619/     9BF : (MACRO)              POP_P2: POPP R4, R5
    2619/     9BF : 2E FC                       FIM P7, REG16_STACKPOINTER
    2619/     9C1 : 2F                          SRC P7
    2619/     9C2 : EC                          RD0                     ;
    2619/     9C3 : BE                          XCH R14                 ; R14=sp.7654 (REG#)
    2619/     9C4 : ED                          RD1                     ;
    2619/     9C5 : BF                          XCH R15                 ; R15=sp.3210 (CHAR#)
    2619/     9C6 : 2F                          SRC P7                  ;
    2619/     9C7 : E9                          RDM
    2619/     9C8 : B5                          XCH R5              ; R5=(sp)
    2619/     9C9 : 6F                          INC R15                 ; R15++
    2619/     9CA :                                                     ; Carry check is omitted here because SP was even
    2619/     9CA : 2F                          SRC P7                  ;
    2619/     9CB : E9                          RDM
    2619/     9CC : B4                          XCH R4              ; R4=(sp+1)
    2619/     9CD :                     
    2619/     9CD : 2C FC                       FIM P6, REG16_STACKPOINTER
    2619/     9CF : 2D                          SRC P6                  ;
    2619/     9D0 : 6F                          INC R15                 ; R15++
    2619/     9D1 : AF                          LD R15
    2619/     9D2 : E5                          WR1                     ; sp.lower=sp.lower+2
    2619/     9D3 : 1C D8                       JCN ZN, POP_NOCARRY_R4_R5
    2619/     9D5 : 6E                          INC R14
    2619/     9D6 : AE                          LD R14
    2619/     9D7 : E4                          WR0                     ; sp.upper=sp.upper+1
    2619/     9D8 :                     POP_NOCARRY_R4_R5:
    2619/     9D8 : C0                          BBL 0
    2620/     9D9 :                     
    2621/     9D9 :                     ;;;----------------------------------------------------------------------------
    2622/     9D9 :                     ;;; PUSH_REG16P1
    2623/     9D9 :                     ;;; POP_REG16P1
    2624/     9D9 :                     ;;; Push and Pop an REG16 register REG16(P1)
    2625/     9D9 :                     ;;; Stack area is registers in data RAM.
    2626/     9D9 :                     ;;; Stack pointer is status character 0 (REG#) and 1 (CHAR#) of
    2627/     9D9 :                     ;;; the REG16_STACKPOINTER
    2628/     9D9 :                     ;;; destroy: P7, P6
    2629/     9D9 :                     ;;;----------------------------------------------------------------------------
    2630/     9D9 :                     PUSH_REG16P1:
    2631/     9D9 : A3                  	LD R3
    2632/     9DA : BD                  	XCH R13			; save R3
    2633/     9DB :                     
    2634/     9DB : D4                  	LDM 4
    2635/     9DC : BC                  	XCH R12
    2636/     9DD : 2E FC               	FIM P7, REG16_STACKPOINTER
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 52 - 2023/03/12 16:43:50


    2637/     9DF : 2F                  	SRC P7
    2638/     9E0 : ED                  	RD1
    2639/     9E1 : F1                  	CLC
    2640/     9E2 : 9C                  	SUB R12
    2641/     9E3 : E5                  	WR1			; sp.3210=sp.3210-4
    2642/     9E4 : BF                  	XCH R15			; R15=new sp.3210(CHAR#)
    2643/     9E5 : EC                  	RD0			; 
    2644/     9E6 : 12 E9               	JCN C, PUSH_REG16P1_NOBORROW ; check borrow of the last SUB R12
    2645/     9E8 : F8                  	DAC			; decriment upper 4bit
    2646/     9E9 :                     PUSH_REG16P1_NOBORROW:
    2647/     9E9 : E4                  	WR0			; sp.7654--
    2648/     9EA : BE                  	XCH R14			; R14=new sp.7654(REG#)
    2649/     9EB :                     	
    2650/     9EB : DC                  	LDM loop(4)
    2651/     9EC : BC                  	XCH R12
    2652/     9ED :                     PUSH_REG16P1_LOOP:
    2653/     9ED : 23                  	SRC P1
    2654/     9EE : E9                  	RDM
    2655/     9EF : 2F                  	SRC P7
    2656/     9F0 : E0                  	WRM			; (R15)=REG(P1)
    2657/     9F1 : 6F                  	INC R15
    2658/     9F2 : AF                  	LD R15
    2659/     9F3 : 1C F6               	JCN ZN, PUSH_REG16P1_NOINCUPPER
    2660/     9F5 : 6E                  	INC R14			; increment REG#
    2661/     9F6 :                     PUSH_REG16P1_NOINCUPPER:
    2662/     9F6 : 63                  	INC R3
    2663/     9F7 : 7C ED               	ISZ R12, PUSH_REG16P1_LOOP
    2664/     9F9 :                     
    2665/     9F9 : AD                  	LD R13
    2666/     9FA : B3                  	XCH R3			; restore R3
    2667/     9FB : C0                  	BBL 0
    2668/     9FC :                     ;;;----------------------------------------------------------------------------
    2669/     9FC :                     POP_REG16P1:
    2670/     9FC : A3                  	LD R3
    2671/     9FD : BD                  	XCH R13			; save R3
    2672/     9FE :                     
    2673/     9FE : 2E FC               	FIM P7, REG16_STACKPOINTER
    2674/     A00 : 2F                  	SRC P7
    2675/     A01 : EC                  	RD0			;
    2676/     A02 : BE                  	XCH R14			; R14=sp.7654 (REG#)
    2677/     A03 : ED                  	RD1			;
    2678/     A04 : BF                  	XCH R15			; R15=sp.3210 (CHAR#)
    2679/     A05 : DC                  	LDM loop(4)
    2680/     A06 : BC                  	XCH R12
    2681/     A07 :                     POP_REG16P1_LOOP:
    2682/     A07 : 2F                  	SRC P7
    2683/     A08 : E9                  	RDM
    2684/     A09 : 23                  	SRC P1
    2685/     A0A : E0                  	WRM			; REG(P1)=(R15)
    2686/     A0B : 6F                  	INC R15
    2687/     A0C : AF                  	LD R15
    2688/     A0D : 1C 10               	JCN ZN, POP_REG16P1_NOCARRY
    2689/     A0F : 6E                  	INC R14			; increment REG#
    2690/     A10 :                     POP_REG16P1_NOCARRY:
    2691/     A10 : 63                  	INC R3
    2692/     A11 : 7C 07               	ISZ R12, POP_REG16P1_LOOP
    2693/     A13 :                     
    2694/     A13 : AD                  	LD R13
    2695/     A14 : B3                  	XCH R3			; restore R3
    2696/     A15 :                     
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 53 - 2023/03/12 16:43:50


    2697/     A15 : 2C FC               	FIM P6, REG16_STACKPOINTER
    2698/     A17 : 2D                  	SRC P6 			; write new sp (old sp+4)
    2699/     A18 : AE                  	LD R14
    2700/     A19 : E4                  	WR0
    2701/     A1A : AF                  	LD R15
    2702/     A1B : E5                  	WR1
    2703/     A1C :                     
    2704/     A1C : C0                  	BBL 0
    2705/     A1D :                     
    2706/     A1D :                     ;;;----------------------------------------------------------------------------
    2707/     A1D :                     ;;; GETLINE_PM12REG16P0
    2708/     A1D :                     ;;; Get line from serial input and store to PM12(REG(P0))
    2709/     A1D :                     ;;; The value of REG(P0) does not change
    2710/     A1D :                     ;;;----------------------------------------------------------------------------
    2711/     A1D :                     GETLINE_PM12REG16P0:
    2712/     A1D : 59 43               	JMS PUSH_P0
    2713/     A1F : 59 5B               	JMS PUSH_P1
    2714/     A21 :                     
    2715/     A21 : 22 A0               	FIM P1, REG16_TMP
    2716/     A23 : 55 62               	JMS LD_REG16P1_REG16P0	; REG(TMP)=REG(INDEX)
    2717/     A25 :                     
    2718/     A25 :                     GETLINE_LOOP:
    2719/     A25 : 5D 00               	JMS GETCHAR_P1		; P1 = getchar()
    2720/     A27 :                     
    2721/     A27 : 5C EF               	JMS ISCRLF_P1
    2722/     A29 : 14 31               	JCN Z, GETLINE_L1
    2723/     A2B : 5D 69               	JMS PRINT_CR
    2724/     A2D : 5D 6D               	JMS PRINT_LF
    2725/     A2F : 4A 53               	JUN GETLINE_EXIT
    2726/     A31 :                     GETLINE_L1:
    2727/     A31 : 2E 08               	FIM P7, 08H		; backspace
    2728/     A33 : 5D D0               	JMS CMP_P1P7
    2729/     A35 : 1C 4B               	JCN ZN, GETLINE_INSERTCHAR
    2730/     A37 :                     
    2731/     A37 : 22 A0               	FIM P1, REG16_TMP
    2732/     A39 : 57 C8               	JMS CMP_REG16P0_REG16P1
    2733/     A3B : 1C 3F               	JCN ZN, GETLINE_BS	; do BS if REG(P0)!=REG(TMP)
    2734/     A3D : 4A 25               	JUN GETLINE_LOOP	; ignore BS
    2735/     A3F :                     GETLINE_BS:		; delete a character on the cursor
    2736/     A3F : 55 DA               	JMS DEC_REG16P0		; REG(P0)--
    2737/     A41 :                     GETLINE_L1_NEXT:		; delete a character on the cursor
    2738/     A41 : 22 08               	FIM P1, 08H
    2739/     A43 : 5D 28               	JMS PUTCHAR_P1		; put backspace
    2740/     A45 : 5D 53               	JMS PRINT_SPC		; put ' '
    2741/     A47 : 5D 28               	JMS PUTCHAR_P1		; put backspace
    2742/     A49 :                     
    2743/     A49 : 4A 25               	JUN GETLINE_LOOP
    2744/     A4B :                     GETLINE_INSERTCHAR:
    2745/     A4B : 5D 28               	JMS PUTCHAR_P1
    2746/     A4D : 59 21               	JMS LD_PM12REG16P0_P1
    2747/     A4F : 55 CA               	JMS INC_REG16P0		; *REG(P0)++ = P1
    2748/     A51 :                     
    2749/     A51 : 4A 25               	JUN GETLINE_LOOP
    2750/     A53 :                     GETLINE_EXIT:
    2751/     A53 : 22 00               	FIM P1, 00H
    2752/     A55 : 59 21               	JMS LD_PM12REG16P0_P1 	; write NULL on the end of line buffer
    2753/     A57 : 55 CA               	JMS INC_REG16P0
    2754/     A59 : 59 21               	JMS LD_PM12REG16P0_P1 	; write extra NULL to prevent buffer overrun
    2755/     A5B :                     
    2756/     A5B : 22 A0               	FIM P1, REG16_TMP
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 54 - 2023/03/12 16:43:50


    2757/     A5D : 55 4F               	JMS LD_REG16P0_REG16P1	; restore REG(INDEX)
    2758/     A5F : 59 A5               	JMS POP_P1		; restore P1
    2759/     A61 : 59 8B               	JMS POP_P0		; restore P0
    2760/     A63 : C0                  	BBL 0
    2761/     A64 :                     
    2762/     A64 :                     ;;;----------------------------------------------------------------------------
    2763/     A64 :                     ;;; GETNUMBER_PM12REG16P0_REG16P1
    2764/     A64 :                     ;;; Read a decimal or hexadecimal number in the string and store to register
    2765/     A64 :                     ;;; Read string from PM12(REG16(P0)) and set a number to REG16(P1)
    2766/     A64 :                     ;;; REG16(P0) is incremented to the character which is not a number.
    2767/     A64 :                     ;;; Hexadecimal number begins with 0 (ex. 0A123).
    2768/     A64 :                     ;;; destroy: P7, P6, P2, P3
    2769/     A64 :                     ;;; TMP: result
    2770/     A64 :                     ;;; TMP2: input char buffer
    2771/     A64 :                     ;;; TMP3: working for multiply by 10
    2772/     A64 :                     ;;;----------------------------------------------------------------------------
    2773/     A64 :                     GETNUMBER_PM12REG16P0_REG16P1:
    2774/     A64 : 59 43               	JMS PUSH_P0
    2775/     A66 : 59 5B               	JMS PUSH_P1
    2776/     A68 : (MACRO)              	LD_P2_P0		; P0 is saved to P2
    2776/     A68 : A0                                  LD R0
    2776/     A69 : B4                                  XCH R4
    2776/     A6A : A1                                  LD R1
    2776/     A6B : B5                                  XCH R5
    2777/     A6C :                     
    2778/     A6C : (MACRO)              	LD_P0_P1
    2778/     A6C : A2                                  LD R2
    2778/     A6D : B0                                  XCH R0
    2778/     A6E : A3                                  LD R3
    2778/     A6F : B1                                  XCH R1
    2779/     A70 : 55 42               	JMS CLEAR_REG16P0	; REG(P1) = 0
    2780/     A72 :                     
    2781/     A72 : 20 A0               	FIM P0, REG16_TMP
    2782/     A74 : 55 42               	JMS CLEAR_REG16P0	; REG(TMP) = 0 register for the result
    2783/     A76 :                     
    2784/     A76 : (MACRO)              	LD_P0_P2		; restore P0
    2784/     A76 : A4                                  LD R4
    2784/     A77 : B0                                  XCH R0
    2784/     A78 : A5                                  LD R5
    2784/     A79 : B1                                  XCH R1
    2785/     A7A : 59 06               	JMS LD_P1_PM12REG16P0	; P1 = PM12(REG16(P0))
    2786/     A7C : 2E 30               	FIM P7, '0'
    2787/     A7E : 5D D0               	JMS CMP_P1P7
    2788/     A80 : 1C 84               	JCN ZN, GETNUMBER_LOOP
    2789/     A82 : 4A BF               	JUN GETHEXNUMBER	; start with '0' then get hex number
    2790/     A84 :                     GETNUMBER_LOOP:
    2791/     A84 : 5D B7               	JMS CTOI_P1
    2792/     A86 :                     
    2793/     A86 : 20 A4               	FIM P0, REG16_TMP2
    2794/     A88 : 56 38               	JMS LD_REG16P0_8BIT_P1       ; REG(TEMP2) = P1
    2795/     A8A :                     
    2796/     A8A : 20 A0               	FIM P0, REG16_TMP
    2797/     A8C : 22 A0               	FIM P1, REG16_TMP
    2798/     A8E : 55 B9               	JMS ISZEROORNOT_REG16P1
    2799/     A90 : 14 9E               	JCN Z, GETNUMBER_SKIP_MUL10
    2800/     A92 :                     	;; REG(TMP) *= 10
    2801/     A92 : 22 A8               	FIM P1, REG16_TMP3
    2802/     A94 : 55 62               	JMS LD_REG16P1_REG16P0	; REG(TMP3) = REG(TMP)
    2803/     A96 : 56 8A               	JMS MUL2_REG16P0	; REG(TMP) *= 2
    2804/     A98 : 56 8A               	JMS MUL2_REG16P0	; REG(TMP) *= 2
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 55 - 2023/03/12 16:43:50


    2805/     A9A : 56 C0               	JMS ADD_REG16P0_REG16P1	; REG(TMP) += REG(TMP3)
    2806/     A9C : 56 8A               	JMS MUL2_REG16P0	; REG(TMP) *= 2
    2807/     A9E :                     GETNUMBER_SKIP_MUL10:	
    2808/     A9E : 22 A4               	FIM P1, REG16_TMP2
    2809/     AA0 : 56 C0               	JMS ADD_REG16P0_REG16P1	; REG(TMP) = REG(TMP)*10 + REG(TMP2)
    2810/     AA2 :                     
    2811/     AA2 : (MACRO)              	LD_P0_P2		; restore P0
    2811/     AA2 : A4                                  LD R4
    2811/     AA3 : B0                                  XCH R0
    2811/     AA4 : A5                                  LD R5
    2811/     AA5 : B1                                  XCH R1
    2812/     AA6 : 55 CA               	JMS INC_REG16P0		; REG(P0)++
    2813/     AA8 : 59 06               	JMS LD_P1_PM12REG16P0	; P1 = PM12(REG16(P0))
    2814/     AAA : 5D 8C               	JMS ISNUM_P1
    2815/     AAC : 14 B0               	JCN Z, GETNUMBER_EXIT
    2816/     AAE : 4A 84               	JUN GETNUMBER_LOOP
    2817/     AB0 :                     GETNUMBER_EXIT:
    2818/     AB0 : 59 A5               	JMS POP_P1
    2819/     AB2 : 20 A0               	FIM P0, REG16_TMP
    2820/     AB4 : 55 62               	JMS LD_REG16P1_REG16P0	; REG(P1) = REG(TMP)
    2821/     AB6 : 59 8B               	JMS POP_P0
    2822/     AB8 : C0                   	BBL 0
    2823/     AB9 :                     GETHEX_EXIT:
    2824/     AB9 : 20 A0               	FIM P0, REG16_TMP
    2825/     ABB : 55 F9               	JMS LD_REG16P0_P2P3
    2826/     ABD : 4A B0               	JUN GETNUMBER_EXIT
    2827/     ABF :                     GETHEXNUMBER:
    2828/     ABF : 24 00               	FIM P2, 00H
    2829/     AC1 : 26 00               	FIM P3, 00H
    2830/     AC3 :                     GETHEX_LOOP:
    2831/     AC3 : 55 CA               	JMS INC_REG16P0		; REG(P0)++
    2832/     AC5 : 59 06               	JMS LD_P1_PM12REG16P0	; P1 = PM12(REG16(P0))
    2833/     AC7 : 50 A6               	JMS ISHEX_P1
    2834/     AC9 : 14 B9               	JCN Z, GETHEX_EXIT	; not a hex number then exit
    2835/     ACB : 5D B7               	JMS CTOI_P1
    2836/     ACD : 56 F5               	JMS MUL16_P2P3		; R4R5R6R7 *= 16
    2837/     ACF : A3                  	LD R3
    2838/     AD0 : B7                  	XCH R7			; R7=R3
    2839/     AD1 : 4A C3               	JUN GETHEX_LOOP
    2840/     AD3 :                     	
    2841/     AD3 :                     ;;; 	JUN RETURN_P2 ; for another implementation
    2842/     AD3 :                     
    2843/     AD3 :                     ;;;----------------------------------------------------------------------------
    2844/     AD3 :                     ;;; Routines for monitor program command to read/write logical memory
    2845/     AD3 :                     ;;;----------------------------------------------------------------------------
    2846/     AD3 :                     COMMAND_LMR:
    2847/     AD3 : 20 4E               	FIM P0, lo(STR_ADR)
    2848/     AD5 : 5E 00               	JMS PRINTSTR_P0
    2849/     AD7 :                     
    2850/     AD7 :                     	;; input 2 hexdigits to REG16(TMP)
    2851/     AD7 : F0                  	CLB
    2852/     AD8 : B4                  	XCH R4
    2853/     AD9 : 5D 00               	JMS GETCHAR_P1
    2854/     ADB : 5D 28               	JMS PUTCHAR_P1
    2855/     ADD : 5D B7               	JMS CTOI_P1
    2856/     ADF : A3                  	LD R3
    2857/     AE0 : B5                  	XCH R5
    2858/     AE1 : 5D 00               	JMS GETCHAR_P1
    2859/     AE3 : 5D 28               	JMS PUTCHAR_P1
    2860/     AE5 : 5D B7               	JMS CTOI_P1
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 56 - 2023/03/12 16:43:50


    2861/     AE7 : A3                  	LD R3
    2862/     AE8 : B6                  	XCH R6
    2863/     AE9 : F0                  	CLB
    2864/     AEA : B7                  	XCH R7
    2865/     AEB : 22 A0               	FIM P1, REG16_TMP
    2866/     AED : 56 0E               	JMS LD_REG16P1_P2P3
    2867/     AEF :                     
    2868/     AEF :                     	;; input 1 hexdigits to R11
    2869/     AEF : 5D 00               	JMS GETCHAR_P1
    2870/     AF1 : 5D 28               	JMS PUTCHAR_P1
    2871/     AF3 : 5D B7               	JMS CTOI_P1
    2872/     AF5 : A3                  	LD R3
    2873/     AF6 : F4                  	CMA			;R11=15-R3 for ISZ loop(R3+1)
    2874/     AF7 : BB                  	XCH R11
    2875/     AF8 : 00                  	NOP
    2876/     AF9 : 00                  	NOP
    2877/     AFA : 00                  	NOP
    2878/     AFB : 00                  	NOP
    2879/     AFC : 00                  	NOP
    2880/     AFD : 00                  	NOP
    2881/     AFE : 00                  	NOP
    2882/     AFF : 00                  	NOP
    2883/     B00 :                     COMMAND_LMR_VLOOP:
    2884/     B00 : 5D 5C               	JMS PRINT_CRLF
    2885/     B02 : 22 A0               	FIM P1, REG16_TMP
    2886/     B04 : 58 8D               	JMS PRINTHEX_REG16P1
    2887/     B06 : 22 3A               	FIM P1, ':'
    2888/     B08 : 5D 28               	JMS PUTCHAR_P1
    2889/     B0A :                     
    2890/     B0A : D0                  	LDM 0
    2891/     B0B : BA                  	XCH R10
    2892/     B0C :                     COMMAND_LMR_HLOOP:
    2893/     B0C : 20 A0               	FIM P0, REG16_TMP
    2894/     B0E : 59 06               	JMS LD_P1_PM12REG16P0
    2895/     B10 : 58 B0               	JMS PRINTHEX_P1
    2896/     B12 : 55 CA               	JMS INC_REG16P0
    2897/     B14 : 7A 0C               	ISZ R10, COMMAND_LMR_HLOOP
    2898/     B16 : 7B 00               	ISZ R11, COMMAND_LMR_VLOOP
    2899/     B18 :                     
    2900/     B18 : 5D 5C               	JMS PRINT_CRLF
    2901/     B1A : 40 1B               	JUN CMD_LOOP
    2902/     B1C :                     	
    2903/     B1C :                     COMMAND_LMW:
    2904/     B1C : 20 4E               	FIM P0, lo(STR_ADR)
    2905/     B1E : 5E 00               	JMS PRINTSTR_P0
    2906/     B20 :                     
    2907/     B20 :                     	;; input 3 hexdigits to REG16(TMP)
    2908/     B20 : F0                  	CLB
    2909/     B21 : B4                  	XCH R4
    2910/     B22 : 5D 00               	JMS GETCHAR_P1
    2911/     B24 : 5D 28               	JMS PUTCHAR_P1
    2912/     B26 : 5D B7               	JMS CTOI_P1
    2913/     B28 : A3                  	LD R3
    2914/     B29 : B5                  	XCH R5
    2915/     B2A : 5D 00               	JMS GETCHAR_P1
    2916/     B2C : 5D 28               	JMS PUTCHAR_P1
    2917/     B2E : 5D B7               	JMS CTOI_P1
    2918/     B30 : A3                  	LD R3
    2919/     B31 : B6                  	XCH R6
    2920/     B32 : 5D 00               	JMS GETCHAR_P1
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 57 - 2023/03/12 16:43:50


    2921/     B34 : 5D 28               	JMS PUTCHAR_P1
    2922/     B36 : 5D B7               	JMS CTOI_P1
    2923/     B38 : A3                  	LD R3
    2924/     B39 : B7                  	XCH R7
    2925/     B3A : 22 A0               	FIM P1, REG16_TMP
    2926/     B3C : 56 0E               	JMS LD_REG16P1_P2P3
    2927/     B3E :                     
    2928/     B3E :                     COMMAND_LMW_LOOP:
    2929/     B3E : 5D 5C               	JMS PRINT_CRLF
    2930/     B40 : 22 A0               	FIM P1, REG16_TMP
    2931/     B42 : 58 8D               	JMS PRINTHEX_REG16P1
    2932/     B44 : 22 3A               	FIM P1, ':'
    2933/     B46 : 5D 28               	JMS PUTCHAR_P1
    2934/     B48 :                     
    2935/     B48 : 5D 00               	JMS GETCHAR_P1
    2936/     B4A : 5C EF               	JMS ISCRLF_P1
    2937/     B4C : 1C 64               	JCN ZN, COMMAND_LMW_EXIT
    2938/     B4E : 5D 28               	JMS PUTCHAR_P1
    2939/     B50 : 5D B7               	JMS CTOI_P1
    2940/     B52 : A3                  	LD R3
    2941/     B53 : B4                  	XCH R4
    2942/     B54 : 5D 00               	JMS GETCHAR_P1
    2943/     B56 : 5D 28               	JMS PUTCHAR_P1
    2944/     B58 : 5D B7               	JMS CTOI_P1
    2945/     B5A : A4                  	LD R4
    2946/     B5B : B2                  	XCH R2
    2947/     B5C : 20 A0               	FIM P0, REG16_TMP
    2948/     B5E : 59 21               	JMS LD_PM12REG16P0_P1
    2949/     B60 : 55 CA               	JMS INC_REG16P0
    2950/     B62 :                     
    2951/     B62 : 4B 3E               	JUN COMMAND_LMW_LOOP
    2952/     B64 :                     COMMAND_LMW_EXIT:
    2953/     B64 : 5D 5C               	JMS PRINT_CRLF
    2954/     B66 : 40 1B               	JUN CMD_LOOP
    2955/     B68 :                     
    2956/     BD0 :                     	org 0BD0H
    2957/     BD0 :                     ;;;----------------------------------------------------------------------------
    2958/     BD0 :                     ;;; RETURN_P2
    2959/     BD0 :                     ;;; Return to the address refering jump table
    2960/     BD0 :                     ;;;----------------------------------------------------------------------------
    2961/     BD0 :                     RETURN_P2:
    2962/     BD0 : A5                  	LD R5
    2963/     BD1 : 1C DC               	JCN ZN, RETURN_P2_OK
    2964/     BD3 : A4                  	LD R4
    2965/     BD4 : 1C DC               	JCN ZN, RETURN_P2_OK
    2966/     BD6 : 20 78               	FIM P0, REG8_ERROR
    2967/     BD8 : 22 B0               	FIM P1, ERROR_RETURN_P2_IS_00
    2968/     BDA : 41 16               	JUN VTL_START		; exit (for debug)
    2969/     BDC :                     RETURN_P2_OK:
    2970/     BDC : 35                  	JIN P2			; Jump to Return Table
    2971/     BDD :                     
    2972/     BDD :                     RETURN_EXEC_R1:
    2973/     BDD : 42 C7               	JUN EXEC_R1
    2974/     BDF :                     RETURN_EVAL_R1:	
    2975/     BDF : 43 AE               	JUN EVAL_R1
    2976/     BE1 :                     RETURN_EVAL_R2:	
    2977/     BE1 : 43 D6               	JUN EVAL_R2
    2978/     BE3 :                     RETURN_GETFACTOR_R1:
    2979/     BE3 : 44 66               	JUN GETFACTOR_R1
    2980/     BE5 :                     RETURN_GETFACTOR_R2:
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 58 - 2023/03/12 16:43:50


    2981/     BE5 : 44 78               	JUN GETFACTOR_R2
    2982/     BE7 :                     RETURN_PRINT_R1:
    2983/     BE7 : 43 5C               	JUN PRINT_R1
    2984/     BE9 :                     RETURN_GETFACTOR_L9_R1:	
    2985/     BE9 : 44 FC               	JUN GETFACTOR_L9_R1
    2986/     BEB :                     	
    2987/     BEB :                     ;;;---------------------------------------------------------------------------
    2988/     BEB :                     ;;; Monitor commands located in page 0C00H
    2989/     BEB :                     ;;;---------------------------------------------------------------------------
    2990/     C00 :                     	org 0C00H
    2991/     C00 :                     	
    2992/     C00 :                     ;;;---------------------------------------------------------------------------
    2993/     C00 :                     ;;; COMMAND_G
    2994/     C00 :                     ;;; Go to Top of Program memory PM_RAM_START(0x0F00)
    2995/     C00 :                     ;;;---------------------------------------------------------------------------
    2996/     C00 :                     COMMAND_G:
    2997/     C00 : 5D 5C               	JMS PRINT_CRLF
    2998/     C02 : 5F 00               	JMS PM_RAM_START
    2999/     C04 : 40 1B               	JUN CMD_LOOP		; return to command loop
    3000/     C06 :                     
    3001/     C06 :                     ;;;---------------------------------------------------------------------------
    3002/     C06 :                     ;;; COMMAND_R
    3003/     C06 :                     ;;; Read Data RAM
    3004/     C06 :                     ;;; input:
    3005/     C06 :                     ;;; 	R10: #bank
    3006/     C06 :                     ;;; 	R11: #chip (D3.D2.0.0)
    3007/     C06 :                     ;;; working memory:
    3008/     C06 :                     ;;;     P0(R0R1): working for PRINTSTR_P0
    3009/     C06 :                     ;;;     P1(R2R3): working for PUTCHAR_P1, PRINT_ACC
    3010/     C06 :                     ;;;     R4: loop counter for #REG (0.0.D1.D0)
    3011/     C06 :                     ;;;     R5: working for input
    3012/     C06 :                     ;;;     R6: working for SCR (R6=R11+R4)
    3013/     C06 :                     ;;;     R7: working for SCR #CHARACTER (D3.D2.D1.D0)@X3 (loop counter)
    3014/     C06 :                     ;;;         SCR R6R7
    3015/     C06 :                     ;;; 	R11: #CHIP (D3.D2.0.0)@X2
    3016/     C06 :                     ;;;     P6(R12R13): working for uart
    3017/     C06 :                     ;;;     P7(R14R15): working for uart
    3018/     C06 :                     ;;;---------------------------------------------------------------------------
    3019/     C06 :                     COMMAND_R:
    3020/     C06 :                     	;; PRINT 4 registers
    3021/     C06 : DC                  	LDM loop(4)		; 4 regs
    3022/     C07 : B4                  	XCH R4			; R4=loop(4)
    3023/     C08 :                     
    3024/     C08 :                     	;; PRINT 16 characters
    3025/     C08 :                     CMDR_L1:
    3026/     C08 : D0                  	LDM loop(16)		; 16 characters
    3027/     C09 : B7                  	XCH R7			; R7=D3D2D1D0@X3 (#character)
    3028/     C0A :                     CMDR_L2:
    3029/     C0A : F0                  	CLB
    3030/     C0B : D4                  	LDM 4
    3031/     C0C : 84                  	ADD R4		;ACC<-#reg (D1D0@X2)(00, 01, 10, 11 for each loop)
    3032/     C0D : F1                  	CLC
    3033/     C0E : 8B                  	ADD R11
    3034/     C0F : B6                  	XCH R6		;R6=D3D2D1D0@X2 (#chip.#reg)
    3035/     C10 :                     	
    3036/     C10 : 27                  	SRC R6R7	; set address
    3037/     C11 : E9                  	RDM		; read data memory
    3038/     C12 : 5D 48               	JMS PRINT_ACC
    3039/     C14 : 77 0A               	ISZ R7,CMDR_L2
    3040/     C16 :                     
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 59 - 2023/03/12 16:43:50


    3041/     C16 :                     	;; PRINT STATUS 
    3042/     C16 : 22 3A               	FIM P1, ':'
    3043/     C18 : 5D 28               	JMS PUTCHAR_P1
    3044/     C1A : 27                  	SRC R6R7	; set address
    3045/     C1B : EC                  	RD0
    3046/     C1C : 5D 48               	JMS PRINT_ACC
    3047/     C1E : 27                  	SRC R6R7	; set address
    3048/     C1F : ED                  	RD1
    3049/     C20 : 5D 48               	JMS PRINT_ACC
    3050/     C22 : 27                  	SRC R6R7	; set address
    3051/     C23 : EE                  	RD2
    3052/     C24 : 5D 48               	JMS PRINT_ACC
    3053/     C26 : 27                  	SRC R6R7	; set address
    3054/     C27 : EF                  	RD3
    3055/     C28 : 5D 48               	JMS PRINT_ACC
    3056/     C2A : 5D 5C               	JMS PRINT_CRLF
    3057/     C2C :                     
    3058/     C2C : 74 08               	ISZ R4,CMDR_L1
    3059/     C2E : 40 1B               	JUN CMD_LOOP		; return to command loop
    3060/     C30 :                     	
    3061/     C30 :                     ;;;---------------------------------------------------------------------------
    3062/     C30 :                     ;;; COMMAND_W:
    3063/     C30 :                     ;;; Write Data RAM
    3064/     C30 :                     ;;; input:
    3065/     C30 :                     ;;; 	R10: #bank
    3066/     C30 :                     ;;; 	R11: #chip (D3.D2.0.0)
    3067/     C30 :                     ;;;---------------------------------------------------------------------------
    3068/     C30 :                     COMMAND_W:
    3069/     C30 :                     	;; PRINT 4 registers
    3070/     C30 : DC                  	LDM loop(4)		; 4 regs
    3071/     C31 : B4                  	XCH R4			; R4=loop(4)
    3072/     C32 :                     
    3073/     C32 :                     	;; PRINT 16 characters
    3074/     C32 :                     CMDW_L1:
    3075/     C32 : D0                  	LDM loop(16)		; 16 characters
    3076/     C33 : B7                  	XCH R7			; R7=D3D2D1D0@X3 (#character)
    3077/     C34 :                     CMDW_L2:
    3078/     C34 : F0                  	CLB
    3079/     C35 : D4                  	LDM 4
    3080/     C36 : 84                  	ADD R4		;ACC<-#reg (D1D0@X2)(00, 01, 10, 11 for each loop)
    3081/     C37 : F1                  	CLC
    3082/     C38 : 8B                  	ADD R11
    3083/     C39 : B6                  	XCH R6		;R6=D3D2D1D0@X2 (#chip.#reg)
    3084/     C3A :                     
    3085/     C3A : 5D 00               	JMS GETCHAR_P1
    3086/     C3C : 5D B7               	JMS CTOI_P1
    3087/     C3E :                     
    3088/     C3E : 27                  	SRC R6R7	; set address
    3089/     C3F : A3                  	LD R3
    3090/     C40 : E0                  	WRM			; write to memory
    3091/     C41 : 5D 48               	JMS PRINT_ACC
    3092/     C43 : 77 34               	ISZ R7,CMDW_L2
    3093/     C45 :                     
    3094/     C45 :                     	;; PRINT STATUS 
    3095/     C45 : 22 3A               	FIM P1, ':'
    3096/     C47 : 5D 28               	JMS PUTCHAR_P1
    3097/     C49 :                     
    3098/     C49 : 5D 00               	JMS GETCHAR_P1
    3099/     C4B : 5D B7               	JMS CTOI_P1
    3100/     C4D :                     
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 60 - 2023/03/12 16:43:50


    3101/     C4D : 27                  	SRC R6R7	; set address
    3102/     C4E : A3                  	LD R3
    3103/     C4F : E4                  	WR0
    3104/     C50 : 5D 48               	JMS PRINT_ACC
    3105/     C52 :                     
    3106/     C52 : 5D 00               	JMS GETCHAR_P1
    3107/     C54 : 5D B7               	JMS CTOI_P1
    3108/     C56 :                     
    3109/     C56 : 27                  	SRC R6R7	; set address
    3110/     C57 : A3                  	LD R3
    3111/     C58 : E5                  	WR1
    3112/     C59 : 5D 48               	JMS PRINT_ACC
    3113/     C5B :                     
    3114/     C5B : 5D 00               	JMS GETCHAR_P1
    3115/     C5D : 5D B7               	JMS CTOI_P1
    3116/     C5F :                     
    3117/     C5F : 27                  	SRC R6R7	; set address
    3118/     C60 : A3                  	LD R3
    3119/     C61 : E6                  	WR2
    3120/     C62 : 5D 48               	JMS PRINT_ACC
    3121/     C64 :                     
    3122/     C64 : 5D 00               	JMS GETCHAR_P1
    3123/     C66 : 5D B7               	JMS CTOI_P1
    3124/     C68 :                     
    3125/     C68 : 27                  	SRC R6R7	; set address
    3126/     C69 : A3                  	LD R3
    3127/     C6A : E7                  	WR3
    3128/     C6B : 5D 48               	JMS PRINT_ACC
    3129/     C6D : 5D 5C               	JMS PRINT_CRLF
    3130/     C6F :                     
    3131/     C6F : 74 32               	ISZ R4,CMDW_L1
    3132/     C71 :                     	
    3133/     C71 : 40 1B               	JUN CMD_LOOP		; return to command loop
    3134/     C73 :                     
    3135/     C73 :                     ;;;---------------------------------------------------------------------------
    3136/     C73 :                     ;;; COMMAND_PMW
    3137/     C73 :                     ;;; Write Program Memory
    3138/     C73 :                     ;;;---------------------------------------------------------------------------
    3139/     C73 :                     COMMAND_PMW:
    3140/     C73 : 20 4E               	FIM P0, lo(STR_ADR)	; print " ADR="
    3141/     C75 : 5E 00               	JMS PRINTSTR_P0
    3142/     C77 : 5D 00               	JMS GETCHAR_P1
    3143/     C79 : 5D 28               	JMS PUTCHAR_P1
    3144/     C7B : 5D B7               	JMS CTOI_P1
    3145/     C7D : A3                  	LD R3
    3146/     C7E : B5                  	XCH R5
    3147/     C7F : 5D 5C               	JMS PRINT_CRLF
    3148/     C81 :                     
    3149/     C81 : 22 46               	FIM P1,'F'
    3150/     C83 : 5D 28               	JMS PUTCHAR_P1
    3151/     C85 : A5                  	LD R5
    3152/     C86 : 5D 48               	JMS PRINT_ACC
    3153/     C88 : 22 30               	FIM P1,'0'
    3154/     C8A : 5D 28               	JMS PUTCHAR_P1
    3155/     C8C : 22 3A               	FIM P1,':'
    3156/     C8E : 5D 28               	JMS PUTCHAR_P1
    3157/     C90 :                     	
    3158/     C90 : A5                  	LD R5
    3159/     C91 : B0                  	XCH R0
    3160/     C92 :                     
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 61 - 2023/03/12 16:43:50


    3161/     C92 : D0                  	LDM 0
    3162/     C93 : B1                  	XCH R1
    3163/     C94 :                     CMDPMW_L1:
    3164/     C94 : 5D 53               	JMS PRINT_SPC
    3165/     C96 :                     
    3166/     C96 : 5D 00               	JMS GETCHAR_P1
    3167/     C98 : 5D 28               	JMS PUTCHAR_P1
    3168/     C9A : 5D B7               	JMS CTOI_P1
    3169/     C9C : A3                  	LD R3
    3170/     C9D : B4                  	XCH R4
    3171/     C9E :                     
    3172/     C9E : 5D 00               	JMS GETCHAR_P1
    3173/     CA0 : 5D 28               	JMS PUTCHAR_P1
    3174/     CA2 : 5D B7               	JMS CTOI_P1
    3175/     CA4 :                     
    3176/     CA4 : A4                  	LD R4
    3177/     CA5 : B2                  	XCH R2
    3178/     CA6 :                     
    3179/     CA6 : 58 D6               	JMS PM_WRITE_P0_P1
    3180/     CA8 : 71 94               	ISZ R1, CMDPMW_L1
    3181/     CAA :                     
    3182/     CAA : 5D 5C               	JMS PRINT_CRLF
    3183/     CAC :                     
    3184/     CAC : 40 1B               	JUN CMD_LOOP		; return to command loop
    3185/     CAE :                     
    3186/     CAE :                     ;;;---------------------------------------------------------------------------
    3187/     CAE :                     ;;; COMMAND_PMR
    3188/     CAE :                     ;;; Dump Program Memory
    3189/     CAE :                     ;;;---------------------------------------------------------------------------
    3190/     CAE :                     COMMAND_PMR:
    3191/     CAE : 5D 5C               	JMS PRINT_CRLF
    3192/     CB0 :                     
    3193/     CB0 : 58 E2               	JMS PM_INIT_BANK
    3194/     CB2 :                     
    3195/     CB2 : 20 00               	FIM P0, 00H
    3196/     CB4 :                     CMDPMR_L0:
    3197/     CB4 : 22 46               	FIM P1,'F'
    3198/     CB6 : 5D 28               	JMS PUTCHAR_P1
    3199/     CB8 : A0                  	LD R0
    3200/     CB9 : 5D 48               	JMS PRINT_ACC
    3201/     CBB : 22 30               	FIM P1,'0'
    3202/     CBD : 5D 28               	JMS PUTCHAR_P1
    3203/     CBF : 22 3A               	FIM P1,':'
    3204/     CC1 : 5D 28               	JMS PUTCHAR_P1
    3205/     CC3 :                     CMDPMR_L1:	
    3206/     CC3 :                     	;; 	FIM P1, ' '
    3207/     CC3 :                     	;; 	JMS PUTCHAR_P1
    3208/     CC3 :                     
    3209/     CC3 : 5F FE               	JMS PM_READ_P0_P1	; Read program memory
    3210/     CC5 : A3                  	LD R3
    3211/     CC6 : B5                  	XCH R5
    3212/     CC7 : A2                  	LD R2
    3213/     CC8 : 5D 48               	JMS PRINT_ACC
    3214/     CCA : A5                  	LD R5
    3215/     CCB : 5D 48               	JMS PRINT_ACC
    3216/     CCD :                     
    3217/     CCD : 71 C3               	ISZ R1, CMDPMR_L1
    3218/     CCF : 5D 5C               	JMS PRINT_CRLF
    3219/     CD1 : 70 B4                       ISZ R0, CMDPMR_L0
    3220/     CD3 :                     	
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 62 - 2023/03/12 16:43:50


    3221/     CD3 : 40 1B               	JUN CMD_LOOP		; return to command loop
    3222/     CD5 :                     
    3223/     CD5 :                     ;;;---------------------------------------------------------------------------
    3224/     CD5 :                     ;;; COMMAND_PMC
    3225/     CD5 :                     ;;; Clear Program Memory
    3226/     CD5 :                     ;;;---------------------------------------------------------------------------
    3227/     CD5 :                     COMMAND_PMC:
    3228/     CD5 : 5D 5C               	JMS PRINT_CRLF
    3229/     CD7 :                     
    3230/     CD7 : 24 00               	FIM P2, loop(16)	; R5 = 0..15
    3231/     CD9 :                     CMDPMC_BANKLOOP:
    3232/     CD9 : A5                  	LD R5
    3233/     CDA : 58 EE               	JMS PM_SELECTPMB
    3234/     CDC : 20 00               	FIM P0, 00H		; loop counter
    3235/     CDE : 22 00               	FIM P1, 00H		; data to fill
    3236/     CE0 :                     CMDPMC_L1:
    3237/     CE0 : 58 D6               	JMS PM_WRITE_P0_P1
    3238/     CE2 : 71 E0               	ISZ R1, CMDPMC_L1
    3239/     CE4 : 70 E0               	ISZ R0, CMDPMC_L1
    3240/     CE6 :                     
    3241/     CE6 : 58 E2               	JMS PM_INIT_BANK 	; write PM_READ code on program memory
    3242/     CE8 : 75 D9               	ISZ R5, CMDPMC_BANKLOOP
    3243/     CEA :                     
    3244/     CEA : F0                  	CLB
    3245/     CEB : 58 EE               	JMS PM_SELECTPMB	; set PMB to 0
    3246/     CED :                     	
    3247/     CED : 40 1B               	JUN CMD_LOOP		; return to command loop
    3248/     CEF :                     
    3249/     CEF :                     
    3250/     CEF :                     ;;;---------------------------------------------------------------------------
    3251/     CEF :                     ;;; ISCRLF_P1
    3252/     CEF :                     ;;; check if P1=='\r' | P1=='\n'
    3253/     CEF :                     ;;; input: P0
    3254/     CEF :                     ;;; output: ACC=1 if P1=='\r' || P1=='\n'
    3255/     CEF :                     ;;;         ACC=0 P1!='\r' && P1!='\n'
    3256/     CEF :                     ;;;---------------------------------------------------------------------------
    3257/     CEF :                     ISCRLF_P1:
    3258/     CEF : A2                  	LD R2
    3259/     CF0 : 1C FC               	JCN NZ, ISCRLF_EXIT0	; check upper 4bit
    3260/     CF2 : F1                  	CLC
    3261/     CF3 : DD                  	LDM '\r'
    3262/     CF4 : 93                  	SUB R3
    3263/     CF5 : 14 FD               	JCN Z, ISCRLF_EXIT1	; check lower 4bit
    3264/     CF7 : F1                  	CLC
    3265/     CF8 : DA                  	LDM '\n'
    3266/     CF9 : 93                  	SUB R3
    3267/     CFA : 14 FD               	JCN Z, ISCRLF_EXIT1	; check lower 4bit
    3268/     CFC :                     ISCRLF_EXIT0:
    3269/     CFC : C0                  	BBL 0
    3270/     CFD :                     ISCRLF_EXIT1:
    3271/     CFD : C1                  	BBL 1
    3272/     CFE :                     ;;;----------------------------------------------------------------------------
    3273/     CFE :                     ;;; I/O and some basic routines located in Page 0D00H
    3274/     CFE :                     ;;;----------------------------------------------------------------------------
    3275/     D00 :                     	org 0D00H
    3276/     D00 :                     ;;;---------------------------------------------------------------------------
    3277/     D00 :                     ;;; Software UART Routine
    3278/     D00 :                     ;;; GETCHAR_P1 and PUTCHAR_P1
    3279/     D00 :                     ;;; defined in separated file
    3280/     D00 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 63 - 2023/03/12 16:43:50


    3281/     D00 :                     ;;; supported baudrates are 4800bps or 9600bps
    3282/     D00 :                     ;; BAUDRATE equ 4800	; 4800 bps, 8 data bits, no parity, 1 stop bit
    3283/     D00 : =2580H               BAUDRATE equ 9600   ; 9600 bps, 8 data bits, no parity, 1 stop bit
    3284/     D00 :                     
    3285/     D00 : =2580H               	switch BAUDRATE
    3286/     D00 : =>FALSE              	case 4800
    3287/     D00 :                     	include "4800bps.inc"
    3288/     D00 : =>TRUE               	case 9600
    3289/     D00 :                     	include "9600bps.inc"
(1)    1/     D00 :                     ;;;---------------------------------------------------------------------------
(1)    2/     D00 :                     ;;; getchar and putchar functions
(1)    3/     D00 :                     ;;; baud rate = 9600bps
(1)    4/     D00 :                     ;;; 8bit, no parity, stop 1
(1)    5/     D00 :                     ;;;---------------------------------------------------------------------------
(1)    6/     D00 :                     
(1)    7/     D00 :                     ;;;---------------------------------------------------------------------------
(1)    8/     D00 :                     ;;; GETCHAR_P1
(1)    9/     D00 :                     ;;; receive a character from serial port (TEST) and put into P1(R2, R3)
(1)   10/     D00 :                     ;;;
(1)   11/     D00 :                     ;;; Input: none
(1)   12/     D00 :                     ;;; Output: P1(R2,R3), ACC=0(OK), ACC=1(error)
(1)   13/     D00 :                     ;;; Working: P6, P7
(1)   14/     D00 :                     ;;; This subroutine destroys P6, P7.
(1)   15/     D00 :                     ;;; 
(1)   16/     D00 :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   17/     D00 :                     ;;; 
(1)   18/     D00 :                     ;;;          |--12--|-9--|-9-|-9--|-12--|-9--|-9-|-9--|-10--|
(1)   19/     D00 :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   20/     D00 :                     ;;;          ^      ^    ^   ^    ^     ^    ^   ^    ^     ^
(1)   21/     D00 :                     ;;;        start    0    1   2    3     4    5   6    7    stop
(1)   22/     D00 :                     ;;;               |->phase delay
(1)   23/     D00 :                     ;;; - In order to check data bits in the middle of the signal,
(1)   24/     D00 :                     ;;;   a "phase delay" should be added between the start bit and data bits.
(1)   25/     D00 :                     ;;;   (1 to 4 cycles may be moderate for 9.645cycle/bit)
(1)   26/     D00 :                     ;;; - Detection of the start bit may cause delay of 2 cycles due to polling.
(1)   27/     D00 :                     ;;;---------------------------------------------------------------------------
(1)   28/     D00 :                     
(1)   29/     D00 :                     GETCHAR_P1:
(1)   30/     D00 : 2C 0C                       FIM R12R13, loop(4)     ; loop for first(lower) 4 bit
(1)   31/     D02 :                                                     ; 
(1)   32/     D02 : 19 02                       JCN TN, $               ;(2) wait for start bit (TEST="0")
(1)   33/     D04 : 2E 0C               	FIM P7, loop(4)         ;(2)
(1)   34/     D06 : 7F 06               	ISZ R15,$               ;(8) 12 cycles between startbit and bit0
(1)   35/     D08 :                                                     ;    phase(bit0)= 12 -9.645 = 2.355cycle
(1)   36/     D08 :                     GETCHAR_L1:
(1)   37/     D08 : 19 0D               	JCN TN, GETCHAR_L2      ;(2) check a bit
(1)   38/     D0A : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   39/     D0B : 4D 10                       JUN GETCHAR_L3          ;<2>
(1)   40/     D0D :                     GETCHAR_L2:
(1)   41/     D0D : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   42/     D0E : 00                          NOP                     ;[1]
(1)   43/     D0F : 00                          NOP                     ;[1]
(1)   44/     D10 :                     GETCHAR_L3:
(1)   45/     D10 : F6                  	RAR                     ;(1) load CY->ACC
(1)   46/     D11 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   47/     D12 : 7D 08                       ISZ R13, GETCHAR_L1     ;(2) repeat until 4 bit received
(1)   48/     D14 :                                                     ;    phase(here)= 2.355 -0.645*3 = 0.42cycle
(1)   49/     D14 : B3                  	XCH R3                  ;(1)
(1)   50/     D15 : 2C 0C               	FIM R12R13, loop(4)     ;(2) loop for second(upper) 4 bit
(1)   51/     D17 :                     		                ;    12 cycles between bit3 and bit4
 AS V1.42 Beta [Bld 236] - Source File vtl.asm(9600bps.inc) - Page 64 - 2023/03/12 16:43:50


(1)   52/     D17 :                                                     ;    phase(bit4)= 2.42 +12 -9.645 = 2.775cycle
(1)   53/     D17 :                     GETCHAR_L4:
(1)   54/     D17 : 19 1C               	JCN TN, GETCHAR_L5      ;(2) check a bit
(1)   55/     D19 : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   56/     D1A : 4D 1F                       JUN GETCHAR_L6          ;<2>
(1)   57/     D1C :                     GETCHAR_L5:
(1)   58/     D1C : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   59/     D1D : 00                          NOP                     ;[1]
(1)   60/     D1E : 00                          NOP                     ;[1]
(1)   61/     D1F :                     GETCHAR_L6:
(1)   62/     D1F : F6                  	RAR                     ;(1) load CY->ACC
(1)   63/     D20 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   64/     D21 : 7D 17                       ISZ R13, GETCHAR_L4     ;(2) repeat until 4 bit received
(1)   65/     D23 :                                                     ;    phase(here)= 4.755 -0.645*3 = 0.84 cycle
(1)   66/     D23 : B2                  	XCH R2                  ;(1)
(1)   67/     D24 :                                                     ;    10 cycles/between bit7 and stopbit
(1)   68/     D24 :                                                     ;    phase(stop)= 2.84 +10 -9.645 = 1.195cycle
(1)   69/     D24 :                     	;; check stop bit
(1)   70/     D24 : 19 27                       JCN TN, GETCHAR_OK      ; stop bit == "1"
(1)   71/     D26 : C1                          BBL 1                   ; stop bit != "1"
(1)   72/     D27 :                     GETCHAR_OK:
(1)   73/     D27 : C0                  	BBL 0
(1)   74/     D28 :                                     
(1)   75/     D28 :                     ;;;---------------------------------------------------------------------------
(1)   76/     D28 :                     ;;; PUTCHAR_P1
(1)   77/     D28 :                     ;;; send the character in P1(R2, R3) to OUTPORT
(1)   78/     D28 :                     ;;; 
(1)   79/     D28 :                     ;;; Input: P1(R2,R3)
(1)   80/     D28 :                     ;;; Output: ACC=0
(1)   81/     D28 :                     ;;; Working: P6(R12R13), P7
(1)   82/     D28 :                     ;;; This subroutine destroys P6, P7.
(1)   83/     D28 :                     ;;; P1 is not affected
(1)   84/     D28 :                     ;;; 
(1)   85/     D28 :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   86/     D28 :                     ;;; 
(1)   87/     D28 :                     ;;; Input: P1(R2,R3)
(1)   88/     D28 :                     ;;; Output: ACC=0
(1)   89/     D28 :                     ;;; Working: P6(R12R13), P7
(1)   90/     D28 :                     ;;; This subroutine destroys P6, P7.
(1)   91/     D28 :                     ;;;---------------------------------------------------------------------------
(1)   92/     D28 :                     ;;; 
(1)   93/     D28 :                     ;;;         |--9-|-9--|-9-|-9--|-10--|-10-|-10-|-10-|-10--|(ave.9.56cycle/bit)
(1)   94/     D28 :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   95/     D28 :                     ;;;         ^    ^    ^   ^    ^     ^    ^    ^    ^     ^
(1)   96/     D28 :                     ;;;       start  0    1   2    3     4    5    6    7     stop
(1)   97/     D28 :                     ;;;---------------------------------------------------------------------------
(1)   98/     D28 :                     
(1)   99/     D28 :                     PUTCHAR_P1:
(1)  100/     D28 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  101/     D28 :                     	LDM BANK_SERIAL     ; set bank to serial output port RAM
(1)  102/     D28 :                             DCL                 ; this may be omitted if BANK_SERIAL==BANK_DEFAULT
(1)  103/     D28 : [100]                	endif
(1)  104/     D28 :                     	
(1)  105/     D28 : 2E C0                       FIM P7, CHIP_SERIAL ; chip# of output port
(1)  106/     D2A : 2F                  	SRC P7              ; set port address
(1)  107/     D2B :                     
(1)  108/     D2B : 2C 0B                       FIM R12R13, loop(5) ; start bit and lower 4bit(R3)
(1)  109/     D2D : A3                          LD R3
(1)  110/     D2E : F1                          CLC                 ; start bit is 0
(1)  111/     D2F : F5                          RAL
 AS V1.42 Beta [Bld 236] - Source File vtl.asm(9600bps.inc) - Page 65 - 2023/03/12 16:43:50


(1)  112/     D30 :                                     
(1)  113/     D30 :                     PUTCHAR_L1:
(1)  114/     D30 : 00                  	NOP                 ;(1) 9cycle/bit
(1)  115/     D31 : 00                          NOP                 ;(1)
(1)  116/     D32 : 00                          NOP                 ;(1)
(1)  117/     D33 : 00                          NOP                 ;(1)
(1)  118/     D34 : 00                          NOP                 ;(1)
(1)  119/     D35 : E1                          WMP                 ;(1)
(1)  120/     D36 : F6                          RAR                 ;(1)
(1)  121/     D37 : 7D 30                       ISZ R13, PUTCHAR_L1 ;(2)
(1)  122/     D39 :                     	
(1)  123/     D39 : 2C 0B                       FIM R12R13, loop(5) ;(2) upper 4bit(R2) and stop bit
(1)  124/     D3B : A2                          LD R2               ;(1)
(1)  125/     D3C : FA                          STC                 ;(1) stop bit is 1
(1)  126/     D3D : 00                  	NOP                 ;(1) timing adjustment
(1)  127/     D3E : 00                          NOP                 ;(1) 10cycle between bit3 and bit4
(1)  128/     D3F :                     PUTCHAR_L2:
(1)  129/     D3F : E1                  	WMP                 ;(1) 10cycle/bit
(1)  130/     D40 : 2E 0E                       FIM R14R15, loop(2) ;(2)
(1)  131/     D42 : 7F 42                       ISZ R15, $          ;(4)
(1)  132/     D44 : F6                          RAR                 ;(1)
(1)  133/     D45 : 7D 3F                       ISZ R13, PUTCHAR_L2 ;(2)
(1)  134/     D47 :                     	
(1)  135/     D47 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  136/     D47 :                     	LDM BANK_DEFAULT    ; restore bank to default
(1)  137/     D47 :                             DCL                 ; this may be omitted if BANK_SERIAL==BANK_DEFAULT
(1)  138/     D47 : [135]                	endif
(1)  139/     D47 :                     	
(1)  140/     D47 : C0                          BBL 0
(1)  141/     D48 :                     
(1)  142/     D48 :                     
    3290/     D48 : [3285]               	endcase
    3291/     D48 :                     
    3292/     D48 :                     ;;;---------------------------------------------------------------------------
    3293/     D48 :                     ;;; PRINT_ACC
    3294/     D48 :                     ;;; print contents of ACC('0'...'F') as a character
    3295/     D48 :                     ;;; destroy: P1, P6, P7, ACC
    3296/     D48 :                     ;;;---------------------------------------------------------------------------
    3297/     D48 :                     PRINT_ACC:
    3298/     D48 : 22 30               	FIM R2R3, 30H		;'0'
    3299/     D4A : F1                  	CLC			; clear carry
    3300/     D4B : FB                  	DAA			; ACC=ACC+6 if ACC>9 and set carry
    3301/     D4C : 1A 50               	JCN CN, PRINTACC_L1
    3302/     D4E : 62                  	INC R2
    3303/     D4F : F2                  	IAC
    3304/     D50 :                     PRINTACC_L1:	
    3305/     D50 : B3                  	XCH R3			; R3<-ACC
    3306/     D51 : 4D 28               	JUN PUTCHAR_P1		; not JMS but JUN (Jump to PUTCHAR and return)
    3307/     D53 :                     
    3308/     D53 :                     ;;;---------------------------------------------------------------------------
    3309/     D53 :                     ;;; PRINT_SPC
    3310/     D53 :                     ;;; print " "
    3311/     D53 :                     ;;; destroy: ACC
    3312/     D53 :                     ;;; this routine consumes 2 PC stack
    3313/     D53 :                     ;;;---------------------------------------------------------------------------
    3314/     D53 :                     PRINT_SPC:
    3315/     D53 : 59 5B               	JMS PUSH_P1
    3316/     D55 : 22 20               	FIM P1, ' '
    3317/     D57 : 5D 28               	JMS PUTCHAR_P1
    3318/     D59 : 59 A5               	JMS POP_P1
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 66 - 2023/03/12 16:43:50


    3319/     D5B : C0                  	BBL 0
    3320/     D5C :                     
    3321/     D5C :                     ;;;---------------------------------------------------------------------------
    3322/     D5C :                     ;;; PRINT_CRLF
    3323/     D5C :                     ;;; print "\r\n"
    3324/     D5C :                     ;;; destroy: ACC
    3325/     D5C :                     ;;; this routine consumes 2 PC stack
    3326/     D5C :                     ;;;---------------------------------------------------------------------------
    3327/     D5C :                     PRINT_CRLF:
    3328/     D5C : 59 5B               	JMS PUSH_P1
    3329/     D5E : 22 0D               	FIM P1, '\r'
    3330/     D60 : 5D 28               	JMS PUTCHAR_P1
    3331/     D62 : 22 0A               	FIM P1, '\n'
    3332/     D64 : 5D 28               	JMS PUTCHAR_P1
    3333/     D66 : 59 A5               	JMS POP_P1
    3334/     D68 : C0                  	BBL 0
    3335/     D69 :                     
    3336/     D69 :                     ;;;---------------------------------------------------------------------------
    3337/     D69 :                     ;;; PRINT_CR
    3338/     D69 :                     ;;; print "\r"
    3339/     D69 :                     ;;; destroy: P1, ACC
    3340/     D69 :                     ;;; this routine consumes 1 PC stack
    3341/     D69 :                     ;;;---------------------------------------------------------------------------
    3342/     D69 :                     PRINT_CR:
    3343/     D69 : 22 0D               	FIM P1, '\r'
    3344/     D6B : 4D 28               	JUN PUTCHAR_P1
    3345/     D6D :                     
    3346/     D6D :                     ;;;---------------------------------------------------------------------------
    3347/     D6D :                     ;;; PRINT_LF
    3348/     D6D :                     ;;; print "\n"
    3349/     D6D :                     ;;; destroy: P1, ACC
    3350/     D6D :                     ;;; this routine consumes 1 PC stack
    3351/     D6D :                     ;;;---------------------------------------------------------------------------
    3352/     D6D :                     PRINT_LF:
    3353/     D6D : 22 0A               	FIM P1, '\n'
    3354/     D6F : 4D 28               	JUN PUTCHAR_P1
    3355/     D71 :                     
    3356/     D71 :                     ;;;----------------------------------------------------------------------------
    3357/     D71 :                     ;;; DISPLED_P1
    3358/     D71 :                     ;;;   DISPLAY the contents of P1 on Port 1 and 2
    3359/     D71 :                     ;;; Input: P1(R2R3)
    3360/     D71 :                     ;;; Output:  ACC=0
    3361/     D71 :                     ;;; Working: P7
    3362/     D71 :                     ;;; Destroy: P7
    3363/     D71 :                     ;;;----------------------------------------------------------------------------
    3364/     D71 :                     DISPLED_P1:
    3365/     D71 : D0                  	LDM BANK_RAM1
    3366/     D72 : FD                          DCL
    3367/     D73 : 2E 40                       FIM P7, CHIP_RAM1
    3368/     D75 : 2F                          SRC P7
    3369/     D76 : A2                          LD R2
    3370/     D77 : E1                          WMP
    3371/     D78 :                     	
    3372/     D78 : D0                          LDM BANK_RAM2
    3373/     D79 : FD                          DCL
    3374/     D7A : 2E 80                       FIM P7, CHIP_RAM2
    3375/     D7C : 2F                          SRC P7
    3376/     D7D : A3                          LD R3
    3377/     D7E : E1                          WMP
    3378/     D7F :                     
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 67 - 2023/03/12 16:43:50


    3379/     D7F : D0                          LDM BANK_DEFAULT	; restore BANK to default
    3380/     D80 : FD                  	DCL
    3381/     D81 :                     	
    3382/     D81 : C0                          BBL 0
    3383/     D82 :                     
    3384/     D82 :                     ;;;---------------------------------------------------------------------------
    3385/     D82 :                     ;;; INIT_SERIAL
    3386/     D82 :                     ;;; Initialize serial port
    3387/     D82 :                     ;;;---------------------------------------------------------------------------
    3388/     D82 :                     INIT_SERIAL:
    3389/     D82 : D0                  	LDM BANK_SERIAL     ; bank of output port
    3390/     D83 : FD                          DCL                 ; set port bank
    3391/     D84 :                     	
    3392/     D84 : 2E C0                       FIM P7, CHIP_SERIAL ; chip# of output port
    3393/     D86 : 2F                  	SRC P7              ; set port address
    3394/     D87 : D1                  	LDM 1
    3395/     D88 : E1                          WMP                 ; set serial port to 1 (TTL->H)
    3396/     D89 :                     
    3397/     D89 : D0                  	LDM BANK_DEFAULT    
    3398/     D8A : FD                          DCL                 ; restore bank to default
    3399/     D8B :                     
    3400/     D8B : C0                          BBL 0
    3401/     D8C :                     
    3402/     D8C :                     ;;;---------------------------------------------------------------------------
    3403/     D8C :                     ;;; ISNUM_P1
    3404/     D8C :                     ;;; check P1 '0' to '9' as a ascii character
    3405/     D8C :                     ;;; return: ACC=0 if P1 is not a number
    3406/     D8C :                     ;;;         ACC=1 if P1 is a number
    3407/     D8C :                     ;;; destroy: P7
    3408/     D8C :                     ;;;---------------------------------------------------------------------------
    3409/     D8C :                     ISNUM_P1:
    3410/     D8C : 2E 30               	FIM P7, '0'
    3411/     D8E : 5D D0               	JMS CMP_P1P7
    3412/     D90 : 1A 99               	JCN CN, ISNUM_FALSE	; P1 < '0'
    3413/     D92 : 2E 3A               	FIM P7, '9'+1
    3414/     D94 : 5D D0               	JMS CMP_P1P7
    3415/     D96 : 12 99               	JCN C,  ISNUM_FALSE	; P1 >= '9'+1
    3416/     D98 : C1                  	BBL 1			; P1 is a number
    3417/     D99 :                     ISNUM_FALSE:
    3418/     D99 : C0                  	BBL 0			; P1 is not a number
    3419/     D9A :                     
    3420/     D9A :                     ;;;----------------------------------------------------------------------------
    3421/     D9A :                     ;;; ISALPHA_P1
    3422/     D9A :                     ;;; check P1 is an alphabet as a ascii character
    3423/     D9A :                     ;;; return: ACC=0 if P1 is not an alphabet
    3424/     D9A :                     ;;;         ACC=1 if P1 is an alphabet
    3425/     D9A :                     ;;; destroy: P7
    3426/     D9A :                     ;;;----------------------------------------------------------------------------
    3427/     D9A :                     ISALPHA_P1:
    3428/     D9A :                     ISALPHA_L1:
    3429/     D9A : 2E 41               	FIM P7, 'A'
    3430/     D9C : 5D D0               	JMS CMP_P1P7
    3431/     D9E : 12 A1               	JCN C, ISALPHA_L10
    3432/     DA0 : C0                  	BBL 0			; P1<'A'
    3433/     DA1 :                     ISALPHA_L10:
    3434/     DA1 : 2E 5B               	FIM P7, 'Z'+1
    3435/     DA3 : 5D D0               	JMS CMP_P1P7
    3436/     DA5 : 12 A8               	JCN C,  ISALPHA_L2	; P1>='Z'+1 then jump to next chance
    3437/     DA7 : C1                  	BBL 1			; 'A'<=P1<='Z'
    3438/     DA8 :                     ISALPHA_L2:
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 68 - 2023/03/12 16:43:50


    3439/     DA8 : 2E 61               	FIM P7, 'a'
    3440/     DAA : 5D D0               	JMS CMP_P1P7
    3441/     DAC : 12 AF               	JCN C, ISALPHA_L20
    3442/     DAE : C0                  	BBL 0			; P1<'a'
    3443/     DAF :                     ISALPHA_L20:	
    3444/     DAF : 2E 7B               	FIM P7, 'z'+1
    3445/     DB1 : 5D D0               	JMS CMP_P1P7
    3446/     DB3 : 12 B6               	JCN C, ISALPHA_FALSE	; P1>='z'+1
    3447/     DB5 : C1                  	BBL 1			; 'a'<=P1<= 'z'
    3448/     DB6 :                     ISALPHA_FALSE:
    3449/     DB6 : C0                  	BBL 0
    3450/     DB7 :                     
    3451/     DB7 :                     ;;;---------------------------------------------------------------------------
    3452/     DB7 :                     ;;; CTOI_P1
    3453/     DB7 :                     ;;; convert character ('0'...'f') to value 0000 ... 1111
    3454/     DB7 :                     ;;; input: P1(R2R3)
    3455/     DB7 :                     ;;; output: R3, (R2=0)
    3456/     DB7 :                     ;;;---------------------------------------------------------------------------
    3457/     DB7 :                     CTOI_P1:
    3458/     DB7 : F0                  	CLB
    3459/     DB8 : D3                  	LDM 3
    3460/     DB9 : 92                  	SUB R2
    3461/     DBA : 14 C0               	JCN Z, CTOI_09		; check upper 4bit
    3462/     DBC : F0                  	CLB
    3463/     DBD : D9                  	LDM 9
    3464/     DBE : 83                  	ADD R3
    3465/     DBF : B3                  	XCH R3			; R3 = R3 + 9 for 'a-fA-F'
    3466/     DC0 :                     CTOI_09:
    3467/     DC0 : F0                  	CLB
    3468/     DC1 : B2                  	XCH R2			; R2 = 0
    3469/     DC2 : C0                  	BBL 0
    3470/     DC3 :                     	
    3471/     DC3 :                     ;;;---------------------------------------------------------------------------
    3472/     DC3 :                     ;;; CMP_P0P1
    3473/     DC3 :                     ;;; compare P0(R0R1) and P1(R2R3)
    3474/     DC3 :                     ;;; input: P0, P1
    3475/     DC3 :                     ;;; output: ACC=1,CY=0 if P0<P1
    3476/     DC3 :                     ;;;         ACC=0,CY=1 if P0==P1 
    3477/     DC3 :                     ;;;         ACC=1,CY=1 if P0>P1
    3478/     DC3 :                     ;;; P0 - P1 (the carry bit is a complement of the borrow)
    3479/     DC3 :                     ;;;---------------------------------------------------------------------------
    3480/     DC3 :                     CMP_P0P1:
    3481/     DC3 : F0                  	CLB
    3482/     DC4 : A0                  	LD R0			
    3483/     DC5 : 92                  	SUB R2			;R0-R2
    3484/     DC6 : 14 C9               	JCN Z, CMP01L1
    3485/     DC8 : C1                  	BBL 1			;P0>P1,  ACC=1, CY=1
    3486/     DC9 :                     				;P0<P1,  ACC=1, CY=0
    3487/     DC9 :                     CMP01L1:	
    3488/     DC9 : F0                  	CLB
    3489/     DCA : A1                  	LD R1
    3490/     DCB : 93                  	SUB R3			;R1-R3
    3491/     DCC : 14 CF               	JCN Z, CMP01EXIT01
    3492/     DCE : C1                  	BBL 1			;P0<P1,  ACC=1, CY=0
    3493/     DCF :                     				;P0<P1,  ACC=1, CY=0
    3494/     DCF :                     CMP01EXIT01:
    3495/     DCF : C0                  	BBL 0			;P0==P1, ACC=0, CY=1
    3496/     DD0 :                     
    3497/     DD0 :                     ;;;---------------------------------------------------------------------------
    3498/     DD0 :                     ;;; CMP_P1P7
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 69 - 2023/03/12 16:43:50


    3499/     DD0 :                     ;;; compare P1(R2R3) and P7(R14R15)
    3500/     DD0 :                     ;;; input: P1, P7
    3501/     DD0 :                     ;;; output: ACC=1,CY=0 if P1<P7
    3502/     DD0 :                     ;;;         ACC=0,CY=1 if P1==P7
    3503/     DD0 :                     ;;;         ACC=1,CY=1 if P1>P7
    3504/     DD0 :                     ;;; P1 - P7 (the carry bit is a complement of the borrow)
    3505/     DD0 :                     ;;;---------------------------------------------------------------------------
    3506/     DD0 :                     CMP_P1P7:
    3507/     DD0 : F0                  	CLB
    3508/     DD1 : A2                  	LD R2			
    3509/     DD2 : 9E                  	SUB R14			;R2-R14
    3510/     DD3 : 14 D6               	JCN Z, CMP17_L1		; jump if R2==R14
    3511/     DD5 : C1                  	BBL 1			; if P1<P7 then ACC=1, CY=0
    3512/     DD6 :                     CMP17_L1:	
    3513/     DD6 : F0                  	CLB
    3514/     DD7 : A3                  	LD R3
    3515/     DD8 : 9F                  	SUB R15			;R3-R15
    3516/     DD9 : 14 DC               	JCN Z, CMP17_EXIT01	; jump if R3==R15
    3517/     DDB : C1                  	BBL 1			; if P1<P7 then ACC=1, CY=0
    3518/     DDC :                     				; if P1>P7 then ACC=1, CY=1
    3519/     DDC :                     CMP17_EXIT01:
    3520/     DDC : C0                  	BBL 0			; P1==P7, ACC=0, CY=1
    3521/     DDD :                     	
    3522/     DDD :                     ;;;---------------------------------------------------------------------------
    3523/     DDD :                     ;;; CMPEQ_P1P2
    3524/     DDD :                     ;;; compare P1 and P2 equal or not
    3525/     DDD :                     ;;; return: Take care the return value. It is comptatible with CMP
    3526/     DDD :                     ;;; 	ACC=0 if P1==P2
    3527/     DDD :                     ;;;     ACC=1 if P1!=P2
    3528/     DDD :                     ;;;---------------------------------------------------------------------------
    3529/     DDD :                     CMPEQ_P1P2:
    3530/     DDD : A2                  	LD R2
    3531/     DDE : F1                  	CLC
    3532/     DDF : 94                  	SUB R4
    3533/     DE0 : 1C E8               	JCN NZ, CMPEQ12_EXIT1
    3534/     DE2 : A3                  	LD R3
    3535/     DE3 : F1                  	CLC
    3536/     DE4 : 95                  	SUB R5
    3537/     DE5 : 1C E8               	JCN NZ, CMPEQ12_EXIT1
    3538/     DE7 : C0                  	BBL 0
    3539/     DE8 :                     CMPEQ12_EXIT1:
    3540/     DE8 : C1                  	BBL 1
    3541/     DE9 :                     
    3542/     DE9 :                     ;;;---------------------------------------------------------------------------
    3543/     DE9 :                     ;;; CMPEQ_P2P7
    3544/     DE9 :                     ;;; compare P2 and P7 equal or not
    3545/     DE9 :                     ;;; return: Take care the return value. It is comptatible with CMP
    3546/     DE9 :                     ;;; 	ACC=0 if P2==P7
    3547/     DE9 :                     ;;;     ACC=1 if P2 != P7
    3548/     DE9 :                     ;;;---------------------------------------------------------------------------
    3549/     DE9 :                     CMPEQ_P2P7:
    3550/     DE9 : A4                  	LD R4
    3551/     DEA : F1                  	CLC
    3552/     DEB : 9E                  	SUB R14
    3553/     DEC : 1C F4               	JCN NZ, CMPEQ27_EXIT1
    3554/     DEE : A5                  	LD R5
    3555/     DEF : F1                  	CLC
    3556/     DF0 : 9F                  	SUB R15
    3557/     DF1 : 1C F4               	JCN NZ, CMPEQ27_EXIT1
    3558/     DF3 : C0                  	BBL 0
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 70 - 2023/03/12 16:43:50


    3559/     DF4 :                     CMPEQ27_EXIT1:
    3560/     DF4 : C1                  	BBL 1
    3561/     DF5 :                     	
    3562/     DF5 :                     ;;;---------------------------------------------------------------------------
    3563/     DF5 :                     ;;; ISZEROORNOT_P1
    3564/     DF5 :                     ;;; check P1 is zero or not
    3565/     DF5 :                     ;;; Return 0 if P1 is 0
    3566/     DF5 :                     ;;; return: ACC=0 if P1 == 0
    3567/     DF5 :                     ;;; 	    ACC=1 if P1 != 0
    3568/     DF5 :                     ;;;---------------------------------------------------------------------------
    3569/     DF5 :                     ISZEROORNOT_P1:
    3570/     DF5 : A3                  	LD R3
    3571/     DF6 : 1C FC               	JCN ZN, ISZEROORNOT_EXIT1
    3572/     DF8 : A2                  	LD R2
    3573/     DF9 : 1C FC               	JCN ZN, ISZEROORNOT_EXIT1
    3574/     DFB : C0                  	BBL 0
    3575/     DFC :                     ISZEROORNOT_EXIT1:
    3576/     DFC : C1                  	BBL 1
    3577/     DFD :                     ;;;----------------------------------------------------------------------------
    3578/     DFD :                     ;;; Print subroutine and string data located in Page E (0E00H-0EFFH)
    3579/     DFD :                     ;;; The string data sould be located in the same page as the print routine.
    3580/     DFD :                     ;;;----------------------------------------------------------------------------
    3581/     E00 :                             org 0E00H
    3582/     E00 :                     ;;;----------------------------------------------------------------------------
    3583/     E00 :                     ;;; PRINTSTR_P0
    3584/     E00 :                     ;;; Input: P0 (top of the string is 0E00H+P0)
    3585/     E00 :                     ;;; Destroy: P6, P7 (by PUTCHAR)
    3586/     E00 :                     ;;;----------------------------------------------------------------------------
    3587/     E00 :                     PRINTSTR_P0:
    3588/     E00 : 59 43               	JMS PUSH_P0
    3589/     E02 : 59 5B               	JMS PUSH_P1
    3590/     E04 :                     PRINTSTRP0_LOOP:
    3591/     E04 : 32                          FIN P1			; P1=(P0)
    3592/     E05 : A2                          LD R2
    3593/     E06 : 1C 0B                       JCN ZN, PRINTSTRP0_PUT	; R2!=0 then putchar
    3594/     E08 : A3                  	LD R3
    3595/     E09 : 14 12                       JCN Z, PRINTSTRP0_EXIT     	; R2==0 and R3==0 then exit
    3596/     E0B :                     PRINTSTRP0_PUT:
    3597/     E0B : 5D 28                       JMS PUTCHAR_P1          ; putchar(P1)
    3598/     E0D : 71 04                       ISZ R1, PRINTSTRP0_LOOP   ; P0=P0+1
    3599/     E0F : 60                          INC R0
    3600/     E10 : 4E 04                       JUN PRINTSTRP0_LOOP	; print remaining string
    3601/     E12 :                     PRINTSTRP0_EXIT:
    3602/     E12 : 59 A5               	JMS POP_P1
    3603/     E14 : 59 8B               	JMS POP_P0
    3604/     E16 : C0                          BBL 0                   ; exit if P1(R2,R3) == 0
    3605/     E17 :                                     
    3606/     E17 :                     ;;;----------------------------------------------------------------------------
    3607/     E17 :                     ;;; String data
    3608/     E17 :                     ;;;----------------------------------------------------------------------------
    3609/     E17 :                     
    3610/     E17 :                     STR_OMSG:
    3611/     E17 : 0D 49 6E 74 65 6C   	data "\rIntel MCS-4 (4004)\r\nTiny Monitor\r\n", 0
              E1D : 20 4D 43 53 2D 34 
              E23 : 20 28 34 30 30 34 
              E29 : 29 0D 0A 54 69 6E 
              E2F : 79 20 4D 6F 6E 69 
              E35 : 74 6F 72 0D 0A 00 
    3612/     E3B :                     STR_VFD_INIT:		;reset VFD and set scroll mode
    3613/     E3B : 1B 40 1F 02 00      	data 1bH, 40H, 1fH, 02H, 0
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 71 - 2023/03/12 16:43:50


    3614/     E40 :                     STR_BANK:
    3615/     E40 : 20 42 41 4E 4B 3D   	data " BANK=", 0
              E46 : 00                
    3616/     E47 :                     STR_CHIP:
    3617/     E47 : 20 43 48 49 50 3D   	data " CHIP=", 0
              E4D : 00                
    3618/     E4E :                     STR_ADR:
    3619/     E4E : 20 41 44 52 3D 00   	data " ADR=", 0
    3620/     E54 :                     STR_VTL_MESSAGE:
    3621/     E54 : 0D 0A 56 54 4C 2D   	data "\r\nVTL-4004 Interpreter Ver 1.0\r\n", 0
              E5A : 34 30 30 34 20 49 
              E60 : 6E 74 65 72 70 72 
              E66 : 65 74 65 72 20 56 
              E6C : 65 72 20 31 2E 30 
              E72 : 0D 0A 00          
    3622/     E75 :                     STR_VTL_OK:
    3623/     E75 : 0D 0A 4F 4B 0D 0A   	data "\r\nOK\r\n", 0
              E7B : 00                
    3624/     E7C :                     STR_VTL_ERROR:
    3625/     E7C : 45 52 52 4F 52 3D   	data "ERROR=", 0
              E82 : 00                
    3626/     E83 :                     STR_VTL_BUF:
    3627/     E83 : 42 55 46 3D 00      	data "BUF=", 0
    3628/     E88 :                     STR_VTL_SP:
    3629/     E88 : 53 50 3D 00         	data "SP=", 0
    3630/     E8C :                     STR_VTL_ERRORLINENUM:
    3631/     E8C : 49 4E 20 23 00      	data "IN #", 0
    3632/     E91 :                     STR_CMDERR:
    3633/     E91 : 0D 0A 76 3D 56 54   	data "\r\nv=VTL, r/w=RD/WR RAM, R/W/C/B=RD/WR/CLR/BNK PM, l/L=rd/wr LM, g=go PM(F00)\r\n", 0 ;
              E97 : 4C 2C 20 72 2F 77 
              E9D : 3D 52 44 2F 57 52 
              EA3 : 20 52 41 4D 2C 20 
              EA9 : 52 2F 57 2F 43 2F 
              EAF : 42 3D 52 44 2F 57 
              EB5 : 52 2F 43 4C 52 2F 
              EBB : 42 4E 4B 20 50 4D 
              EC1 : 2C 20 6C 2F 4C 3D 
              EC7 : 72 64 2F 77 72 20 
              ECD : 4C 4D 2C 20 67 3D 
              ED3 : 67 6F 20 50 4D 28 
              ED9 : 46 30 30 29 0D 0A 
              EDF : 00                
    3634/     EE0 :                     
    3635/     EE0 :                     ;;;---------------------------------------------------------------------------
    3636/     EE0 :                     ;;; Subroutine for reading program memory located on page 15 (0F00H-0FFFH)
    3637/     EE0 :                     ;;;---------------------------------------------------------------------------
    3638/     EE0 :                     ;;; READPM_P0
    3639/     EE0 :                     ;;; P1 = (P0)
    3640/     EE0 :                     ;;; input: P0
    3641/     EE0 :                     ;;; output: P1
    3642/     EE0 :                     ;;;---------------------------------------------------------------------------
    3643/     EE0 :                     ;;; 	org 0FFEH
    3644/     EE0 :                     ;;; PM_READ_P0_P1:
    3645/     EE0 : 32                  	FIN P1
    3646/     EE1 : C0                  	BBL 0
    3647/     EE2 :                     
    3648/     EE2 :                     	end
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 72 - 2023/03/12 16:43:50


  Symbol Table (* = unused):
  --------------------------

 ADD_REG16P0_REG16P1 :          6C0 C |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 BANK_DEFAULT :                   0 - | *BANK_PMSELECT :                  0 - |
 BANK_RAM0 :                      0 - |  BANK_RAM1 :                      0 - |
 BANK_RAM2 :                      0 - |  BANK_RAM3 :                      0 - |
 BANK_SERIAL :                    0 - |  BAUDRATE :                    2580 - |
*CASESENSITIVE :                  0 - |  CHIP_PMSELECT :                  0 - |
 CHIP_RAM0 :                      0 - |  CHIP_RAM1 :                     40 - |
 CHIP_RAM2 :                     80 - |  CHIP_RAM3 :                    0C0 - |
 CHIP_SERIAL :                  0C0 - |  CLEARREG16_LOOP :              547 C |
 CLEAR_REG16P0 :                542 C |  CLEAR_SIGNFLAG :               64C C |
 CMDPMC_BANKLOOP :             0CD9 C |  CMDPMC_L1 :                   0CE0 C |
 CMDPMR_L0 :                   0CB4 C |  CMDPMR_L1 :                   0CC3 C |
 CMDPMW_L1 :                   0C94 C |  CMDR_L1 :                     0C08 C |
 CMDR_L2 :                     0C0A C |  CMDW_L1 :                     0C32 C |
 CMDW_L2 :                     0C34 C |  CMD_LOOP :                      1B C |
 CMP01EXIT01 :                 0DCF C |  CMP01L1 :                     0DC9 C |
 CMP17_EXIT01 :                0DDC C |  CMP17_L1 :                    0DD6 C |
 CMPEQ12_EXIT1 :               0DE8 C |  CMPEQ27_EXIT1 :               0DF4 C |
 CMPEQ_P1P2 :                  0DDD C |  CMPEQ_P2P7 :                  0DE9 C |
 CMP_P0P1 :                    0DC3 C |  CMP_P1P7 :                    0DD0 C |
 CMP_REG16P0_REG16P1 :          7C8 C |  COMMAND_G :                   0C00 C |
 COMMAND_LMR :                 0AD3 C |  COMMAND_LMR_HLOOP :           0B0C C |
 COMMAND_LMR_VLOOP :           0B00 C |  COMMAND_LMW :                 0B1C C |
 COMMAND_LMW_EXIT :            0B64 C |  COMMAND_LMW_LOOP :            0B3E C |
 COMMAND_PMB :                  8F3 C |  COMMAND_PMC :                 0CD5 C |
 COMMAND_PMR :                 0CAE C |  COMMAND_PMW :                 0C73 C |
 COMMAND_R :                   0C06 C |  COMMAND_V :                    100 C |
 COMMAND_W :                   0C30 C |  COMPLEMENT_REG16P0 :           5EB C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
 CTOI_09 :                     0DC0 C |  CTOI_P1 :                     0DB7 C |
 CTOREG16NUM_P1 :               52D C | *DATE :                "2023/03/12" - |
 DEC_REG16P0 :                  5DA C |  DISPLED_P1 :                  0D71 C |
 DIV16_P2P3 :                   6EC C |  DIV2REG16_LOOP :               6AF C |
 DIV2_REG16P2 :                 6A8 C |  DIV_POSITIVE_DIVIDEND :        737 C |
 DIV_POSITIVE_DIVISOR :         74D C |  DIV_REG16P0_REG16P1 :          721 C |
 ERROR_EVAL_UNEXPECTED_EOL :    0E1 - |  ERROR_EVAL_UNKNOWNOPERATOR :   0E2 - |
 ERROR_EXEC_SYNTAX_ERROR :      0E0 - |  ERROR_FACTOR_NOTAFACTOR :      0F0 - |
 ERROR_NOERROR :                  0 - |  ERROR_PRINT_CANNOTPRINT :      0A0 - |
 ERROR_RETURN_P2_IS_00 :        0B0 - |  EVAL_06 :                      42A C |
 EVAL_CONTINUE :                3AE C |  EVAL_EXIT :                    440 C |
 EVAL_EXPRESSION_PMINDEX_REG16P1 :                                      394 C |
 EVAL_LVALUE_FALSE :            414 C |  EVAL_LVALUE_TRUE :             418 C |
 EVAL_NEXT1 :                   3BC C |  EVAL_NEXT2 :                   3C6 C |
 EVAL_NEXT3 :                   3CE C |  EVAL_O1 :                      3EA C |
 EVAL_O2 :                      3F4 C |  EVAL_O3 :                      3FE C |
 EVAL_O4 :                      40A C |  EVAL_O5 :                      41E C |
 EVAL_O7 :                      436 C | *EVAL_O8 :                      436 C |
*EVAL_O9 :                      436 C |  EVAL_R1 :                      3AE C |
 EVAL_R2 :                      3D6 C |  EVAL_START :                   3A8 C |
 EXEC_R1 :                      2C7 C | *FALSE :                          0 - |
 FIND_LINE_AND_EXEC :           23A C |  FIND_LINE_AND_EXEC_EXIT :      260 C |
 FIND_LINE_AND_EXEC_GO :        25C C |  FIND_LINE_LOOP :               242 C |
*FULLPMMU :                       1 - |  GETCHAR_L1 :                  0D08 C |
 GETCHAR_L2 :                  0D0D C |  GETCHAR_L3 :                  0D10 C |
 GETCHAR_L4 :                  0D17 C |  GETCHAR_L5 :                  0D1C C |
 GETCHAR_L6 :                  0D1F C |  GETCHAR_OK :                  0D27 C |
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 73 - 2023/03/12 16:43:50


 GETCHAR_P1 :                  0D00 C | *GETFACTOR_ERROR :              502 C |
 GETFACTOR_EXIT :               50E C |  GETFACTOR_EXIT_NOINCREMENT :   510 C |
 GETFACTOR_L0 :                 468 C |  GETFACTOR_L1 :                 480 C |
 GETFACTOR_L10 :                502 C |  GETFACTOR_L2 :                 48A C |
 GETFACTOR_L3 :                 494 C |  GETFACTOR_L4 :                 4A0 C |
 GETFACTOR_L5 :                 4AC C |  GETFACTOR_L6 :                 4B8 C |
 GETFACTOR_L7 :                 4C4 C |  GETFACTOR_L8 :                 4D0 C |
 GETFACTOR_L9 :                 4E0 C |  GETFACTOR_L91 :                4E8 C |
 GETFACTOR_L9_R1 :              4FC C |  GETFACTOR_PMINDEX_REG16P1 :    450 C |
 GETFACTOR_R1 :                 466 C |  GETFACTOR_R2 :                 478 C |
 GETHEXNUMBER :                0ABF C |  GETHEX_EXIT :                 0AB9 C |
 GETHEX_LOOP :                 0AC3 C |  GETLINE_BS :                  0A3F C |
 GETLINE_EXIT :                0A53 C |  GETLINE_INSERTCHAR :          0A4B C |
 GETLINE_L1 :                  0A31 C | *GETLINE_L1_NEXT :             0A41 C |
 GETLINE_LOOP :                0A25 C |  GETLINE_PM12REG16P0 :         0A1D C |
 GETNUMBER_EXIT :              0AB0 C |  GETNUMBER_LOOP :              0A84 C |
 GETNUMBER_PM12REG16P0_REG16P1 :                                       0A64 C |
 GETNUMBER_SKIP_MUL10 :        0A9E C |  GETSIGN_REG16P0_TOCARRY :      5AE C |
 GET_PRINTFORMAT_R5 :           33E C |  GET_SIGNFLAG_TOCARRY :         659 C |
*HAS64 :                          1 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - |  INC_REG16P0 :                  5CA C |
 INITVAL_STACKPOINTER :           0 - |  INIT_SERIAL :                 0D82 C |
 INIT_STACKPOINTER :            939 C |  INSERT_PROGRAM_EXIT :          1E1 C |
 INSERT_PROGRAM_L1 :            1AF C |  INSERT_PROGRAM_LOOP :          1CF C |
*INSUPMODE :                      0 - |  ISALPHA_FALSE :               0DB6 C |
*ISALPHA_L1 :                  0D9A C |  ISALPHA_L10 :                 0DA1 C |
 ISALPHA_L2 :                  0DA8 C |  ISALPHA_L20 :                 0DAF C |
 ISALPHA_P1 :                  0D9A C |  ISCRLF_EXIT0 :                0CFC C |
 ISCRLF_EXIT1 :                0CFD C |  ISCRLF_P1 :                   0CEF C |
 ISHEX_FALSE :                  0D0 C |  ISHEX_L00 :                    0AD C |
 ISHEX_L1 :                     0B4 C |  ISHEX_L10 :                    0BB C |
 ISHEX_L2 :                     0C2 C |  ISHEX_L20 :                    0C9 C |
 ISHEX_P1 :                     0A6 C |  ISNUM_FALSE :                 0D99 C |
 ISNUM_P1 :                    0D8C C |  ISZEROORNOT_EXIT1 :           0DFC C |
 ISZEROORNOT_LOOP :             5BD C |  ISZEROORNOT_P1 :              0DF5 C |
 ISZEROORNOT_REG16P1 :          5B9 C |  ISZEROREGP0_EXIT1 :            5C7 C |
 L0 :                            2B C |  L1 :                            37 C |
 L10 :                           81 C |  L2 :                            41 C |
 L3 :                            49 C |  L4 :                            51 C |
 L5 :                            59 C |  L6 :                            61 C |
 L7 :                            69 C |  L8 :                            71 C |
 L9 :                            79 C |  LDREG16P0P1_LOOP :             555 C |
 LDREG16P1P0_LOOP :             568 C |  LDREG16P1P2_LOOP :             57B C |
 LDREG16P2P0_LOOP :             58E C |  LDREG16P2P1_LOOP :             5A1 C |
 LD_P1_PM12REG16P0 :            906 C |  LD_P1_REG16P0_8BIT :           66A C |
 LD_P1_REG8P0 :                 66A C |
 LD_P2P3_PM12REG16P0_AND_INCREMENT :                                    203 C |
 LD_P2P3_REG16P0 :              675 C |  LD_P2P3_REG16P1 :              623 C |
 LD_PM12REG16P0_P1 :            921 C |  LD_REG16P0_8BIT_P1 :           638 C |
 LD_REG16P0_P2P3 :              5F9 C |  LD_REG16P0_REG16P1 :           54F C |
 LD_REG16P1_P2P3 :              60E C |  LD_REG16P1_REG16P0 :           562 C |
 LD_REG16P1_REG16P2 :           575 C |  LD_REG16P2_REG16P0 :           588 C |
 LD_REG16P2_REG16P1 :           59B C |  LD_REG8P0_P1 :                 65F C |
*LISTON :                         1 - | *L_CR :                          1F C |
*MACEXP :                         7 - | *MAIN :                           0 C |
*MOMCPU :                      4004 - | *MOMCPUNAME :                "4004" - |
 MUL16_P2P3 :                   6F5 C |  MUL2REG16P0_LOOP :             68F C |
 MUL2REG16P1_LOOP :             69E C |  MUL2_REG16P0 :                 68A C |
 MUL2_REG16P1 :                 699 C |  MUL_REG16P0_REG16P1 :          6FE C |
 MUL_REG16_LOOP :               712 C |  MUL_REG16_NEXT :               718 C |
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 74 - 2023/03/12 16:43:50


*NESTMAX :                      100 - | *PADDING :                        1 - |
*PM12_DATA :                   0B00 - |  PM12_LINEBUF :                   0 - |
 PM12_MEMEND :                 0DFF - |  PM12_PROGRAM :                 100 - |
 PM_INIT_BANK :                 8E2 C |  PM_INIT_LOOP :                   9 C |
 PM_RAM_START :                0F00 - |  PM_READ_P0_P1 :               0FFE - |
 PM_SELECTPMB :                 8EE C |  PM_WRITE_P0_P1 :               8D6 C |
 PM_WRITE_P6_P7 :               8DC C |  POP_P0 :                       98B C |
 POP_P1 :                       9A5 C |  POP_P2 :                       9BF C |
 POP_REG16P1 :                  9FC C |  POP_REG16P1_LOOP :            0A07 C |
 POP_REG16P1_NOCARRY :         0A10 C |  PRINTACC_L1 :                 0D50 C |
 PRINTFMT_HEX2B :                 1 - |  PRINTFMT_HEX4B :                 2 - |
 PRINTFMT_NORMAL :                0 - |  PRINTHEX_P1 :                  8B0 C |
 PRINTHEX_REG16P1 :             88D C |  PRINTSTRP0_EXIT :             0E12 C |
 PRINTSTRP0_LOOP :             0E04 C |  PRINTSTRP0_PUT :              0E0B C |
 PRINTSTR_EXIT :                80E C |  PRINTSTR_EXIT_NOINCREMENT :    816 C |
 PRINTSTR_LOOP :                7FE C |  PRINTSTR_P0 :                 0E00 C |
 PRINTSTR_PM12REG16P0 :         7EC C |
 PRINTSTR_PM12REG16P0_DELIM_P1 :                                        7F4 C |
 PRINTSTR_PM12REG16P0_XX :      7F8 C |  PRINT_ACC :                   0D48 C |
 PRINT_AND_CLEARFLAG :          8CE C |  PRINT_CR :                    0D69 C |
 PRINT_CRLF :                  0D5C C |  PRINT_LF :                    0D6D C |
 PRINT_LIST :                   214 C |  PRINT_LIST_LOOP :              21C C |
 PRINT_LIST_PRINTLINE :         224 C |  PRINT_R1 :                     35C C |
 PRINT_REG16P1 :                81D C |  PRINT_REG16P1_POSITIVE :       83E C |
 PRINT_REG4P0_ZEROSUP :         8C3 C |  PRINT_SPC :                   0D53 C |
 PUSH_P0 :                      943 C |  PUSH_P1 :                      95B C |
 PUSH_P2 :                      973 C |  PUSH_REG16P1 :                 9D9 C |
 PUSH_REG16P1_LOOP :            9ED C |  PUSH_REG16P1_NOBORROW :        9E9 C |
 PUSH_REG16P1_NOINCUPPER :      9F6 C |  PUTCHAR_L1 :                  0D30 C |
 PUTCHAR_L2 :                  0D3F C |  PUTCHAR_P1 :                  0D28 C |
 RAM23TYPE :               "4002-2" - | *REG16_A :                        4 - |
 REG16_ADD_LOOP :               6C7 C | *REG16_ARRAYINDEX :              9C - |
*REG16_B :                        8 - | *REG16_C :                       0C - |
 REG16_CMP_EXIT0 :              7EB C |  REG16_CMP_LOOP :               7D1 C |
 REG16_CMP_NEXT :               7DE C | *REG16_COMPLEMENT_EXIT :        5F6 C |
 REG16_COMPLEMENT_LOOP :        5EF C | *REG16_D :                       10 - |
 REG16_DEC_EXIT :               5E8 C |  REG16_DEC_LOOP :               5DF C |
 REG16_DIV_EXIT :               7C3 C |  REG16_DIV_L1 :                 79B C |
 REG16_DIV_L2 :                 78E C |  REG16_DIV_L3 :                 781 C |
 REG16_DIV_L4 :                 774 C |  REG16_DIV_LOOP1 :              79D C |
 REG16_DIV_LOOP2 :              790 C |  REG16_DIV_LOOP3 :              783 C |
 REG16_DIV_LOOP4 :              776 C |  REG16_DIV_NEXT1 :              7A4 C |
 REG16_DIV_NEXT2 :              797 C |  REG16_DIV_NEXT3 :              78A C |
 REG16_DIV_NEXT4 :              77D C |  REG16_DIV_POSITIVE_RMND :      7AF C |
*REG16_E :                       14 - |  REG16_EVAL :                    8C - |
*REG16_F :                       18 - |  REG16_FACTOR :                  88 - |
*REG16_G :                       1C - | *REG16_H :                       20 - |
*REG16_I :                       24 - |  REG16_INC_EXIT :               5D7 C |
 REG16_INC_LOOP :               5CE C |  REG16_INDEX :                    0 - |
*REG16_J :                       28 - | *REG16_K :                       2C - |
*REG16_L :                       30 - |  REG16_LINENUM :                 6C - |
 REG16_LVALUE :                  80 - | *REG16_M :                       34 - |
*REG16_N :                       38 - |  REG16_NEXTLINEPTR :             70 - |
*REG16_O :                       3C - | *REG16_P :                       40 - |
 REG16_PEND :                    74 - | *REG16_Q :                       44 - |
*REG16_R :                       48 - |  REG16_RANDOM :                  98 - |
*REG16_RESERVED_0B0 :           0B0 - | *REG16_RESERVED_0B4 :           0B4 - |
*REG16_RESERVED_0B8 :           0B8 - | *REG16_RESERVED_0BC :           0BC - |
 REG16_RETURN :                  94 - |  REG16_RMND :                    90 - |
 REG16_RVALUE :                  84 - | *REG16_S :                       4C - |
 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 75 - 2023/03/12 16:43:50


*REG16_STACKAREA_0C0 :          0C0 - | *REG16_STACKAREA_0C4 :          0C4 - |
*REG16_STACKAREA_0C8 :          0C8 - | *REG16_STACKAREA_0CC :          0CC - |
*REG16_STACKAREA_0D0 :          0D0 - | *REG16_STACKAREA_0D4 :          0D4 - |
*REG16_STACKAREA_0D8 :          0D8 - | *REG16_STACKAREA_0DC :          0DC - |
*REG16_STACKAREA_0E0 :          0E0 - | *REG16_STACKAREA_0E4 :          0E4 - |
*REG16_STACKAREA_0E8 :          0E8 - | *REG16_STACKAREA_0EC :          0EC - |
*REG16_STACKAREA_0F0 :          0F0 - | *REG16_STACKAREA_0F4 :          0F4 - |
*REG16_STACKAREA_0F8 :          0F8 - | *REG16_STACKAREA_0FC :          0FC - |
 REG16_STACKPOINTER :           0FC - |  REG16_SUB_LOOP :               6DC C |
*REG16_T :                       50 - |  REG16_TMP :                    0A0 - |
 REG16_TMP2 :                   0A4 - |  REG16_TMP3 :                   0A8 - |
 REG16_TMP_PRN :                0AC - | *REG16_U :                       54 - |
*REG16_V :                       58 - | *REG16_W :                       5C - |
*REG16_X :                       60 - | *REG16_Y :                       64 - |
*REG16_Z :                       68 - |  REG4_PRINTFORMAT :              7E - |
*REG4_RESERVE_7FH :              7F - |  REG4_SIGN :                     7D - |
 REG4_ZEROSUP :                  7C - |  REG8_ERROR :                    78 - |
 REG8_ERROR2 :                   7A - | *RELAXED :                        0 - |
 RETURN_EVAL_R1 :              0BDF C |  RETURN_EVAL_R2 :              0BE1 C |
 RETURN_EXEC_R1 :              0BDD C |  RETURN_GETFACTOR_L9_R1 :      0BE9 C |
 RETURN_GETFACTOR_R1 :         0BE3 C |  RETURN_GETFACTOR_R2 :         0BE5 C |
 RETURN_P2 :                   0BD0 C |  RETURN_P2_OK :                0BDC C |
 RETURN_PRINT_R1 :             0BE7 C |  SETBANKCHIP_P5 :                87 C |
 SET_PRINTFORMAT :              339 C |  SKIPSPACE_EXIT :               52A C |
 SKIPSPACE_LOOP :               51E C |  SKIPSPACE_PM12REG16P0 :        51C C |
 STR_ADR :                     0E4E C |  STR_BANK :                    0E40 C |
 STR_CHIP :                    0E47 C |  STR_CMDERR :                  0E91 C |
 STR_OMSG :                    0E17 C |  STR_VFD_INIT :                0E3B C |
 STR_VTL_BUF :                 0E83 C |  STR_VTL_ERROR :               0E7C C |
 STR_VTL_ERRORLINENUM :        0E8C C |  STR_VTL_MESSAGE :             0E54 C |
 STR_VTL_OK :                  0E75 C |  STR_VTL_SP :                  0E88 C |
 SUB_REG16P0_REG16P1 :          6D5 C | *TIME :                  "16:43:50" - |
 TOGGLE_SIGNFLAG :              652 C | *TRUE :                           1 - |
*VERSION :                     142F - |  VTL_ERROR_NOLINENUM :          14E C |
 VTL_EXECUTE_PMINDEX :          286 C |  VTL_EXECUTE_PMINDEX_CONTINUE : 286 C |
 VTL_EXEC_GOSUB :               305 C |  VTL_EXEC_GOTO_FROM_GOSUB :     2EB C |
 VTL_EXEC_L0 :                  292 C |  VTL_EXEC_L0_CHECKHEX4 :        2AB C |
 VTL_EXEC_L0_NORMAL :           2B8 C |  VTL_EXEC_L1 :                  2BD C |
*VTL_EXEC_L10 :                 32D C |  VTL_EXEC_L2 :                  2D5 C |
 VTL_EXEC_L2_TRUE :             2E3 C |  VTL_EXEC_L3 :                  2E5 C |
 VTL_EXEC_L4 :                  2F9 C |  VTL_EXEC_L5 :                  311 C |
 VTL_EXEC_L6 :                  31D C |  VTL_EXEC_L7 :                  32D C |
*VTL_EXEC_L8 :                  32D C | *VTL_EXEC_L9 :                  32D C |
 VTL_EXEC_PRINT :               344 C |  VTL_EXEC_PRINT_L1 :            34E C |
 VTL_EXEC_SKIPGOTO :            2F7 C | *VTL_EXEC_SYNTAX_ERROR :        32D C |
 VTL_INSERT_PROGRAMLINE :       1A5 C |  VTL_L0 :                       18B C |
 VTL_L1 :                       191 C |  VTL_LOOP :                     173 C |
 VTL_NOERROR :                  158 C |  VTL_OK :                       16F C |
 VTL_PRINT_DEFAULT :            374 C |  VTL_PRINT_ERREXIT :            38C C |
 VTL_PRINT_EXIT :               392 C |  VTL_PRINT_FMT2 :               36B C |
 VTL_PRINT_L2 :                 356 C |  VTL_PRINT_QUOTEDSTRING :       378 C |
 VTL_PRINT_SKIPCRLF :           388 C |  VTL_RUN_PROGRAM_EXIT :         284 C |
 VTL_RUN_PROGRAM_PMINDEX :      262 C |
 VTL_RUN_PROGRAM_PMINDEX_FROM_GOTO :                                    26A C |
 VTL_RUN_SINGLE_LINE :          272 C |  VTL_RUN_SINGLE_LINE_RETURN :   274 C |
 VTL_SET_PRINTFMT :             29C C |  VTL_START :                    116 C |

    456 symbols
     83 unused symbols

 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 76 - 2023/03/12 16:43:50


 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 77 - 2023/03/12 16:43:50


  Register Definitions (* = unused):
  ----------------------------------

 P0 --> R0P                           |  P1 --> R1P                          
 P2 --> R2P                           |  P3 --> R3P                          
 P4 --> R4P                           |  P5 --> R5P                          
 P6 --> R6P                           |  P7 --> R7P                          
*R10 --> R10                          | *R10R11 --> R5P                      
*R11 --> R11                          | *R12 --> R12                         
*R12R13 --> R6P                       | *R13 --> R13                         
*R14 --> R14                          | *R14R15 --> R7P                      
*R15 --> R15                         

     17 definitions

 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 78 - 2023/03/12 16:43:50


  Defined Macros:
  ---------------

DEBUG_SAFEPUTCHAR                     | LD_P0_P1                             
LD_P0_P2                              | LD_P0_P3                             
LD_P0_P5                              | LD_P0_P6                             
LD_P1_P0                              | LD_P1_P2                             
LD_P1_P3                              | LD_P1_P4                             
LD_P2_P0                              | LD_P2_P1                             
LD_P2_P3                              | LD_P2_P4                             
LD_P3_P1                              | LD_P3_P2                             
LD_P3_P5                              | LD_P4_P1                             
LD_P5_P0                              | LD_P6_P0                             
LD_P7_P2                              | POPP                                 
PUSHP                                 |

     23 macros

 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 79 - 2023/03/12 16:43:50


  Defined Functions:
  ------------------

LOOPS                                 | LOOP                                 
UP                                    | LO                                   

 AS V1.42 Beta [Bld 236] - Source File vtl.asm - Page 80 - 2023/03/12 16:43:50


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.02 seconds assembly time

   3990 lines source file
   4231 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
